Sorting hints by stride
Trying to connect to tpch with user ubuntu
All parameters: ['innodb_spin_wait_delay', 'max_connections', 'innodb_thread_concurrency', 'innodb_log_file_size', 'innodb_buffer_pool_size', 'innodb_max_purge_lag_delay', 'table_definition_cache', 'max_seeks_for_key', 'eq_range_index_dive_limit', 'innodb_ft_total_cache_size', 'innodb_sync_spin_loops', 'innodb_log_buffer_size', 'skip_networking', 'binlog_cache_size', 'innodb_max_dirty_pages_pct', 'query_prealloc_size', 'multi_range_count', 'innodb_adaptive_hash_index_parts', 'sort_buffer_size', 'innodb_ft_num_word_optimize', 'query_cache_min_res_unit', 'max_length_for_sort_data', 'query_cache_size', 'max_points_in_geometry', 'innodb_sort_buffer_size', 'binlog_group_commit_sync_delay', 'max_error_count', 'group_concat_max_len', 'max_digest_length', 'innodb_flushing_avg_loops', 'innodb_adaptive_max_sleep_delay', 'max_heap_table_size', 'innodb_flush_log_at_timeout', 'key_buffer_size', 'max_sort_length', 'innodb_ft_result_cache_limit', 'max_prepared_stmt_count', 'host_cache_size', 'innodb_api_bk_commit_interval', 'innodb_thread_sleep_delay', 'innodb_lru_scan_depth', 'max_user_connections', 'range_alloc_block_size', 'net_read_timeout', 'innodb_max_purge_lag', 'key_cache_age_threshold', 'innodb_io_capacity_max', 'innodb_change_buffer_max_size', 'ft_query_expansion_limit', 'max_binlog_cache_size', 'innodb_purge_batch_size', 'back_log', 'innodb_ft_cache_size', 'thread_cache_size', 'bulk_insert_buffer_size', 'binlog_stmt_cache_size', 'max_binlog_size', 'join_buffer_size', 'transaction_prealloc_size', 'innodb_max_undo_log_size', 'transaction_alloc_block_size', 'open_files_limit', 'innodb_adaptive_flushing_lwm', 'innodb_open_files', 'read_rnd_buffer_size', 'preload_buffer_size', 'max_write_lock_count', 'table_open_cache_instances', 'innodb_online_alter_log_max_size', 'tmp_table_size', 'max_delayed_threads', 'innodb_autoextend_increment', 'innodb_io_capacity', 'binlog_group_commit_sync_no_delay_count', 'innodb_stats_transient_sample_pages', 'table_open_cache', 'net_buffer_length', 'max_join_size', 'key_cache_block_size', 'innodb_log_write_ahead_size', 'innodb_write_io_threads', 'read_buffer_size', 'sync_binlog', 'max_allowed_packet', 'query_alloc_block_size', 'innodb_commit_concurrency', 'innodb_read_ahead_threshold', 'innodb_replication_delay', 'innodb_old_blocks_time', 'query_cache_limit', 'stored_program_cache', 'innodb_concurrency_tickets', 'innodb_compression_failure_threshold_pct', 'innodb_compression_pad_pct_max', 'innodb_fill_factor', 'innodb_read_io_threads', 'connect_timeout', 'max_binlog_stmt_cache_size', 'net_write_timeout', 'innodb_ft_max_token_size', 'innodb_page_cleaners', 'autocommit', 'automatic_sp_privileges', 'binlog_direct_non_transactional_updates', 'binlog_error_action', 'binlog_format', 'binlog_order_commits', 'binlog_row_image', 'binlog_rows_query_log_events', 'check_proxy_users', 'completion_type', 'concurrent_insert', 'default_week_format', 'delay_key_write', 'div_precision_increment', 'end_markers_in_json', 'expire_logs_days', 'explicit_defaults_for_timestamp', 'flush', 'flush_time', 'ft_min_word_len', 'general_log', 'innodb_adaptive_flushing', 'innodb_api_disable_rowlock', 'innodb_api_enable_binlog', 'innodb_api_enable_mdl', 'innodb_change_buffering', 'innodb_cmp_per_index_enabled', 'innodb_compression_level', 'innodb_deadlock_detect', 'innodb_default_row_format', 'innodb_disable_sort_file_cache', 'innodb_doublewrite', 'innodb_file_per_table', 'innodb_flush_log_at_trx_commit', 'innodb_flush_neighbors', 'innodb_flush_sync', 'innodb_ft_enable_diag_print', 'innodb_ft_enable_stopword', 'innodb_ft_min_token_size', 'innodb_ft_sort_pll_degree', 'innodb_log_compressed_pages', 'innodb_log_files_in_group', 'innodb_max_dirty_pages_pct_lwm', 'innodb_optimize_fulltext_only', 'innodb_print_all_deadlocks', 'innodb_purge_rseg_truncate_frequency', 'innodb_purge_threads', 'innodb_random_read_ahead', 'innodb_rollback_on_timeout', 'innodb_rollback_segments', 'innodb_stats_auto_recalc', 'innodb_stats_include_delete_marked', 'innodb_stats_method', 'innodb_stats_on_metadata', 'innodb_stats_persistent', 'innodb_strict_mode', 'innodb_sync_array_size', 'innodb_table_locks', 'innodb_undo_log_truncate', 'innodb_use_native_aio', 'keep_files_on_create', 'key_cache_division_limit', 'local_infile', 'log_bin_trust_function_creators', 'log_bin_use_v1_row_events', 'log_builtin_as_identified_by_password', 'log_output', 'log_queries_not_using_indexes', 'log_slave_updates', 'log_slow_admin_statements', 'log_statements_unsafe_for_binlog', 'log_syslog_include_pid', 'log_timestamps', 'long_query_time', 'low_priority_updates', 'lower_case_table_names', 'master_verify_checksum', 'mysql_native_password_proxy_users', 'ngram_token_size', 'offline_mode', 'old_alter_table', 'old_passwords', 'optimizer_prune_level', 'optimizer_search_depth', 'query_cache_wlock_invalidate', 'require_secure_transport', 'session_track_gtids', 'session_track_schema', 'session_track_state_change', 'session_track_transaction_info', 'show_compatibility_56', 'skip_external_locking', 'skip_name_resolve', 'slow_query_log', 'sync_frm', 'updatable_views_with_limit']
Starting run number 0 ...
Trying to connect to tpch with user ubuntu
Trying to connect to tpch with user ubuntu
Pre-processing input text at "tuning_docs/mysql100" ...
Discard text passages without at least one explicit parameter reference: True (1)
Try to infer implicit parameter references: True (1)
Creating hints for document 0
Creating hints for document 1
Creating hints for document 2
Excluding recommendation "
gps_fixedCore Platform" for parameter "table_open_cache" due to low confidence (0.003848741529509425)
Excluding recommendation "table_open_cache" for parameter "gps_fixed" due to low confidence (0.0015976569848135114)
Adding hint TuningHint(doc_id=2, param=<re.Match object; span=(22, 29), match='world_x'>, value=<re.Match object; span=(11, 15), match='5000'>, recommendation='city LIMIT 5000', passage='EXPLAIN SELECT * FROM world_x.city LIMIT 5000;\nMySQL EXPLAIN query output\nMySQL Query Log\nIn MySQL, slow queries are logged in an built-in query log. Once you find the slow queries in the query log, use the EXPLAIN statement to determine why the queries are slow and optimize them. slow_query_log ', float_val=5000.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.13085395097732544
Creating hints for document 3
Creating hints for document 4
Adding hint TuningHint(doc_id=4, param=<re.Match object; span=(0, 23), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 3), match='50%'>, recommendation='50% – 70% of your total RAM', passage='innodb_buffer_pool_size\nGenerally, set to 50% – 70% of your total RAM as a starting point.\nIt does not need to be set any larger than the total database size.\nPercona Monitoring and Management (PMM) can offer additional insight, showing your buffer pool usage and allowing you to tune accordingly. innodb_buffer_pool_size ', float_val=0.5, val_unit='', hint_type=<HintType.RAM_RATIO: 1>) with confidence 0.18357956409454346
Adding hint TuningHint(doc_id=4, param=<re.Match object; span=(0, 23), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(6, 9), match='70%'>, recommendation='50% – 70% of your total RAM', passage='innodb_buffer_pool_size\nGenerally, set to 50% – 70% of your total RAM as a starting point.\nIt does not need to be set any larger than the total database size.\nPercona Monitoring and Management (PMM) can offer additional insight, showing your buffer pool usage and allowing you to tune accordingly. innodb_buffer_pool_size ', float_val=0.7, val_unit='', hint_type=<HintType.RAM_RATIO: 1>) with confidence 0.18357956409454346
Adding hint TuningHint(doc_id=4, param=<re.Match object; span=(0, 20), match='innodb_log_file_size'>, value=<re.Match object; span=(0, 4), match='128M'>, recommendation='128M – 2G', passage='innodb_log_file_size\nThis is generally set between 128M – 2G.\nShould be large enough to hold at most an hour or so of logs.\nThis is more than enough so that MySQL can reorder writes to use sequential I/O during the flushing and checkpointing processes. innodb_log_file_size ', float_val=128.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.7541894912719727
Adding hint TuningHint(doc_id=4, param=<re.Match object; span=(0, 20), match='innodb_log_file_size'>, value=<re.Match object; span=(7, 9), match='2G'>, recommendation='128M – 2G', passage='innodb_log_file_size\nThis is generally set between 128M – 2G.\nShould be large enough to hold at most an hour or so of logs.\nThis is more than enough so that MySQL can reorder writes to use sequential I/O during the flushing and checkpointing processes. innodb_log_file_size ', float_val=2.0, val_unit='G', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.7541894912719727
Excluding recommendation "Setting to “1”" for parameter "innodb_flush_log_at_trx_commit" due to low confidence (0.015069155022501945)
Excluding recommendation "0” or “2”" for parameter "innodb_log_file_size" due to low confidence (0.03345619887113571)
Excluding recommendation "8”" for parameter "innodb_stats_on_metadata" due to low confidence (0.005280776415020227)
Excluding recommendation "8”" for parameter "innodb_change_buffer_max_size" due to low confidence (0.02586491033434868)
Adding hint TuningHint(doc_id=4, param=<re.Match object; span=(133, 161), match='innodb_buffer_pool_instances'>, value=<re.Match object; span=(0, 1), match='8'>, recommendation='8”', passage='innodb_stats_on_metadata\nSetting this to “OFF” avoids unnecessary updating of InnoDB statistics and can greatly improve read speeds.\ninnodb_buffer_pool_instances\nA best practice is to set this to “8” unless the buffer pool size is < 1G, in which case set to “1”. innodb_change_buffer_max_size ', float_val=8.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.09074638038873672
Adding hint TuningHint(doc_id=4, param=<re.Match object; span=(0, 16), match='query_cache_type'>, value=<re.Match object; span=(0, 1), match='0'>, recommendation='0', passage='query_cache_type & query_cache_size\nSetting both of these to “0” will entirely disable the query cache.\nTuning for Your Workload\nTo tune further, more information will be required. The best way to gather this information is to install a MySQL monitoring / graphing tool like Percona Monitoring and Management platform. Once you have a tool installed, we can dive into the individual metrics and start customizing based on the data. query_cache_size ', float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.10173995792865753
Excluding recommendation "how many iops your system can perform" for parameter "innodb_api_disable_rowlock" due to low confidence (0.0005347122205421329)
Excluding recommendation "2" for parameter "innodb_io_capacity_max" due to low confidence (0.00080894521670416)
Excluding recommendation "4 to 16" for parameter "innodb_write_io_threads" due to low confidence (0.00013030310219619423)
Adding hint TuningHint(doc_id=4, param=<re.Match object; span=(161, 183), match='innodb_read_io_threads'>, value=<re.Match object; span=(0, 1), match='4'>, recommendation='4 to 16', passage='Cloud storage, analytic queries, concurrent workload, parallel query enabled (Ali Cloud), 64 cores, o_direct.\ninnodb_buffer_pool_instances (change from 8 to 32)\ninnodb_read_io_threads (change from 4 to 16)\nUnder a 100% physical I/O workload this resulted in a 4x speedup. innodb_write_io_threads ', float_val=4.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.20395375788211823
Adding hint TuningHint(doc_id=4, param=<re.Match object; span=(161, 183), match='innodb_read_io_threads'>, value=<re.Match object; span=(5, 7), match='16'>, recommendation='4 to 16', passage='Cloud storage, analytic queries, concurrent workload, parallel query enabled (Ali Cloud), 64 cores, o_direct.\ninnodb_buffer_pool_instances (change from 8 to 32)\ninnodb_read_io_threads (change from 4 to 16)\nUnder a 100% physical I/O workload this resulted in a 4x speedup. innodb_write_io_threads ', float_val=16.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.20395375788211823
Adding hint TuningHint(doc_id=4, param=<re.Match object; span=(110, 138), match='innodb_buffer_pool_instances'>, value=<re.Match object; span=(0, 1), match='8'>, recommendation='8 to 32', passage='Cloud storage, analytic queries, concurrent workload, parallel query enabled (Ali Cloud), 64 cores, o_direct.\ninnodb_buffer_pool_instances (change from 8 to 32)\ninnodb_read_io_threads (change from 4 to 16)\nUnder a 100% physical I/O workload this resulted in a 4x speedup. innodb_write_io_threads ', float_val=8.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.45213356614112854
Adding hint TuningHint(doc_id=4, param=<re.Match object; span=(110, 138), match='innodb_buffer_pool_instances'>, value=<re.Match object; span=(5, 7), match='32'>, recommendation='8 to 32', passage='Cloud storage, analytic queries, concurrent workload, parallel query enabled (Ali Cloud), 64 cores, o_direct.\ninnodb_buffer_pool_instances (change from 8 to 32)\ninnodb_read_io_threads (change from 4 to 16)\nUnder a 100% physical I/O workload this resulted in a 4x speedup. innodb_write_io_threads ', float_val=32.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.45213356614112854
Excluding recommendation "64 cores" for parameter "o_direct" due to low confidence (0.0020825699903070927)
Adding hint TuningHint(doc_id=4, param=<re.Match object; span=(186, 214), match='innodb_buffer_pool_instances'>, value=<re.Match object; span=(0, 1), match='8'>, recommendation='8” check_proxy_users', passage='You mileage will vary, test before production usage.\nMost query workloads are not 100% PIO, so actual benefits likely much lower.\nCheers,\nJim\nJune 30, 2020 at 2:08 pm\nJie Zhou\nReply\nWhy innodb_buffer_pool_instances has a best practice to set it to “8” check_proxy_users ', float_val=8.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.2785789668560028
Adding hint TuningHint(doc_id=4, param=<re.Match object; span=(252, 269), match='check_proxy_users'>, value=<re.Match object; span=(0, 1), match='8'>, recommendation='8', passage='You mileage will vary, test before production usage.\nMost query workloads are not 100% PIO, so actual benefits likely much lower.\nCheers,\nJim\nJune 30, 2020 at 2:08 pm\nJie Zhou\nReply\nWhy innodb_buffer_pool_instances has a best practice to set it to “8” check_proxy_users ', float_val=8.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.4179610013961792
Adding hint TuningHint(doc_id=4, param=<re.Match object; span=(41, 69), match='innodb_buffer_pool_instances'>, value=<re.Match object; span=(0, 1), match='8'>, recommendation='8', passage="Hi Jie Zhou. The MySQL default is to set innodb_buffer_pool_instances to 8 (in MySQL version 5.7 and up) as this is a good starting point for most general use cases. As per the MySQL documentation, this option takes effect only when you set innodb_buffer_pool_size to a size of 1GB or more. The total size you specify is divided among all the buffer pools. For best efficiency, specify a combination of innodb_buffer_pool_instances and innodb_buffer_pool_size so that each buffer pool instance is at least 1GB.\nJuly 8, 2020 at 1:11 pm\nLeave a Reply\t\t\t\t\tCancel reply\nHow Can We Help?\nPercona's experts can maximize your application performance with our open source database support, managed services or consulting.\nContact us innodb_buffer_pool_size ", float_val=8.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.2710126042366028
Adding hint TuningHint(doc_id=4, param=<re.Match object; span=(241, 264), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 3), match='1GB'>, recommendation='1GB or more', passage="Hi Jie Zhou. The MySQL default is to set innodb_buffer_pool_instances to 8 (in MySQL version 5.7 and up) as this is a good starting point for most general use cases. As per the MySQL documentation, this option takes effect only when you set innodb_buffer_pool_size to a size of 1GB or more. The total size you specify is divided among all the buffer pools. For best efficiency, specify a combination of innodb_buffer_pool_instances and innodb_buffer_pool_size so that each buffer pool instance is at least 1GB.\nJuly 8, 2020 at 1:11 pm\nLeave a Reply\t\t\t\t\tCancel reply\nHow Can We Help?\nPercona's experts can maximize your application performance with our open source database support, managed services or consulting.\nContact us innodb_buffer_pool_size ", float_val=1.0, val_unit='GB', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.10542581975460052
Excluding recommendation "Top 3 Things to Consider mysql_native_password_proxy_users" for parameter "pg_stat_monitor" due to low confidence (0.0004330358933657408)
Adding hint TuningHint(doc_id=4, param=<re.Match object; span=(555, 588), match='mysql_native_password_proxy_users'>, value=<re.Match object; span=(4, 5), match='3'>, recommendation='Top 3', passage='CategoriesMySQL(3402)Insight for DBAs(1601)Percona Software(1553)Percona Events(875)MongoDB(571)Insight for Developers(493)Benchmarks(345)Percona Live(336)Webinars(301)Cloud(297)PostgreSQL(189)Monitoring(185)MariaDB(159)Percona Services(154)Security(130)ProxySQL(130)Hardware and Storage(106)Storage Engine(56)Database Trends(55)Percona Announcements(12) \xa0 Percona Blog RSS Feed\nUpcoming WebinarsOptimize and Troubleshoot MySQL using PMM\nMongoDB Backups Overview\nIntroduction to pg_stat_monitor\nMoving your Database to the Cloud: Top 3 Things to Consider mysql_native_password_proxy_users ', float_val=3.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.07708841562271118
Creating hints for document 5
Excluding recommendation "
"comment": "First comment."," for parameter "your_auth_token" due to low confidence (0.0007813043775968254)
Excluding recommendation "
"comment": "First comment."," for parameter "completion_type" due to low confidence (0.0036462845746427774)
Excluding recommendation "etag,title,comment,characteristics
Authorization" for parameter "your_auth_token" due to low confidence (0.009672763757407665)
Excluding recommendation "title,comment" for parameter "completion_type" due to low confidence (0.004450163338333368)
Creating hints for document 6
Creating hints for document 7
Excluding recommendation "IGNORE INDEX in the second line and USE INDEX FOR ORDER BY" for parameter "query_cache_wlock_invalidate" due to low confidence (0.0023493487387895584)
Excluding recommendation "
ID, CountryCode, Name, District, Population" for parameter "group_concat_max_len" due to low confidence (0.038830626755952835)
Excluding recommendation "
*************************** 1. row" for parameter "innodb_optimize_fulltext_only" due to low confidence (0.00533297611400485)
Excluding recommendation "ignore the primary key" for parameter "query_cache_wlock_invalidate" due to low confidence (0.0019191846949979663)
Excluding recommendation "CountryCode index or no index at all" for parameter "anguage_ibfk" due to low confidence (0.007022201549261808)
Excluding recommendation "USE INDEX" for parameter "innodb_write_io_threads" due to low confidence (0.0002838888904079795)
Excluding recommendation "level_zstd
Book" for parameter "binlog_transaction_compression" due to low confidence (0.03225317969918251)
Excluding recommendation "
Cloud" for parameter "log_builtin_as_identified_by_password" due to low confidence (0.005407738499343395)
Excluding recommendation "
Book
Certification" for parameter "binlog_transaction_compression_level_zstd" due to low confidence (0.002143203979358077)
Creating hints for document 8
Excluding recommendation "
key_len: NULL" for parameter "lower_case_table_names" due to low confidence (0.010328692384064198)
Excluding recommendation "
ref: NULL" for parameter "lower_case_table_names" due to low confidence (0.009845191612839699)
Adding hint TuningHint(doc_id=8, param=<re.Match object; span=(184, 201), match='auto_distinct_key'>, value=<re.Match object; span=(1, 2), match='1'>, recommendation='c1=t2.c1', passage='*************************** 1. row ***************************\nEXPLAIN: -> Nested loop antijoin\n-> Table scan on t2\n(cost=0.85 rows=6)\n-> Single-row index lookup on <subquery2> using <auto_distinct_key> (c1=t2.c1) lower_case_table_names ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.09551706910133362
Adding hint TuningHint(doc_id=8, param=<re.Match object; span=(184, 201), match='auto_distinct_key'>, value=<re.Match object; span=(4, 5), match='2'>, recommendation='c1=t2.c1', passage='*************************** 1. row ***************************\nEXPLAIN: -> Nested loop antijoin\n-> Table scan on t2\n(cost=0.85 rows=6)\n-> Single-row index lookup on <subquery2> using <auto_distinct_key> (c1=t2.c1) lower_case_table_names ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.09551706910133362
Adding hint TuningHint(doc_id=8, param=<re.Match object; span=(184, 201), match='auto_distinct_key'>, value=<re.Match object; span=(7, 8), match='1'>, recommendation='c1=t2.c1', passage='*************************** 1. row ***************************\nEXPLAIN: -> Nested loop antijoin\n-> Table scan on t2\n(cost=0.85 rows=6)\n-> Single-row index lookup on <subquery2> using <auto_distinct_key> (c1=t2.c1) lower_case_table_names ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.09551706910133362
Excluding recommendation "Single-row index lookup" for parameter "lower_case_table_names" due to low confidence (0.00203171418979764)
Excluding recommendation "hash joins" for parameter "mysql_native_password_proxy_users" due to low confidence (0.0006443740567192435)
Excluding recommendation "
hash_join=on or
hash_join=off" for parameter "optimizer_switch" due to low confidence (0.006396476179361343)
Excluding recommendation "
HASH_JOIN" for parameter "mysql_native_password_proxy_users" due to low confidence (0.017648672685027122)
Excluding recommendation "
join_buffer_size system
variable" for parameter "join_buffer_size" due to low confidence (0.0011041630059480667)
Excluding recommendation "
join_buffer_size system
variable" for parameter "key_cache_block_size" due to low confidence (1.0211592780251522e-05)
Excluding recommendation "
join_buffer_size" for parameter "open_files_limit" due to low confidence (0.0012926709605380893)
Creating hints for document 9
Creating hints for document 10
Creating hints for document 11
Excluding recommendation "
opcache.interned_strings_buffer = 8" for parameter "thread_cache_size" due to low confidence (0.026479793712496758)
Adding hint TuningHint(doc_id=11, param=<re.Match object; span=(249, 272), match='interned_strings_buffer'>, value=<re.Match object; span=(0, 1), match='8'>, recommendation='8', passage='This link can help you calculate the good values for your system.\nEnable PHP OPcache¶\nThe OPcache improves the performance of PHP applications by caching precompiled bytecode. We recommend at least the following settings:\nopcache.enable = 1\nopcache.interned_strings_buffer = 8 thread_cache_size ', float_val=8.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.0831935852766037
Adding hint TuningHint(doc_id=11, param=<re.Match object; span=(79, 92), match='save_comments'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation='1', passage='opcache.max_accelerated_files = 10000\nopcache.memory_consumption = 128\nopcache.save_comments = 1\nopcache.revalidate_freq = 1\nFor more details check out the official documentation or this blog post about some recommended settings.\nNext\nPrevious binlog_cache_size ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.5677247643470764
Adding hint TuningHint(doc_id=11, param=<re.Match object; span=(8, 29), match='max_accelerated_files'>, value=<re.Match object; span=(0, 5), match='10000'>, recommendation='10000', passage='opcache.max_accelerated_files = 10000\nopcache.memory_consumption = 128\nopcache.save_comments = 1\nopcache.revalidate_freq = 1\nFor more details check out the official documentation or this blog post about some recommended settings.\nNext\nPrevious binlog_cache_size ', float_val=10000.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.6359337568283081
Adding hint TuningHint(doc_id=11, param=<re.Match object; span=(244, 261), match='binlog_cache_size'>, value=<re.Match object; span=(32, 37), match='10000'>, recommendation='opcache.max_accelerated_files = 10000', passage='opcache.max_accelerated_files = 10000\nopcache.memory_consumption = 128\nopcache.save_comments = 1\nopcache.revalidate_freq = 1\nFor more details check out the official documentation or this blog post about some recommended settings.\nNext\nPrevious binlog_cache_size ', float_val=10000.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.07834012806415558
Adding hint TuningHint(doc_id=11, param=<re.Match object; span=(46, 64), match='memory_consumption'>, value=<re.Match object; span=(0, 3), match='128'>, recommendation='128', passage='opcache.max_accelerated_files = 10000\nopcache.memory_consumption = 128\nopcache.save_comments = 1\nopcache.revalidate_freq = 1\nFor more details check out the official documentation or this blog post about some recommended settings.\nNext\nPrevious binlog_cache_size ', float_val=128.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.37412506341934204
Adding hint TuningHint(doc_id=11, param=<re.Match object; span=(105, 120), match='revalidate_freq'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation='1', passage='opcache.max_accelerated_files = 10000\nopcache.memory_consumption = 128\nopcache.save_comments = 1\nopcache.revalidate_freq = 1\nFor more details check out the official documentation or this blog post about some recommended settings.\nNext\nPrevious binlog_cache_size ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.5681216716766357
Creating hints for document 12
Excluding recommendation "clearing properly" for parameter "cache_form" due to low confidence (0.0005161900189705193)
Excluding recommendation "No indentation" for parameter "table_open_cache_instances" due to low confidence (0.004226783290505409)
Excluding recommendation "mod_deflate" for parameter "mod_gzip" due to low confidence (0.004098157398402691)
Adding hint TuningHint(doc_id=12, param=<re.Match object; span=(175, 183), match='shm_size'>, value=<re.Match object; span=(0, 2), match='64'>, recommendation='64', passage='KeepAlive on, and KeepAliveTimeout very low (1 or 2 sec)\nDisable or comment access.log settings\nEnable mod_deflate or mod_gzip\nInstall APC server with higher memory limit apc.shm_size = 64\nAlso we can check this options :\n1) Turn Page Caching On table_open_cache_instances ', float_val=64.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.1537097692489624
Excluding recommendation "mod_gzip" for parameter "mod_deflate" due to low confidence (0.011206687428057194)
Excluding recommendation "
1) Turn Page Caching" for parameter "table_open_cache_instances" due to low confidence (0.00027879257686436176)
Creating hints for document 13
Excluding recommendation "vm.kmem_size_max >= vm.kmem_size" for parameter "kmem_size" due to low confidence (0.0006046405760571361)
Excluding recommendation "vm.kmem_size_max >= vm.kmem_size" for parameter "kmem_size_max" due to low confidence (0.0017541280249133706)
Excluding recommendation " KVA_PAGES=512" for parameter "range_alloc_block_size" due to low confidence (0.00037838134448975325)
Excluding recommendation "vm.kmem_size_max to 512M" for parameter "kmem_size" due to low confidence (0.0015861558495089412)
Excluding recommendation " 512M" for parameter "kmem_size_max" due to low confidence (0.0008894943166524172)
Excluding recommendation "vfs.zfs.arc_max" for parameter "arc_max" due to low confidence (0.00048510791384615004)
Excluding recommendation "half its default size of 10 Megs" for parameter "host_cache_size" due to low confidence (0.0003485542838461697)
Excluding recommendation "330M"" for parameter "kmem_size" due to low confidence (0.0003239222278352827)
Excluding recommendation "330M" for parameter "kmem_size_max" due to low confidence (0.0009311425383202732)
Excluding recommendation "arc_max and VDEV cache size" for parameter "max_binlog_stmt_cache_size" due to low confidence (0.0001406067021889612)
Excluding recommendation "arc_max" for parameter "kmem_size" due to low confidence (0.02983037941157818)
Excluding recommendation "kmem_size and arc_max" for parameter "kmem_size_max" due to low confidence (0.0004251704958733171)
Excluding recommendation "2GB of RAM" for parameter "max_binlog_stmt_cache_size" due to low confidence (4.218990579829551e-05)
Excluding recommendation "kmem_size and arc_max are tuned manually" for parameter "arc_max" due to low confidence (2.9205260943854228e-05)
Excluding recommendation "1" for parameter "arc_noprefetch" due to low confidence (0.0454239584505558)
Excluding recommendation "1" for parameter "lower_case_table_names" due to low confidence (0.004511888604611158)
Excluding recommendation "8Mbytes" for parameter "arc_write_boost" due to low confidence (0.0017421855591237545)
Excluding recommendation "8Mbytes" for parameter "binlog_stmt_cache_size" due to low confidence (0.0011601985897868872)
Excluding recommendation "vfs.zfs" for parameter "arc_write_max" due to low confidence (0.012157362885773182)
Excluding recommendation "vfs.zfs.prefetch_disable="1"" for parameter "max_binlog_stmt_cache_size" due to low confidence (0.0072649638168513775)
Adding hint TuningHint(doc_id=13, param=<re.Match object; span=(8, 24), match='prefetch_disable'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation='1', passage='vfs.zfs.prefetch_disable="1"\n# Decrease ZFS txg timeout value from 30 (default) to 5 seconds.\nThis\n# should increase throughput and decrease the "bursty" stalls that\n# happen during immense I/O with ZFS. max_binlog_stmt_cache_size ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.05623491108417511
Excluding recommendation "1073741824" for parameter "read_rnd_buffer_size" due to low confidence (0.0015167740639299154)
Excluding recommendation "1073741824 read_rnd_buffer_size" for parameter "write_limit_override" due to low confidence (0.03979729488492012)
Excluding recommendation "" for parameter "innodb_api_disable_rowlock" due to low confidence (3.4002630400209455e-07)
Excluding recommendation "vfs.zfs.zil_disable="1" for parameter "zil_disable" due to low confidence (0.0011984969023615122)
Adding hint TuningHint(doc_id=13, param=<re.Match object; span=(42, 72), match='innodb_flush_log_at_trx_commit'>, value=<re.Match object; span=(1, 2), match='2'>, recommendation='=2', passage='This assumes lots of RAM Tweaks for MySQL innodb_flush_log_at_trx_commit=2 skip-innodb_doublewrite Tweaks for ZFS zfs set primarycache=metadata tank/db zfs set atime=off tank/db zfs set recordsize=16k tank/db/innodb zfs set recordsize=128k tank/db/logs zfs set zfs:zfs_nocacheflush = 1 zfs set sync=disabled tank/db Note: MySQL 5.6.6 and newer (and related MariaDB / Percona forks)\nhas innodb_file_per_table\xa0=\xa0on as default, so IBD files are not created under tank/db/innodb (defined by innodb_data_home_dir in your my.cnf), they are created under tank/db/<db_name>/ and you should use recordsize=16k on this dataset too or switch back to innodb_file_per_table\xa0=\xa0off References MySQL Innodb ZFS Best Practices (Oracle) log_slow_admin_statements ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.49517425894737244
Excluding recommendation "RAM" for parameter "innodb_doublewrite" due to low confidence (8.212680404540151e-05)
Excluding recommendation "MySQL Innodb ZFS Best Practices" for parameter "log_slow_admin_statements" due to low confidence (0.00029659393476322293)
Adding hint TuningHint(doc_id=13, param=<re.Match object; span=(265, 281), match='zfs_nocacheflush'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation='1', passage='This assumes lots of RAM Tweaks for MySQL innodb_flush_log_at_trx_commit=2 skip-innodb_doublewrite Tweaks for ZFS zfs set primarycache=metadata tank/db zfs set atime=off tank/db zfs set recordsize=16k tank/db/innodb zfs set recordsize=128k tank/db/logs zfs set zfs:zfs_nocacheflush = 1 zfs set sync=disabled tank/db Note: MySQL 5.6.6 and newer (and related MariaDB / Percona forks)\nhas innodb_file_per_table\xa0=\xa0on as default, so IBD files are not created under tank/db/innodb (defined by innodb_data_home_dir in your my.cnf), they are created under tank/db/<db_name>/ and you should use recordsize=16k on this dataset too or switch back to innodb_file_per_table\xa0=\xa0off References MySQL Innodb ZFS Best Practices (Oracle) log_slow_admin_statements ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.7827784419059753
Excluding recommendation " = off" for parameter "innodb_file_per_table" due to low confidence (0.04331861808896065)
Excluding recommendation "recordsize=16k" for parameter "innodb_data_home_dir" due to low confidence (0.00023053219774737954)
Excluding recommendation "recordsize=16k" for parameter "db_name" due to low confidence (3.527253966240096e-06)
Excluding recommendation "5000
vfs.zfs.resilver_delay=0" for parameter "resilver_min_time_ms" due to low confidence (0.003314044326543808)
Excluding recommendation "resilver_min_time_ms=5000" for parameter "max_binlog_stmt_cache_size" due to low confidence (0.00034328183392062783)
Excluding recommendation "vfs.zfs.resilver_delay=0" for parameter "resilver_delay" due to low confidence (0.00018778780940920115)
Creating hints for document 14
Creating hints for document 15
Adding hint TuningHint(doc_id=15, param=<re.Match object; span=(42, 70), match='innodb_buffer_pool_instances'>, value=<re.Match object; span=(0, 1), match='8'>, recommendation='8', passage='query_cache_size = 0\nquery_cache_type = 0\ninnodb_buffer_pool_instances = 8 (or 1 if innodb_buffer_pool_size < 1GB)\ninnodb_file_per_table=ON\ninnodb_stats_on_metadata = OFF innodb_disable_sort_file_cache ', float_val=8.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.6289706826210022
Excluding recommendation "query_cache_size = 0" for parameter "innodb_disable_sort_file_cache" due to low confidence (0.0004187687300145626)
Excluding recommendation "OFF" for parameter "innodb_stats_on_metadata" due to low confidence (0.040182922035455704)
Adding hint TuningHint(doc_id=15, param=<re.Match object; span=(0, 16), match='query_cache_size'>, value=<re.Match object; span=(0, 1), match='0'>, recommendation='0', passage='query_cache_size = 0\nquery_cache_type = 0\ninnodb_buffer_pool_instances = 8 (or 1 if innodb_buffer_pool_size < 1GB)\ninnodb_file_per_table=ON\ninnodb_stats_on_metadata = OFF innodb_disable_sort_file_cache ', float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.11108578741550446
Adding hint TuningHint(doc_id=15, param=<re.Match object; span=(84, 107), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 1), match='8'>, recommendation='8', passage='query_cache_size = 0\nquery_cache_type = 0\ninnodb_buffer_pool_instances = 8 (or 1 if innodb_buffer_pool_size < 1GB)\ninnodb_file_per_table=ON\ninnodb_stats_on_metadata = OFF innodb_disable_sort_file_cache ', float_val=8.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.1330295205116272
Adding hint TuningHint(doc_id=15, param=<re.Match object; span=(21, 37), match='query_cache_type'>, value=<re.Match object; span=(0, 1), match='0'>, recommendation='0', passage='query_cache_size = 0\nquery_cache_type = 0\ninnodb_buffer_pool_instances = 8 (or 1 if innodb_buffer_pool_size < 1GB)\ninnodb_file_per_table=ON\ninnodb_stats_on_metadata = OFF innodb_disable_sort_file_cache ', float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.316328763961792
Excluding recommendation "RAM: 8GB" for parameter "innodb_change_buffer_max_size" due to low confidence (0.02775423973798752)
Excluding recommendation "RAM: 4GB" for parameter "innodb_log_file_size" due to low confidence (0.0047877696342766285)
Excluding recommendation "RAM: 4GB" for parameter "innodb_buffer_pool_size" due to low confidence (0.026077229529619217)
Excluding recommendation "dedicated MySql servers" for parameter "binlog_stmt_cache_size" due to low confidence (0.004795190878212452)
Adding hint TuningHint(doc_id=15, param=<re.Match object; span=(39, 59), match='innodb_log_file_size'>, value=<re.Match object; span=(0, 3), match='1GB'>, recommendation='1GB', passage='RAM 16GB\ninnodb_buffer_pool_size = 10G\ninnodb_log_file_size = 1GB\nThe values above are examples for dedicated MySql servers (no other services are running on the server). binlog_stmt_cache_size ', float_val=1.0, val_unit='GB', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.09960930794477463
Excluding recommendation "10G" for parameter "innodb_buffer_pool_size" due to low confidence (0.03638514503836632)
Adding hint TuningHint(doc_id=15, param=<re.Match object; span=(118, 134), match='query_cache_size'>, value=<re.Match object; span=(0, 1), match='0'>, recommendation='0 binlog_stmt_cache_size', passage='CentOS: /etc/my.cnf\nUbuntu Linux: /etc/mysql/mysql.conf.d/mysqld.cnf\nAn example:\n[mysqld]\n# some other variables here\nquery_cache_size = 0 binlog_stmt_cache_size ', float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.19700360298156738
Excluding recommendation "0" for parameter "binlog_stmt_cache_size" due to low confidence (0.022009272128343582)
Adding hint TuningHint(doc_id=15, param=<re.Match object; span=(21, 49), match='innodb_buffer_pool_instances'>, value=<re.Match object; span=(0, 1), match='8'>, recommendation='8', passage='query_cache_type = 0\ninnodb_buffer_pool_instances = 8\ninnodb_buffer_pool_size = 5G\ninnodb_file_per_table = ON\ninnodb_log_file_size = 512M\ninnodb_stats_on_metadata = OFF innodb_disable_sort_file_cache ', float_val=8.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.33130624890327454
Excluding recommendation "query_cache_type = 0" for parameter "innodb_disable_sort_file_cache" due to low confidence (0.0007324256584979594)
Adding hint TuningHint(doc_id=15, param=<re.Match object; span=(110, 130), match='innodb_log_file_size'>, value=<re.Match object; span=(0, 4), match='512M'>, recommendation='512M', passage='query_cache_type = 0\ninnodb_buffer_pool_instances = 8\ninnodb_buffer_pool_size = 5G\ninnodb_file_per_table = ON\ninnodb_log_file_size = 512M\ninnodb_stats_on_metadata = OFF innodb_disable_sort_file_cache ', float_val=512.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.5473569631576538
Adding hint TuningHint(doc_id=15, param=<re.Match object; span=(54, 77), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 2), match='5G'>, recommendation='5G', passage='query_cache_type = 0\ninnodb_buffer_pool_instances = 8\ninnodb_buffer_pool_size = 5G\ninnodb_file_per_table = ON\ninnodb_log_file_size = 512M\ninnodb_stats_on_metadata = OFF innodb_disable_sort_file_cache ', float_val=5.0, val_unit='G', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.7573971748352051
Adding hint TuningHint(doc_id=15, param=<re.Match object; span=(0, 16), match='query_cache_type'>, value=<re.Match object; span=(0, 1), match='0'>, recommendation='0', passage='query_cache_type = 0\ninnodb_buffer_pool_instances = 8\ninnodb_buffer_pool_size = 5G\ninnodb_file_per_table = ON\ninnodb_log_file_size = 512M\ninnodb_stats_on_metadata = OFF innodb_disable_sort_file_cache ', float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.09417854249477386
Creating hints for document 16
Excluding recommendation "^���=gW�U�ˈ&X" for parameter "innodb_purge_rseg_truncate_frequency" due to low confidence (0.003216354176402092)
Excluding recommendation "aI
$1�" for parameter "innodb_flushing_avg_loops" due to low confidence (0.0010433952556923032)
Excluding recommendation "
\9���" for parameter "innodb_max_dirty_pages_pct_lwm" due to low confidence (0.0004614675126504153)
Excluding recommendation "۱6Ģ/Dj��:�" for parameter "innodb_max_dirty_pages_pct_lwm" due to low confidence (0.0015402811113744974)
Excluding recommendation "ua��������;�" for parameter "old_passwords" due to low confidence (0.00013623511767946184)
Excluding recommendation "���zo�N�P�f<��" for parameter "innodb_flushing_avg_loops" due to low confidence (0.0008415271295234561)
Excluding recommendation "BǪ�`u��" for parameter "innodb_flushing_avg_loops" due to low confidence (0.0009672356536611915)
Excluding recommendation "
g���" for parameter "ft_min_word_len" due to low confidence (0.0004992870963178575)
Excluding recommendation "����_H�b����j�Gl;��" for parameter "innodb_flushing_avg_loops" due to low confidence (0.0007142707472667098)
Excluding recommendation "5j" for parameter "w_a" due to low confidence (0.0015591540141031146)
Excluding recommendation "�`" for parameter "innodb_flushing_avg_loops" due to low confidence (0.00035797356395050883)
Excluding recommendation "d��炧" for parameter "innodb_flushing_avg_loops" due to low confidence (0.004194235894829035)
Excluding recommendation "9" for parameter "innodb_ft_sort_pll_degree" due to low confidence (0.001802604179829359)
Excluding recommendation "��{��" for parameter "innodb_flushing_avg_loops" due to low confidence (0.0002889351162593812)
Excluding recommendation "74i�l��f]J" for parameter "innodb_flushing_avg_loops" due to low confidence (0.00040609188727103174)
Excluding recommendation "Er�$�g�6L��8�jl�+" for parameter "innodb_max_dirty_pages_pct_lwm" due to low confidence (0.0015449551865458488)
Excluding recommendation "
" for parameter "innodb_flushing_avg_loops" due to low confidence (0.0003645269316621125)
Excluding recommendation "2g؈�" for parameter "innodb_max_dirty_pages_pct_lwm" due to low confidence (0.0006806370802223682)
Excluding recommendation "}����H�x%�" for parameter "innodb_flushing_avg_loops" due to low confidence (0.00042212026892229915)
Excluding recommendation "
km��5����X���0�/b�&" for parameter "innodb_max_dirty_pages_pct_lwm" due to low confidence (0.0011179732391610742)
Excluding recommendation "�����\��PF" for parameter "innodb_purge_rseg_truncate_frequency" due to low confidence (0.00040997436735779047)
Excluding recommendation "ݤ" for parameter "innodb_flushing_avg_loops" due to low confidence (0.0018302202224731445)
Excluding recommendation ")���+7Ɍ�禒U�v���܉�" for parameter "innodb_flushing_avg_loops" due to low confidence (0.0009212784352712333)
Excluding recommendation "`~����^��H" for parameter "innodb_flushing_avg_loops" due to low confidence (0.0014072181656956673)
Excluding recommendation "�^^�B��K��!rA%`��y$�" for parameter "innodb_flushing_avg_loops" due to low confidence (0.00037614512257277966)
Creating hints for document 17
Creating hints for document 18
Excluding recommendation "* PK_Employees" for parameter "lower_case_table_names" due to low confidence (0.0006486342172138393)
Excluding recommendation " Count(1)" for parameter "innodb_ft_num_word_optimize" due to low confidence (0.004151316825300455)
Excluding recommendation " e.Emp_IId > 5  " for parameter "log_slow_admin_statements" due to low confidence (0.0002050529874395579)
Excluding recommendation "NULL and Zero" for parameter "slow_query_log" due to low confidence (3.996656960225664e-05)
Excluding recommendation "1,'Value1'),(" for parameter "query_prealloc_size" due to low confidence (0.0005218468140810728)
Creating hints for document 19
Adding hint TuningHint(doc_id=19, param=<re.Match object; span=(979, 996), match='min_spare_servers'>, value=<re.Match object; span=(0, 1), match='6'>, recommendation='6', passage='How to enable HTTP2 HTTP2 is the latest HTTP protocol and allows web browsers to send multiple, simultaneous requests to a server. HTTP2 is well supported by Apache, so it\'s not at all challenging to enable. This is another issue I\'ve tackled before, so you can easily enable HTTP2 on Apache by following the tutorial, "How to enable HTTP/2 Protocol on Ubuntu 16.04." How to optimize PHP-FPM The default PHP-FPM installation on your server might be the cause of excessive load times for Nextcloud--each request for an element is handled by a separate PHP-FPM process. By allowing numerous PHP-FPM processes to run, you should gain a considerable increase in performance. Here\'s what you need to do. Open the necessary configuration file for editing with the command: sudo nano /etc/php/7.X/fpm/pool.d/www.conf\nWhere X is your current installed version of PHP. In that file, you\'ll need to look for the following lines: pm = dynamic\npm.max_children = 120\npm.start_servers = 12\npm.min_spare_servers = 6 table_open_cache_instances ', float_val=6.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.2023121416568756
Adding hint TuningHint(doc_id=19, param=<re.Match object; span=(957, 970), match='start_servers'>, value=<re.Match object; span=(0, 2), match='12'>, recommendation='12', passage='How to enable HTTP2 HTTP2 is the latest HTTP protocol and allows web browsers to send multiple, simultaneous requests to a server. HTTP2 is well supported by Apache, so it\'s not at all challenging to enable. This is another issue I\'ve tackled before, so you can easily enable HTTP2 on Apache by following the tutorial, "How to enable HTTP/2 Protocol on Ubuntu 16.04." How to optimize PHP-FPM The default PHP-FPM installation on your server might be the cause of excessive load times for Nextcloud--each request for an element is handled by a separate PHP-FPM process. By allowing numerous PHP-FPM processes to run, you should gain a considerable increase in performance. Here\'s what you need to do. Open the necessary configuration file for editing with the command: sudo nano /etc/php/7.X/fpm/pool.d/www.conf\nWhere X is your current installed version of PHP. In that file, you\'ll need to look for the following lines: pm = dynamic\npm.max_children = 120\npm.start_servers = 12\npm.min_spare_servers = 6 table_open_cache_instances ', float_val=12.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.2334117740392685
Excluding recommendation "
pm.min_spare_servers = 6" for parameter "table_open_cache_instances" due to low confidence (0.0017674461705610156)
Adding hint TuningHint(doc_id=19, param=<re.Match object; span=(935, 947), match='max_children'>, value=<re.Match object; span=(0, 3), match='120'>, recommendation='120', passage='How to enable HTTP2 HTTP2 is the latest HTTP protocol and allows web browsers to send multiple, simultaneous requests to a server. HTTP2 is well supported by Apache, so it\'s not at all challenging to enable. This is another issue I\'ve tackled before, so you can easily enable HTTP2 on Apache by following the tutorial, "How to enable HTTP/2 Protocol on Ubuntu 16.04." How to optimize PHP-FPM The default PHP-FPM installation on your server might be the cause of excessive load times for Nextcloud--each request for an element is handled by a separate PHP-FPM process. By allowing numerous PHP-FPM processes to run, you should gain a considerable increase in performance. Here\'s what you need to do. Open the necessary configuration file for editing with the command: sudo nano /etc/php/7.X/fpm/pool.d/www.conf\nWhere X is your current installed version of PHP. In that file, you\'ll need to look for the following lines: pm = dynamic\npm.max_children = 120\npm.start_servers = 12\npm.min_spare_servers = 6 table_open_cache_instances ', float_val=120.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.5710219740867615
Excluding recommendation "4GB of RAM and a 1GB  MySQL cache" for parameter "host_cache_size" due to low confidence (0.002058467362076044)
Adding hint TuningHint(doc_id=19, param=<re.Match object; span=(3, 20), match='max_spare_servers'>, value=<re.Match object; span=(0, 2), match='18'>, recommendation='18', passage='pm.max_spare_servers = 18\nThe above configuration changes will work for a server that has 4GB of RAM and a 1GB\xa0 MySQL cache. Edit the above options and save and close the file. Restart apache with the command: sudo systemctl restart apache2 host_cache_size ', float_val=18.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.21244674921035767
Creating hints for document 20
Excluding recommendation "idx_a, idx_b, idx_c" for parameter "idx_b" due to low confidence (0.03321898356080055)
Adding hint TuningHint(doc_id=20, param=<re.Match object; span=(12690, 12713), match='tidb_enable_index_merge'>, value=<re.Match object; span=(31, 33), match='10'>, recommendation='If the result set is less than 10,000 rows', passage="Optimizer HintsTiDB supports optimizer hints, which are based on the comment-like syntax introduced in MySQL 5.7. For example, one of the common syntaxes is /*+ HINT_NAME([t1_name [, t2_name] ...]) */. Use of optimizer hints is recommended in cases where the TiDB optimizer selects a less optimal query plan.Note:MySQL command-line clients earlier than 5.7.7 strip optimizer hints by default. If you want to use the Hint syntax in these earlier versions, add the --comments option when starting the client. For example: mysql -h 127.0.0.1 -P 4000 -uroot --comments.SyntaxOptimizer hints are case insensitive and specified within /*+ ... */ comments following the SELECT, UPDATE or DELETE keyword in a SQL statement. Optimizer hints are not currently supported for INSERT statements. Multiple hints can be specified by separating with commas. For example, the following query uses three different hints:CopySELECT /*+ USE_INDEX(t1, idx1), HASH_AGG(), HASH_JOIN(t1) */ count(*) FROM t t1, t t2 WHERE t1.a = t2.b;How optimizer hints affect query execution plans can be observed in the output of EXPLAIN and EXPLAIN ANALYZE.An incorrect or incomplete hint will not result in a statement error. This is because hints are intended to have only a hint (suggestion) semantic to query execution. Similarly, TiDB will at most return a warning if a hint is not applicable.Note:If the comments do not follow behind the specified keywords, they will be treated as common MySQL comments. The comments do not take effect, and no warning is reported.Currently, TiDB supports two categories of hints, which are different in scope. The first category of hints takes effect in the scope of query blocks, such as /*+ HASH_AGG() */; the second category of hints takes effect in the whole query, such as /*+ MEMORY_QUOTA(1024MB)*/.Each query or sub-query in a statement corresponds to a different query block, and each query block has its own name. For example:CopySELECT * FROM (SELECT * FROM t) t1, (SELECT * FROM t) t2;The above query statement has three query blocks: the outermost SELECT corresponds to the first query block, whose name is sel_1; the two SELECT sub-queries correspond to the second and the third query block, whose names are sel_2 and sel_3, respectively. The sequence of the numbers is based on the appearance of SELECT from left to right. If you replace the first SELECT with DELETE or UPDATE, then the corresponding query block names are del_1 or upd_1.Hints that take effect in query blocksThis category of hints can follow behind any SELECT, UPDATE or DELETE keywords. To control the effective scope of the hint, use the name of the query block in the hint. You can make the hint parameters clear by accurately identifying each table in the query (in case of duplicated table names or aliases). If no query block is specified in the hint, the hint takes effect in the current block by default.For example:CopySELECT /*+ HASH_JOIN(@sel_1 t1@sel_1, t3) */ * FROM (SELECT t1.a, t1.b FROM t t1, t t2 WHERE t1.a = t2.a) t1, t t3 WHERE t1.b = t3.b;This hint takes effect in the sel_1 query block, and its parameters are the t1 and t3 tables in sel_1 (sel_2 also contains a t1 table).As described above, you can specify the name of the query block in the hint in the following ways:Set the query block name as the first parameter of the hint, and separate it from other parameters with a space. In addition to QB_NAME, all the hints listed in this section also have another optional hidden parameter @QB_NAME. By using this parameter, you can specify the effective scope of this hint.Append @QB_NAME to a table name in the parameter to explicitly specify which query block this table belongs to.Note:You must put the hint in or before the query block where the hint takes effect. If the hint is put after the query block, it cannot take effect.QB_NAMEIf the query statement is a complicated statement that includes multiple nested queries, the ID and name of a certain query block might be mistakenly identified. The hint QB_NAME can help us in this regard.QB_NAME means Query Block Name. You can specify a new name to a query block. The specified QB_NAME and the previous default name are both valid. For example:CopySELECT /*+ QB_NAME(QB1) */ * FROM (SELECT * FROM t) t1, (SELECT * FROM t) t2;This hint specifies the outer SELECT query block's name to QB1, which makes QB1 and the default name sel_1 both valid for the query block.Note:In the above example, if the hint specifies the QB_NAME to sel_2 and does not specify a new QB_NAME for the original second SELECT query block, then sel_2 becomes an invalid name for the second SELECT query block.MERGE_JOIN(t1_name [, tl_name ...])The MERGE_JOIN(t1_name [, tl_name ...]) hint tells the optimizer to use the sort-merge join algorithm for the given table(s). Generally, this algorithm consumes less memory but takes longer processing time. If there is a very large data volume or insufficient system memory, it is recommended to use this hint. For example:Copyselect /*+ MERGE_JOIN(t1, t2) */ * from t1，t2 where t1.id = t2.id;Note:TIDB_SMJ is the alias for MERGE_JOIN in TiDB 3.0.x and earlier versions. If you are using any of these versions, you must apply the TIDB_SMJ(t1_name [, tl_name ...]) syntax for the hint. For the later versions of TiDB, TIDB_SMJ and MERGE_JOIN are both valid names for the hint, but MERGE_JOIN is recommended.INL_JOIN(t1_name [, tl_name ...])The INL_JOIN(t1_name [, tl_name ...]) hint tells the optimizer to use the index nested loop join algorithm for the given table(s). This algorithm might consume less system resources and take shorter processing time in some scenarios and might produce an opposite result in other scenarios. If the result set is less than 10,000 rows after the outer table is filtered by the WHERE condition, it is recommended to use this hint. For example:Copyselect /*+ INL_JOIN(t1, t2) */ * from t1，t2 where t1.id = t2.id;The parameter(s) given in INL_JOIN() is the candidate table for the inner table when you create the query plan. For example, INL_JOIN(t1) means that TiDB only considers using t1 as the inner table to create a query plan. If the candidate table has an alias, you must use the alias as the parameter in INL_JOIN(); if it does not has an alias, use the table's original name as the parameter. For example, in the select /*+ INL_JOIN(t1) */ * from t t1, t t2 where t1.a = t2.b; query, you must use the t table's alias t1 or t2 rather than t as INL_JOIN()'s parameter.Note:TIDB_INLJ is the alias for INL_JOIN in TiDB 3.0.x and earlier versions. If you are using any of these versions, you must apply the TIDB_INLJ(t1_name [, tl_name ...]) syntax for the hint. For the later versions of TiDB, TIDB_INLJ and INL_JOIN are both valid names for the hint, but INL_JOIN is recommended.INL_HASH_JOINThe INL_HASH_JOIN(t1_name [, tl_name]) hint tells the optimizer to use the index nested loop hash join algorithm. The conditions for using this algorithm are the same with the conditions for using the index nested loop join algorithm. The difference between the two algorithms is that INL_JOIN creates a hash table on the joined inner table, but INL_HASH_JOIN creates a hash table on the joined outer table. INL_HASH_JOIN has a fixed limit on memory usage, while the memory used by INL_JOIN depends on the number of rows matched in the inner table.HASH_JOIN(t1_name [, tl_name ...])The HASH_JOIN(t1_name [, tl_name ...]) hint tells the optimizer to use the hash join algorithm for the given table(s). This algorithm allows the query to be executed concurrently with multiple threads, which achieves a higher processing speed but consumes more memory. For example:Copyselect /*+ HASH_JOIN(t1, t2) */ * from t1，t2 where t1.id = t2.id;Note:TIDB_HJ is the alias for HASH_JOIN in TiDB 3.0.x and earlier versions. If you are using any of these versions, you must apply the TIDB_HJ(t1_name [, tl_name ...]) syntax for the hint. For the later versions of TiDB, TIDB_HJ and HASH_JOIN are both valid names for the hint, but HASH_JOIN is recommended.HASH_AGG()The HASH_AGG() hint tells the optimizer to use the hash aggregation algorithm in all the aggregate functions in the specified query block. This algorithm allows the query to be executed concurrently with multiple threads, which achieves a higher processing speed but consumes more memory. For example:Copyselect /*+ HASH_AGG() */ count(*) from t1，t2 where t1.a > 10 group by t1.id;STREAM_AGG()The STREAM_AGG() hint tells the optimizer to use the stream aggregation algorithm in all the aggregate functions in the specified query block. Generally, this algorithm consumes less memory but takes longer processing time. If there is a very large data volume or insufficient system memory, it is recommended to use this hint. For example:Copyselect /*+ STREAM_AGG() */ count(*) from t1，t2 where t1.a > 10 group by t1.id;USE_INDEX(t1_name, idx1_name [, idx2_name ...])The USE_INDEX(t1_name, idx1_name [, idx2_name ...]) hint tells the optimizer to use only the given index(es) for a specified t1_name table. For example, applying the following hint has the same effect as executing the select * from t t1 use index(idx1, idx2); statement.CopySELECT /*+ USE_INDEX(t1, idx1, idx2) */ * FROM t1;Note:If you specify only the table name but not index name in this hint, the execution does not consider any index but scan the entire table.IGNORE_INDEX(t1_name, idx1_name [, idx2_name ...])The IGNORE_INDEX(t1_name, idx1_name [, idx2_name ...]) hint tells the optimizer to ignore the given index(es) for a specified t1_name table. For example, applying the following hint has the same effect as executing the select * from t t1 ignore index(idx1, idx2); statement.Copyselect /*+ IGNORE_INDEX(t1, idx1, idx2) */ * from t t1;AGG_TO_COP()The AGG_TO_COP() hint tells the optimizer to push down the aggregate operation in the specified query block to the coprocessor. If the optimizer does not push down some aggregate function that is suitable for pushdown, then it is recommended to use this hint. For example:Copyselect /*+ AGG_TO_COP() */ sum(t1.a) from t t1;READ_FROM_STORAGE(TIFLASH[t1_name [, tl_name ...]], TIKV[t2_name [, tl_name ...]])The READ_FROM_STORAGE(TIFLASH[t1_name [, tl_name ...]], TIKV[t2_name [, tl_name ...]]) hint tells the optimizer to read specific table(s) from specific storage engine(s). Currently, this hint supports two storage engine parameters - TIKV and TIFLASH. For example:Copyselect /*+ READ_FROM_STORAGE(TIFLASH[t1], TIKV[t2]) */ t1.a from t t1, t t2 where t1.a = t2.a;Note:If you want the optimizer to use a table from another schema, you need to explicitly specify the schema name. For example:CopySELECT /*+ READ_FROM_STORAGE(TIFLASH[test1.t1,test2.t2]) */ t1.a FROM test1.t t1, test2.t t2 WHERE t1.a = t2.a;USE_INDEX_MERGE(t1_name, idx1_name [, idx2_name ...])The USE_INDEX_MERGE(t1_name, idx1_name [, idx2_name ...]) hint tells the optimizer to access a specific table with the index merge method. The given list of indexes are optional parameters. If you explicitly specify the list, TiDB selects indexes from the list to build index merge; if you do not give the list of indexes, TiDB selects indexes from all available indexes to build index merge. For example:CopySELECT /*+ USE_INDEX_MERGE(t1, idx_a, idx_b, idx_c) */ * FROM t1 WHERE t1.a > 10 OR t1.b > 10;When multiple USE_INDEX_MERGE hints are made to the same table, the optimizer tries to select the index from the union of the index sets specified by these hints.Note:The parameters of USE_INDEX_MERGE refer to index names, rather than column names. The index name of the primary key is primary.This hint takes effect on strict conditions, including:If the query can select a single index scan in addition to full table scan, the optimizer does not select index merge.If the query is in an explicit transaction, and if the statements before this query has already written data, the optimizer does not select index merge.Hints that take effect in the whole queryThis category of hints can only follow behind the first SELECT, UPDATE or DELETE keyword, which is equivalent to modifying the value of the specified system variable when this query is executed. The priority of the hint is higher than that of existing system variables.Note:This category of hints also has an optional hidden variable @QB_NAME, but the hint takes effect in the whole query even if you specify the variable.NO_INDEX_MERGE()The NO_INDEX_MERGE() hint disables the index merge feature of the optimizer.For example, the following query will not use index merge:Copyselect /*+ NO_INDEX_MERGE() */ * from t where t.a > 0 or t.b > 0;In addition to this hint, setting the tidb_enable_index_merge system variable also controls whether to enable this feature.Note:NO_INDEX_MERGE has a higher priority over USE_INDEX_MERGE. When both hints are used, USE_INDEX_MERGE does not take effect.USE_TOJA(boolean_value)The boolean_value parameter can be TRUE or FALSE. The USE_TOJA(TRUE) hint enables the optimizer to convert an in condition (containing a sub-query) to join and aggregation operations. Comparatively, the USE_TOJA(FALSE) hint disables this feature.For example, the following query will convert in (select t2.a from t2) subq to corresponding join and aggregation operations:Copyselect /*+ USE_TOJA(TRUE) */ t1.a, t1.b from t1 where t1.a in (select t2.a from t2) subq;In addition to this hint, setting the tidb_opt_insubq_to_join_and_agg system variable also controls whether to enable this feature.MAX_EXECUTION_TIME(N)The MAX_EXECUTION_TIME(N) hint places a limit N (a timeout value in milliseconds) on how long a statement is permitted to execute before the server terminates it. In the following hint, MAX_EXECUTION_TIME(1000) means that the timeout is 1000 milliseconds (that is, 1 second):Copyselect /*+ MAX_EXECUTION_TIME(1000) */ * from t1 inner join t2 where t1.id = t2.id;In addition to this hint, the global.max_execution_time system variable can also limit the execution time of a statement.MEMORY_QUOTA(N)The MEMORY_QUOTA(N) hint places a limit N (a threshold value in MB or GB) on how much memory a statement is permitted to use. When a statement's memory usage exceeds this limit, TiDB produces a log message based on the statement's over-limit behavior or just terminates it.In the following hint, MEMORY_QUOTA(1024MB) means that the memory usage is limited to 1024MB:Copyselect /*+ MEMORY_QUOTA(1024MB) */ * from t;In addition to this hint, the tidb_mem_quota_query system variable can also limit the memory usage of a statement.READ_CONSISTENT_REPLICA()The READ_CONSISTENT_REPLICA() hint enables the feature of reading consistent data from the TiKV follower node. For example:Copyselect /*+ READ_CONSISTENT_REPLICA() */ * from t;In addition to this hint, setting the tidb_replica_read environment variable to 'follower' or 'leader' also controls whether to enable this feature.IGNORE_PLAN_CACHE()The IGNORE_PLAN_CACHE() hint reminds the optimizer not to use the Plan Cache when handling the current prepare statement.This hint is used to temporarily disable the Plan Cache for a certain type of queries when prepare-plan-cache is enabled.In the following example, the Plan Cache is forcibly disabled when executing the prepare statement.Copyprepare stmt from 'select innodb_optimize_fulltext_only ", float_val=10.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.05458805337548256
Adding hint TuningHint(doc_id=20, param=<re.Match object; span=(12690, 12713), match='tidb_enable_index_merge'>, value=<re.Match object; span=(34, 37), match='000'>, recommendation='If the result set is less than 10,000 rows', passage="Optimizer HintsTiDB supports optimizer hints, which are based on the comment-like syntax introduced in MySQL 5.7. For example, one of the common syntaxes is /*+ HINT_NAME([t1_name [, t2_name] ...]) */. Use of optimizer hints is recommended in cases where the TiDB optimizer selects a less optimal query plan.Note:MySQL command-line clients earlier than 5.7.7 strip optimizer hints by default. If you want to use the Hint syntax in these earlier versions, add the --comments option when starting the client. For example: mysql -h 127.0.0.1 -P 4000 -uroot --comments.SyntaxOptimizer hints are case insensitive and specified within /*+ ... */ comments following the SELECT, UPDATE or DELETE keyword in a SQL statement. Optimizer hints are not currently supported for INSERT statements. Multiple hints can be specified by separating with commas. For example, the following query uses three different hints:CopySELECT /*+ USE_INDEX(t1, idx1), HASH_AGG(), HASH_JOIN(t1) */ count(*) FROM t t1, t t2 WHERE t1.a = t2.b;How optimizer hints affect query execution plans can be observed in the output of EXPLAIN and EXPLAIN ANALYZE.An incorrect or incomplete hint will not result in a statement error. This is because hints are intended to have only a hint (suggestion) semantic to query execution. Similarly, TiDB will at most return a warning if a hint is not applicable.Note:If the comments do not follow behind the specified keywords, they will be treated as common MySQL comments. The comments do not take effect, and no warning is reported.Currently, TiDB supports two categories of hints, which are different in scope. The first category of hints takes effect in the scope of query blocks, such as /*+ HASH_AGG() */; the second category of hints takes effect in the whole query, such as /*+ MEMORY_QUOTA(1024MB)*/.Each query or sub-query in a statement corresponds to a different query block, and each query block has its own name. For example:CopySELECT * FROM (SELECT * FROM t) t1, (SELECT * FROM t) t2;The above query statement has three query blocks: the outermost SELECT corresponds to the first query block, whose name is sel_1; the two SELECT sub-queries correspond to the second and the third query block, whose names are sel_2 and sel_3, respectively. The sequence of the numbers is based on the appearance of SELECT from left to right. If you replace the first SELECT with DELETE or UPDATE, then the corresponding query block names are del_1 or upd_1.Hints that take effect in query blocksThis category of hints can follow behind any SELECT, UPDATE or DELETE keywords. To control the effective scope of the hint, use the name of the query block in the hint. You can make the hint parameters clear by accurately identifying each table in the query (in case of duplicated table names or aliases). If no query block is specified in the hint, the hint takes effect in the current block by default.For example:CopySELECT /*+ HASH_JOIN(@sel_1 t1@sel_1, t3) */ * FROM (SELECT t1.a, t1.b FROM t t1, t t2 WHERE t1.a = t2.a) t1, t t3 WHERE t1.b = t3.b;This hint takes effect in the sel_1 query block, and its parameters are the t1 and t3 tables in sel_1 (sel_2 also contains a t1 table).As described above, you can specify the name of the query block in the hint in the following ways:Set the query block name as the first parameter of the hint, and separate it from other parameters with a space. In addition to QB_NAME, all the hints listed in this section also have another optional hidden parameter @QB_NAME. By using this parameter, you can specify the effective scope of this hint.Append @QB_NAME to a table name in the parameter to explicitly specify which query block this table belongs to.Note:You must put the hint in or before the query block where the hint takes effect. If the hint is put after the query block, it cannot take effect.QB_NAMEIf the query statement is a complicated statement that includes multiple nested queries, the ID and name of a certain query block might be mistakenly identified. The hint QB_NAME can help us in this regard.QB_NAME means Query Block Name. You can specify a new name to a query block. The specified QB_NAME and the previous default name are both valid. For example:CopySELECT /*+ QB_NAME(QB1) */ * FROM (SELECT * FROM t) t1, (SELECT * FROM t) t2;This hint specifies the outer SELECT query block's name to QB1, which makes QB1 and the default name sel_1 both valid for the query block.Note:In the above example, if the hint specifies the QB_NAME to sel_2 and does not specify a new QB_NAME for the original second SELECT query block, then sel_2 becomes an invalid name for the second SELECT query block.MERGE_JOIN(t1_name [, tl_name ...])The MERGE_JOIN(t1_name [, tl_name ...]) hint tells the optimizer to use the sort-merge join algorithm for the given table(s). Generally, this algorithm consumes less memory but takes longer processing time. If there is a very large data volume or insufficient system memory, it is recommended to use this hint. For example:Copyselect /*+ MERGE_JOIN(t1, t2) */ * from t1，t2 where t1.id = t2.id;Note:TIDB_SMJ is the alias for MERGE_JOIN in TiDB 3.0.x and earlier versions. If you are using any of these versions, you must apply the TIDB_SMJ(t1_name [, tl_name ...]) syntax for the hint. For the later versions of TiDB, TIDB_SMJ and MERGE_JOIN are both valid names for the hint, but MERGE_JOIN is recommended.INL_JOIN(t1_name [, tl_name ...])The INL_JOIN(t1_name [, tl_name ...]) hint tells the optimizer to use the index nested loop join algorithm for the given table(s). This algorithm might consume less system resources and take shorter processing time in some scenarios and might produce an opposite result in other scenarios. If the result set is less than 10,000 rows after the outer table is filtered by the WHERE condition, it is recommended to use this hint. For example:Copyselect /*+ INL_JOIN(t1, t2) */ * from t1，t2 where t1.id = t2.id;The parameter(s) given in INL_JOIN() is the candidate table for the inner table when you create the query plan. For example, INL_JOIN(t1) means that TiDB only considers using t1 as the inner table to create a query plan. If the candidate table has an alias, you must use the alias as the parameter in INL_JOIN(); if it does not has an alias, use the table's original name as the parameter. For example, in the select /*+ INL_JOIN(t1) */ * from t t1, t t2 where t1.a = t2.b; query, you must use the t table's alias t1 or t2 rather than t as INL_JOIN()'s parameter.Note:TIDB_INLJ is the alias for INL_JOIN in TiDB 3.0.x and earlier versions. If you are using any of these versions, you must apply the TIDB_INLJ(t1_name [, tl_name ...]) syntax for the hint. For the later versions of TiDB, TIDB_INLJ and INL_JOIN are both valid names for the hint, but INL_JOIN is recommended.INL_HASH_JOINThe INL_HASH_JOIN(t1_name [, tl_name]) hint tells the optimizer to use the index nested loop hash join algorithm. The conditions for using this algorithm are the same with the conditions for using the index nested loop join algorithm. The difference between the two algorithms is that INL_JOIN creates a hash table on the joined inner table, but INL_HASH_JOIN creates a hash table on the joined outer table. INL_HASH_JOIN has a fixed limit on memory usage, while the memory used by INL_JOIN depends on the number of rows matched in the inner table.HASH_JOIN(t1_name [, tl_name ...])The HASH_JOIN(t1_name [, tl_name ...]) hint tells the optimizer to use the hash join algorithm for the given table(s). This algorithm allows the query to be executed concurrently with multiple threads, which achieves a higher processing speed but consumes more memory. For example:Copyselect /*+ HASH_JOIN(t1, t2) */ * from t1，t2 where t1.id = t2.id;Note:TIDB_HJ is the alias for HASH_JOIN in TiDB 3.0.x and earlier versions. If you are using any of these versions, you must apply the TIDB_HJ(t1_name [, tl_name ...]) syntax for the hint. For the later versions of TiDB, TIDB_HJ and HASH_JOIN are both valid names for the hint, but HASH_JOIN is recommended.HASH_AGG()The HASH_AGG() hint tells the optimizer to use the hash aggregation algorithm in all the aggregate functions in the specified query block. This algorithm allows the query to be executed concurrently with multiple threads, which achieves a higher processing speed but consumes more memory. For example:Copyselect /*+ HASH_AGG() */ count(*) from t1，t2 where t1.a > 10 group by t1.id;STREAM_AGG()The STREAM_AGG() hint tells the optimizer to use the stream aggregation algorithm in all the aggregate functions in the specified query block. Generally, this algorithm consumes less memory but takes longer processing time. If there is a very large data volume or insufficient system memory, it is recommended to use this hint. For example:Copyselect /*+ STREAM_AGG() */ count(*) from t1，t2 where t1.a > 10 group by t1.id;USE_INDEX(t1_name, idx1_name [, idx2_name ...])The USE_INDEX(t1_name, idx1_name [, idx2_name ...]) hint tells the optimizer to use only the given index(es) for a specified t1_name table. For example, applying the following hint has the same effect as executing the select * from t t1 use index(idx1, idx2); statement.CopySELECT /*+ USE_INDEX(t1, idx1, idx2) */ * FROM t1;Note:If you specify only the table name but not index name in this hint, the execution does not consider any index but scan the entire table.IGNORE_INDEX(t1_name, idx1_name [, idx2_name ...])The IGNORE_INDEX(t1_name, idx1_name [, idx2_name ...]) hint tells the optimizer to ignore the given index(es) for a specified t1_name table. For example, applying the following hint has the same effect as executing the select * from t t1 ignore index(idx1, idx2); statement.Copyselect /*+ IGNORE_INDEX(t1, idx1, idx2) */ * from t t1;AGG_TO_COP()The AGG_TO_COP() hint tells the optimizer to push down the aggregate operation in the specified query block to the coprocessor. If the optimizer does not push down some aggregate function that is suitable for pushdown, then it is recommended to use this hint. For example:Copyselect /*+ AGG_TO_COP() */ sum(t1.a) from t t1;READ_FROM_STORAGE(TIFLASH[t1_name [, tl_name ...]], TIKV[t2_name [, tl_name ...]])The READ_FROM_STORAGE(TIFLASH[t1_name [, tl_name ...]], TIKV[t2_name [, tl_name ...]]) hint tells the optimizer to read specific table(s) from specific storage engine(s). Currently, this hint supports two storage engine parameters - TIKV and TIFLASH. For example:Copyselect /*+ READ_FROM_STORAGE(TIFLASH[t1], TIKV[t2]) */ t1.a from t t1, t t2 where t1.a = t2.a;Note:If you want the optimizer to use a table from another schema, you need to explicitly specify the schema name. For example:CopySELECT /*+ READ_FROM_STORAGE(TIFLASH[test1.t1,test2.t2]) */ t1.a FROM test1.t t1, test2.t t2 WHERE t1.a = t2.a;USE_INDEX_MERGE(t1_name, idx1_name [, idx2_name ...])The USE_INDEX_MERGE(t1_name, idx1_name [, idx2_name ...]) hint tells the optimizer to access a specific table with the index merge method. The given list of indexes are optional parameters. If you explicitly specify the list, TiDB selects indexes from the list to build index merge; if you do not give the list of indexes, TiDB selects indexes from all available indexes to build index merge. For example:CopySELECT /*+ USE_INDEX_MERGE(t1, idx_a, idx_b, idx_c) */ * FROM t1 WHERE t1.a > 10 OR t1.b > 10;When multiple USE_INDEX_MERGE hints are made to the same table, the optimizer tries to select the index from the union of the index sets specified by these hints.Note:The parameters of USE_INDEX_MERGE refer to index names, rather than column names. The index name of the primary key is primary.This hint takes effect on strict conditions, including:If the query can select a single index scan in addition to full table scan, the optimizer does not select index merge.If the query is in an explicit transaction, and if the statements before this query has already written data, the optimizer does not select index merge.Hints that take effect in the whole queryThis category of hints can only follow behind the first SELECT, UPDATE or DELETE keyword, which is equivalent to modifying the value of the specified system variable when this query is executed. The priority of the hint is higher than that of existing system variables.Note:This category of hints also has an optional hidden variable @QB_NAME, but the hint takes effect in the whole query even if you specify the variable.NO_INDEX_MERGE()The NO_INDEX_MERGE() hint disables the index merge feature of the optimizer.For example, the following query will not use index merge:Copyselect /*+ NO_INDEX_MERGE() */ * from t where t.a > 0 or t.b > 0;In addition to this hint, setting the tidb_enable_index_merge system variable also controls whether to enable this feature.Note:NO_INDEX_MERGE has a higher priority over USE_INDEX_MERGE. When both hints are used, USE_INDEX_MERGE does not take effect.USE_TOJA(boolean_value)The boolean_value parameter can be TRUE or FALSE. The USE_TOJA(TRUE) hint enables the optimizer to convert an in condition (containing a sub-query) to join and aggregation operations. Comparatively, the USE_TOJA(FALSE) hint disables this feature.For example, the following query will convert in (select t2.a from t2) subq to corresponding join and aggregation operations:Copyselect /*+ USE_TOJA(TRUE) */ t1.a, t1.b from t1 where t1.a in (select t2.a from t2) subq;In addition to this hint, setting the tidb_opt_insubq_to_join_and_agg system variable also controls whether to enable this feature.MAX_EXECUTION_TIME(N)The MAX_EXECUTION_TIME(N) hint places a limit N (a timeout value in milliseconds) on how long a statement is permitted to execute before the server terminates it. In the following hint, MAX_EXECUTION_TIME(1000) means that the timeout is 1000 milliseconds (that is, 1 second):Copyselect /*+ MAX_EXECUTION_TIME(1000) */ * from t1 inner join t2 where t1.id = t2.id;In addition to this hint, the global.max_execution_time system variable can also limit the execution time of a statement.MEMORY_QUOTA(N)The MEMORY_QUOTA(N) hint places a limit N (a threshold value in MB or GB) on how much memory a statement is permitted to use. When a statement's memory usage exceeds this limit, TiDB produces a log message based on the statement's over-limit behavior or just terminates it.In the following hint, MEMORY_QUOTA(1024MB) means that the memory usage is limited to 1024MB:Copyselect /*+ MEMORY_QUOTA(1024MB) */ * from t;In addition to this hint, the tidb_mem_quota_query system variable can also limit the memory usage of a statement.READ_CONSISTENT_REPLICA()The READ_CONSISTENT_REPLICA() hint enables the feature of reading consistent data from the TiKV follower node. For example:Copyselect /*+ READ_CONSISTENT_REPLICA() */ * from t;In addition to this hint, setting the tidb_replica_read environment variable to 'follower' or 'leader' also controls whether to enable this feature.IGNORE_PLAN_CACHE()The IGNORE_PLAN_CACHE() hint reminds the optimizer not to use the Plan Cache when handling the current prepare statement.This hint is used to temporarily disable the Plan Cache for a certain type of queries when prepare-plan-cache is enabled.In the following example, the Plan Cache is forcibly disabled when executing the prepare statement.Copyprepare stmt from 'select innodb_optimize_fulltext_only ", float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.05458805337548256
Excluding recommendation "less than 10,000 rows" for parameter "max_execution_time" due to low confidence (0.0038943495601415634)
Excluding recommendation "t1_name [, t2_name" for parameter "tl_name" due to low confidence (0.008887196891009808)
Excluding recommendation "idx_a, idx_b" for parameter "idx_c" due to low confidence (0.03180476278066635)
Excluding recommendation "If the result set is less than 10,000 rows" for parameter "innodb_optimize_fulltext_only" due to low confidence (0.03746612370014191)
Creating hints for document 21
Excluding recommendation "multiple instances" for parameter "innodb_write_io_threads" due to low confidence (9.425811003893614e-05)
Excluding recommendation "Dividing the InnoDB buffer pool into multiple instances" for parameter "innodb_buffer_pool_instances" due to low confidence (0.0004490914579946548)
Excluding recommendation "Multiple buffer pool instances" for parameter "innodb_change_buffer_max_size" due to low confidence (0.0008384555112570524)
Excluding recommendation "innodb_change_buffer_max_size" for parameter "innodb_buffer_pool_instances" due to low confidence (0.047473080456256866)
Excluding recommendation "at least 1 gigabyte" for parameter "join_buffer_size" due to low confidence (0.00017164020391646773)
Excluding recommendation "at least 1 gigabyte" for parameter "innodb_buffer_pool_instances" due to low confidence (0.04561321809887886)
Adding hint TuningHint(doc_id=21, param=<re.Match object; span=(632, 655), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation='1 gigabyte or more', passage='The number of regions that the InnoDB buffer pool is divided into. For systems with buffer pools in the multi-gigabyte range, dividing the buffer pool into separate instances can improve concurrency, by reducing contention as different threads read and write to cached pages. Each page that is stored in or read from the buffer pool is assigned to one of the buffer pool instances randomly, using a hashing function. Each buffer pool manages its own free lists, flush lists, LRUs, and all other data structures connected to a buffer pool, and is protected by its own buffer pool mutex.This option takes effect only when you set the innodb_buffer_pool_size to a size of 1 gigabyte or more. The total size you specify is divided among all the buffer pools. For best efficiency, specify a combination of innodb_buffer_pool_instances and innodb_buffer_pool_size so that each buffer pool instance is at least 1 gigabyte.\nIn MySQL versions prior to 5.5.4 this was not configurable and thus set to just one instance. Now join_buffer_size ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.2764286994934082
Adding hint TuningHint(doc_id=21, param=<re.Match object; span=(117, 145), match='innodb_buffer_pool_instances'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation='1 (the default) up to 64', passage='you can increase innodb_buffer_pool_size, and you can divide the InnoDB buffer pool into multiple regions by setting innodb_buffer_pool_instances to 2, 3, 4 or 8. As long as innodb_buffer_pool_size is set high enough, and you have enough memory available in your MySQL database server. This increases\nInnoDB read/write threads.\nTo enable multiple buffer pool instances, set the innodb_buffer_pool_instances configuration option to a value greater than 1 (the default) up to 64 (the maximum). innodb_buffer_pool_size ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.08366220444440842
Adding hint TuningHint(doc_id=21, param=<re.Match object; span=(117, 145), match='innodb_buffer_pool_instances'>, value=<re.Match object; span=(22, 24), match='64'>, recommendation='1 (the default) up to 64', passage='you can increase innodb_buffer_pool_size, and you can divide the InnoDB buffer pool into multiple regions by setting innodb_buffer_pool_instances to 2, 3, 4 or 8. As long as innodb_buffer_pool_size is set high enough, and you have enough memory available in your MySQL database server. This increases\nInnoDB read/write threads.\nTo enable multiple buffer pool instances, set the innodb_buffer_pool_instances configuration option to a value greater than 1 (the default) up to 64 (the maximum). innodb_buffer_pool_size ', float_val=64.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.08366220444440842
Adding hint TuningHint(doc_id=21, param=<re.Match object; span=(17, 40), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 1), match='2'>, recommendation='2, 3, 4 or 8', passage='you can increase innodb_buffer_pool_size, and you can divide the InnoDB buffer pool into multiple regions by setting innodb_buffer_pool_instances to 2, 3, 4 or 8. As long as innodb_buffer_pool_size is set high enough, and you have enough memory available in your MySQL database server. This increases\nInnoDB read/write threads.\nTo enable multiple buffer pool instances, set the innodb_buffer_pool_instances configuration option to a value greater than 1 (the default) up to 64 (the maximum). innodb_buffer_pool_size ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.06922642141580582
Adding hint TuningHint(doc_id=21, param=<re.Match object; span=(17, 40), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(3, 4), match='3'>, recommendation='2, 3, 4 or 8', passage='you can increase innodb_buffer_pool_size, and you can divide the InnoDB buffer pool into multiple regions by setting innodb_buffer_pool_instances to 2, 3, 4 or 8. As long as innodb_buffer_pool_size is set high enough, and you have enough memory available in your MySQL database server. This increases\nInnoDB read/write threads.\nTo enable multiple buffer pool instances, set the innodb_buffer_pool_instances configuration option to a value greater than 1 (the default) up to 64 (the maximum). innodb_buffer_pool_size ', float_val=3.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.06922642141580582
Adding hint TuningHint(doc_id=21, param=<re.Match object; span=(17, 40), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(6, 7), match='4'>, recommendation='2, 3, 4 or 8', passage='you can increase innodb_buffer_pool_size, and you can divide the InnoDB buffer pool into multiple regions by setting innodb_buffer_pool_instances to 2, 3, 4 or 8. As long as innodb_buffer_pool_size is set high enough, and you have enough memory available in your MySQL database server. This increases\nInnoDB read/write threads.\nTo enable multiple buffer pool instances, set the innodb_buffer_pool_instances configuration option to a value greater than 1 (the default) up to 64 (the maximum). innodb_buffer_pool_size ', float_val=4.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.06922642141580582
Adding hint TuningHint(doc_id=21, param=<re.Match object; span=(17, 40), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(11, 12), match='8'>, recommendation='2, 3, 4 or 8', passage='you can increase innodb_buffer_pool_size, and you can divide the InnoDB buffer pool into multiple regions by setting innodb_buffer_pool_instances to 2, 3, 4 or 8. As long as innodb_buffer_pool_size is set high enough, and you have enough memory available in your MySQL database server. This increases\nInnoDB read/write threads.\nTo enable multiple buffer pool instances, set the innodb_buffer_pool_instances configuration option to a value greater than 1 (the default) up to 64 (the maximum). innodb_buffer_pool_size ', float_val=8.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.06922642141580582
Adding hint TuningHint(doc_id=21, param=<re.Match object; span=(60, 88), match='innodb_buffer_pool_instances'>, value=<re.Match object; span=(0, 1), match='4'>, recommendation='4', passage='For example, you can set innodb_buffer_pool_size to 6GB and innodb_buffer_pool_instances to 4 in your my.cnf MySQL configuration file:\n; InnoDB buffer pool size in bytes. The primary value to adjust on a database server,\n; can be set up to 80% of the total memory in these environments\ninnodb_buffer_pool_size = 6000M innodb_buffer_pool_size ', float_val=4.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.8932667374610901
Adding hint TuningHint(doc_id=21, param=<re.Match object; span=(25, 48), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 3), match='6GB'>, recommendation='6GB and innodb_buffer_pool_instances to 4', passage='For example, you can set innodb_buffer_pool_size to 6GB and innodb_buffer_pool_instances to 4 in your my.cnf MySQL configuration file:\n; InnoDB buffer pool size in bytes. The primary value to adjust on a database server,\n; can be set up to 80% of the total memory in these environments\ninnodb_buffer_pool_size = 6000M innodb_buffer_pool_size ', float_val=6.0, val_unit='GB', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.21018315851688385
Adding hint TuningHint(doc_id=21, param=<re.Match object; span=(25, 48), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(40, 41), match='4'>, recommendation='6GB and innodb_buffer_pool_instances to 4', passage='For example, you can set innodb_buffer_pool_size to 6GB and innodb_buffer_pool_instances to 4 in your my.cnf MySQL configuration file:\n; InnoDB buffer pool size in bytes. The primary value to adjust on a database server,\n; can be set up to 80% of the total memory in these environments\ninnodb_buffer_pool_size = 6000M innodb_buffer_pool_size ', float_val=4.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.21018315851688385
Adding hint TuningHint(doc_id=21, param=<re.Match object; span=(52, 80), match='innodb_buffer_pool_instances'>, value=<re.Match object; span=(10, 13), match='1GB'>, recommendation='more than 1GB', passage='If innodb_buffer_pool_size is set to more than 1GB, innodb_buffer_pool_instances\n; divides the InnoDB buffer pool into this many instances.\ninnodb_buffer_pool_instances = 4Code language: TOML, also INI (ini) innodb_buffer_pool_size ', float_val=1.0, val_unit='GB', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.17732897400856018
Adding hint TuningHint(doc_id=21, param=<re.Match object; span=(3, 26), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(10, 13), match='1GB'>, recommendation='more than 1GB', passage='If innodb_buffer_pool_size is set to more than 1GB, innodb_buffer_pool_instances\n; divides the InnoDB buffer pool into this many instances.\ninnodb_buffer_pool_instances = 4Code language: TOML, also INI (ini) innodb_buffer_pool_size ', float_val=1.0, val_unit='GB', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.4744085967540741
Excluding recommendation "minimum 1GB" for parameter "innodb_buffer_pool_instance" due to low confidence (0.020688701421022415)
Excluding recommendation "default" for parameter "innodb_buffer_pool_instances" due to low confidence (0.028880104422569275)
Excluding recommendation "default" for parameter "nnodb_buffer_pool_instances" due to low confidence (0.02917817234992981)
Adding hint TuningHint(doc_id=21, param=<re.Match object; span=(30, 53), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 2), match='70'>, recommendation='70 – 80% of the RAM available', passage='In this example, I’ve used an innodb_buffer_pool_size of 6000M (6GB), so there is 1500M available per innodb_buffer_pool_instance, which is more than the minimum 1GB. As a rule of thumb, set your innodb_buffer_pool_size to approximately 70 – 80% of the RAM available.\nInnodb_buffer_pool_instances defaults#\nVarious MySQL versions have different innodb_buffer_pool_instances default values, here is an overview – listing – for you: innodb_buffer_pool_size ', float_val=70.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.07776665687561035
Adding hint TuningHint(doc_id=21, param=<re.Match object; span=(30, 53), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(5, 8), match='80%'>, recommendation='70 – 80% of the RAM available', passage='In this example, I’ve used an innodb_buffer_pool_size of 6000M (6GB), so there is 1500M available per innodb_buffer_pool_instance, which is more than the minimum 1GB. As a rule of thumb, set your innodb_buffer_pool_size to approximately 70 – 80% of the RAM available.\nInnodb_buffer_pool_instances defaults#\nVarious MySQL versions have different innodb_buffer_pool_instances default values, here is an overview – listing – for you: innodb_buffer_pool_size ', float_val=0.8, val_unit='', hint_type=<HintType.RAM_RATIO: 1>) with confidence 0.07776665687561035
Adding hint TuningHint(doc_id=21, param=<re.Match object; span=(147, 170), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 8), match='1GBMySQL'>, recommendation='1GBMySQL', passage='MySQL version# InnoDB buffer pool instancesNotesMySQL 5.5 (<= 5.5.4)1not configurableMySQL 5.51–MySQL 5.6 (<= 5.6.5)1–MySQL 5.6 (>= 5.6.6)8or 1 if innodb_buffer_pool_size < 1GBMySQL 5.78or 1 if innodb_buffer_pool_size < 1GBMariaDB 10 (<= MariaDB 10.0.3)1–MariaDB 10 (>= MariaDB 10.0.4)8–InnoDB read and write I/O threads in MySQL#\nBesides innodb_buffer_pool_instances, you can also increase the number of InnoDB read I/O threads and write I/O threads. These are configured with innodb_write_io_threads and innodb_read_io_threads. mysql_native_password_proxy_users ', float_val=1.0, val_unit='GBMySQL', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.061419859528541565
Excluding recommendation "InnoDB read I/O threads and write I/O threads" for parameter "innodb_write_io_threads" due to low confidence (0.000445851736003533)
Excluding recommendation "1GBMySQL" for parameter "innodb_buffer_pool_instances" due to low confidence (0.0009325661230832338)
Excluding recommendation "mysql_native_password_proxy_users" for parameter "innodb_read_io_threads" due to low confidence (3.4358199627604336e-05)
Excluding recommendation "innodb_read_io_threads" for parameter "mysql_native_password_proxy_users" due to low confidence (0.0005735428421758115)
Adding hint TuningHint(doc_id=21, param=<re.Match object; span=(113, 136), match='innodb_write_io_threads'>, value=<re.Match object; span=(0, 1), match='8'>, recommendation='8\n', passage='Both settings default to 4 threads. We can increase these to, for example, 8:\n; Number of I/O threads for writes\ninnodb_write_io_threads = 8\n; Number of I/O threads for reads\ninnodb_read_io_threads = 8Code language: TOML, also INI (ini) innodb_write_io_threads ', float_val=8.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.07176998257637024
Excluding recommendation "8" for parameter "innodb_read_io_threads" due to low confidence (0.0037879941519349813)
Excluding recommendation "4" for parameter "innodb_write_io_threads" due to low confidence (0.0025351394433528185)
Excluding recommendation "4" for parameter "innodb_read_io_threads" due to low confidence (0.030444670468568802)
Excluding recommendation "64 × innodb_read_io_threads pending read requests" for parameter "innodb_write_io_threads" due to low confidence (0.00010434228170197457)
Excluding recommendation "64 × innodb_read_io_threads pending read requests" for parameter "innodb_read_io_threads" due to low confidence (0.019696775823831558)
Excluding recommendation "defaults" for parameter "innodb_change_buffer_max_size" due to low confidence (0.0065129962749779224)
Adding hint TuningHint(doc_id=21, param=<re.Match object; span=(50, 78), match='innodb_buffer_pool_instances'>, value=<re.Match object; span=(0, 1), match='8'>, recommendation='8', passage='Starting from MariaDB 10.0, the default number of innodb_buffer_pool_instances is 8. This means you have to configure your innodb_buffer_pool_size to at least 8GB, see the defaults above.\nProtip, don’t over optimize: never make too many configuration changes at once. After changing one or two settings, let the server run for a few days so you can learn the implications of the changes. Then, if necessary, make additional changes to the configuration. innodb_change_buffer_max_size ', float_val=8.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.20684202015399933
Adding hint TuningHint(doc_id=21, param=<re.Match object; span=(123, 146), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 3), match='8GB'>, recommendation='8GB', passage='Starting from MariaDB 10.0, the default number of innodb_buffer_pool_instances is 8. This means you have to configure your innodb_buffer_pool_size to at least 8GB, see the defaults above.\nProtip, don’t over optimize: never make too many configuration changes at once. After changing one or two settings, let the server run for a few days so you can learn the implications of the changes. Then, if necessary, make additional changes to the configuration. innodb_change_buffer_max_size ', float_val=8.0, val_unit='GB', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.16949249804019928
Excluding recommendation "Key_reads
| 9260357 table_definition_cache" for parameter "ey_reads" due to low confidence (0.0012875525280833244)
Excluding recommendation "11810240259" for parameter "ey_read_requests" due to low confidence (0.024048812687397003)
Excluding recommendation "Key_read_requests" for parameter "table_definition_cache" due to low confidence (0.0132796885445714)
Excluding recommendation "1/1275" for parameter "ey_reads" due to low confidence (2.970721197925741e-06)
Excluding recommendation "1/1275" for parameter "ey_read_requests" due to low confidence (5.592243542196229e-05)
Adding hint TuningHint(doc_id=21, param=<re.Match object; span=(144, 159), match='key_buffer_size'>, value=<re.Match object; span=(0, 5), match='768MB'>, recommendation='768MB', passage='+-------------------+-------------+Code language: SQL (Structured Query Language) (sql)\nThese two variables and values relate to the configured key_buffer_size\nIn this old example, the database server has 4GB of RAM and a configured key_buffer_size of 512MB. The ratio (Key_read_requests / Key_reads) is approximately 1/1275, which is good but the key_buffer_size value may be increased to 768MB. Even though this is not yet necessary. key_buffer_size ', float_val=768.0, val_unit='MB', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.11900576949119568
Adding hint TuningHint(doc_id=21, param=<re.Match object; span=(24, 40), match='hreads_connected'>, value=<re.Match object; span=(0, 2), match='76'>, recommendation='76\n', passage='| Threads_cached\n| 0\n| Threads_connected | 76\n| Threads_created\n| 6234040 |\n| Threads_running\n| 2 max_delayed_threads ', float_val=76.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.1410565972328186
Adding hint TuningHint(doc_id=21, param=<re.Match object; span=(98, 117), match='max_delayed_threads'>, value=<re.Match object; span=(0, 1), match='2'>, recommendation='2', passage='| Threads_cached\n| 0\n| Threads_connected | 76\n| Threads_created\n| 6234040 |\n| Threads_running\n| 2 max_delayed_threads ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.28279823064804077
Adding hint TuningHint(doc_id=21, param=<re.Match object; span=(79, 93), match='hreads_running'>, value=<re.Match object; span=(0, 1), match='2'>, recommendation='2 max_delayed_threads', passage='| Threads_cached\n| 0\n| Threads_connected | 76\n| Threads_created\n| 6234040 |\n| Threads_running\n| 2 max_delayed_threads ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.062226567417383194
Excluding recommendation "0
" for parameter "hreads_cached" due to low confidence (0.0065599288791418076)
Excluding recommendation "6234040" for parameter "hreads_created" due to low confidence (0.0023484197445213795)
Excluding recommendation "0" for parameter "max_delayed_threads" due to low confidence (0.0009570291731506586)
Excluding recommendation "0 max_delayed_threads" for parameter "hreads_cached" due to low confidence (1.6422545741079375e-05)
Excluding recommendation "somewhere between 20 and 40" for parameter "max_binlog_stmt_cache_size" due to low confidence (0.016322694718837738)
Adding hint TuningHint(doc_id=21, param=<re.Match object; span=(45, 62), match='thread_cache_size'>, value=<re.Match object; span=(18, 20), match='20'>, recommendation='somewhere between 20 and 40', passage='You can use the MySQL Server System variable thread_cache_size to configure how many threads must be cached by MySQL. This is one of those configuration settings that, probably, provides the least performance gain, but still…\nDon’t set this one too high, somewhere between 20 and 40 is often good enough:\nthread_cache_size = 20Code language: TOML, also INI (ini)\nWhen you execute the previous statement again, the values will be: max_binlog_stmt_cache_size ', float_val=20.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.2641831338405609
Adding hint TuningHint(doc_id=21, param=<re.Match object; span=(45, 62), match='thread_cache_size'>, value=<re.Match object; span=(25, 27), match='40'>, recommendation='somewhere between 20 and 40', passage='You can use the MySQL Server System variable thread_cache_size to configure how many threads must be cached by MySQL. This is one of those configuration settings that, probably, provides the least performance gain, but still…\nDon’t set this one too high, somewhere between 20 and 40 is often good enough:\nthread_cache_size = 20Code language: TOML, also INI (ini)\nWhen you execute the previous statement again, the values will be: max_binlog_stmt_cache_size ', float_val=40.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.2641831338405609
Adding hint TuningHint(doc_id=21, param=<re.Match object; span=(25, 41), match='hreads_connected'>, value=<re.Match object; span=(0, 2), match='98'>, recommendation='98\n', passage='| Threads_cached\n| 14\n| Threads_connected | 98\n| Threads_created\n| 2896\n| Threads_running\n| 1 max_delayed_threads ', float_val=98.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.08675084263086319
Adding hint TuningHint(doc_id=21, param=<re.Match object; span=(94, 113), match='max_delayed_threads'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation='1', passage='| Threads_cached\n| 14\n| Threads_connected | 98\n| Threads_created\n| 2896\n| Threads_running\n| 1 max_delayed_threads ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.2174132615327835
Excluding recommendation "1 max_delayed_threads" for parameter "hreads_running" due to low confidence (0.02434895746409893)
Excluding recommendation "14
" for parameter "hreads_cached" due to low confidence (0.0012468764325603843)
Excluding recommendation "2896" for parameter "hreads_created" due to low confidence (0.00152181729208678)
Adding hint TuningHint(doc_id=21, param=<re.Match object; span=(5, 19), match='tmp_table_size'>, value=<re.Match object; span=(0, 3), match='16M'>, recommendation='16M', passage='2.1: tmp_table_size and max_heap_table_sizeThe default tmp_table_size and max_heap_table_size values are 16M. These two have to be equal in size! It sets the maximum size for internal in-memory tables, resulting in less creation of temporarily MyISAM tables on the file system. That in return, results in less disk I/O. max_heap_table_size ', float_val=16.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.7599057555198669
Adding hint TuningHint(doc_id=21, param=<re.Match object; span=(24, 43), match='max_heap_table_size'>, value=<re.Match object; span=(0, 3), match='16M'>, recommendation='16M', passage='2.1: tmp_table_size and max_heap_table_sizeThe default tmp_table_size and max_heap_table_size values are 16M. These two have to be equal in size! It sets the maximum size for internal in-memory tables, resulting in less creation of temporarily MyISAM tables on the file system. That in return, results in less disk I/O. max_heap_table_size ', float_val=16.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.5891078114509583
Excluding recommendation "diagnostic data" for parameter "information_scheme" due to low confidence (4.5604287151945755e-05)
Excluding recommendation "plain index scans, range index scans and joins without indices" for parameter "key_buffer_size" due to low confidence (0.00012332361075095832)
Excluding recommendation "1M" for parameter "sysvar_tmp_table_sizehttps" due to low confidence (1.0141683560505044e-05)
Excluding recommendation "join_buffer_sizeThe" for parameter "sysvar_max_heap_table_size" due to low confidence (0.0026526048313826323)
Excluding recommendation "
2 June 2020 at 23:30" for parameter "innodb_write_io_threads" due to low confidence (0.0009859021520242095)
Excluding recommendation "convert old MyISAM tables to InnoDB" for parameter "optimizationquery_cache" due to low confidence (6.465899787144735e-05)
Excluding recommendation "
Jan Reilink" for parameter "query_cache_size" due to low confidence (9.074802073882893e-05)
Excluding recommendation "query_cache_size" for parameter "query_cache" due to low confidence (0.0017849622527137399)
Excluding recommendation "Disable WordPress XCloner Plugin logger" for parameter "log_slow_admin_statements" due to low confidence (0.00048065726878121495)
Excluding recommendation "Disable" for parameter "com_contact" due to low confidence (1.3849929928255733e-05)
Creating hints for document 22
Excluding recommendation "unique hashes" for parameter "explicit_defaults_for_timestamp" due to low confidence (0.0010430662659928203)
Excluding recommendation "unique hashes" for parameter "approx_distinct" due to low confidence (0.008582312613725662)
Excluding recommendation "OR conditions" for parameter "slow_query_log" due to low confidence (0.00022560468642041087)
Excluding recommendation "LIKE" for parameter "regexp_like" due to low confidence (0.00946877896785736)
Excluding recommendation "Specifying large tables first" for parameter "query_cache_wlock_invalidate" due to low confidence (0.00012527135550044477)
Excluding recommendation "date or country" for parameter "key_cache_division_limit" due to low confidence (5.94417042520945e-06)
Excluding recommendation "true" for parameter "distributed_join" due to low confidence (0.023774007335305214)
Excluding recommendation "PARQUET
TBLPROPERTIES" for parameter "trx_date" due to low confidence (8.754449663683772e-05)
Excluding recommendation "9" for parameter "explicit_defaults_for_timestamp" due to low confidence (0.0006094180280342698)
Excluding recommendation "trx_date STRING" for parameter "update_date" due to low confidence (0.02668885700404644)
Excluding recommendation "last_modified,1,4) ,count(*)" for parameter "df_machine_learning" due to low confidence (0.002937578596174717)
Excluding recommendation "primary key" for parameter "ejp_events" due to low confidence (0.015821462497115135)
Excluding recommendation "lower(name) like ‘%wilbraham%’" for parameter "event_text" due to low confidence (0.005299569573253393)
Adding hint TuningHint(doc_id=22, param=<re.Match object; span=(25, 38), match='last_modified'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation='1,4', passage='explain select SUBSTRING(last_modified,1,4) ,count(*)\xa0 from hive.df_machine_learning.event_text where lower(name) like ‘%wilbraham%’ or (REGEXP_LIKE(lower(name), ‘.*wilbraham.*’)) group by 1 order by 1;\n14. Explain plan with MySQL (Sample)\nIn this particular case you can see that the primary key is used on the ‘ejp_events’ table and the non-primary key on the “ejp_orders’ table. This query is going to be fast! key_cache_division_limit ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.15781165659427643
Adding hint TuningHint(doc_id=22, param=<re.Match object; span=(25, 38), match='last_modified'>, value=<re.Match object; span=(2, 3), match='4'>, recommendation='1,4', passage='explain select SUBSTRING(last_modified,1,4) ,count(*)\xa0 from hive.df_machine_learning.event_text where lower(name) like ‘%wilbraham%’ or (REGEXP_LIKE(lower(name), ‘.*wilbraham.*’)) group by 1 order by 1;\n14. Explain plan with MySQL (Sample)\nIn this particular case you can see that the primary key is used on the ‘ejp_events’ table and the non-primary key on the “ejp_orders’ table. This query is going to be fast! key_cache_division_limit ', float_val=4.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.15781165659427643
Excluding recommendation "last_modified,1,4) ,count(*)" for parameter "key_cache_division_limit" due to low confidence (0.001594202360138297)
Excluding recommendation "non-primary key" for parameter "ejp_orders" due to low confidence (0.004103254061192274)
Creating hints for document 23
Creating hints for document 24
Excluding recommendation "mod_jk" for parameter "mod_proxy" due to low confidence (4.190286563243717e-05)
Excluding recommendation "mysql_native_password_proxy_users" for parameter "mod_jk" due to low confidence (4.619695755536668e-05)
Excluding recommendation "mod_jk instead of mod_proxy" for parameter "mysql_native_password_proxy_users" due to low confidence (0.0032185751479119062)
Excluding recommendation "
1.8" for parameter "table_open_cache_instances" due to low confidence (0.0002626759232953191)
Excluding recommendation "100" for parameter "max_delayed_threads" due to low confidence (0.010523977689445019)
Excluding recommendation "Optimize Database Thread pool" for parameter "table_open_cache_instances" due to low confidence (0.0001792935945559293)
Excluding recommendation "
numTestsPerEvictionRun=”10″" for parameter "max_binlog_stmt_cache_size" due to low confidence (0.008512664586305618)
Excluding recommendation "
minIdle=”3″" for parameter "mysql_native_password_proxy_users" due to low confidence (0.011135652661323547)
Excluding recommendation "autoReconnect=true" for parameter "db_name" due to low confidence (0.004333870485424995)
Excluding recommendation "false
development
false" for parameter "innodb_optimize_fulltext_only" due to low confidence (0.0024702188093215227)
Adding hint TuningHint(doc_id=24, param=<re.Match object; span=(131, 147), match='sort_buffer_size'>, value=<re.Match object; span=(0, 3), match='16M'>, recommendation='16M', passage='dl.file.entry.read.count.enabled=false\n4 Database\n4.1 My.cnf\n#Each session that needs to do a sort allocates a buffer of this size\nsort_buffer_size=16M\n#Each thread that does a sequential scan for a MyISAM table allocates a buffer of this size (in bytes) for each table it scans read_rnd_buffer_size ', float_val=16.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.11784582585096359
Excluding recommendation "
sort_buffer_size=16M
" for parameter "read_rnd_buffer_size" due to low confidence (0.00017611031944397837)
Excluding recommendation "Increase the value of join_buffer_size to get a faster full join" for parameter "join_buffer_size" due to low confidence (0.003186029614880681)
Excluding recommendation "Increase the value of join_buffer_size" for parameter "binlog_stmt_cache_size" due to low confidence (0.0005467646406032145)
Excluding recommendation "4M" for parameter "query_cache_limit" due to low confidence (0.021577520295977592)
Adding hint TuningHint(doc_id=24, param=<re.Match object; span=(114, 137), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 5), match='2048M'>, recommendation='2048M\n', passage='query_cache_limit=4M\n#The size in bytes of the memory buffer InnoDB uses to cache data and indexes of its tables.\ninnodb_buffer_pool_size = 2048M\n#Increase the value of join_buffer_size to get a faster full join when adding indexes is not possible. binlog_stmt_cache_size ', float_val=2048.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.07962566614151001
Excluding recommendation "32M
" for parameter "query_cache_size" due to low confidence (0.0016912034479901195)
Adding hint TuningHint(doc_id=24, param=<re.Match object; span=(0, 16), match='join_buffer_size'>, value=<re.Match object; span=(0, 4), match='256M'>, recommendation='256M', passage='join_buffer_size = 256M\n#The number of open tables for all threads.\ntable_open_cache = 400\n#The amount of memory allocated for caching query results.\nquery_cache_size=32M\n* Reference:\xa0http://www.packtpub.com/liferay-portal-performance-best-practices/book thread_cache_size ', float_val=256.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.10108122229576111
Adding hint TuningHint(doc_id=24, param=<re.Match object; span=(68, 84), match='table_open_cache'>, value=<re.Match object; span=(0, 3), match='400'>, recommendation='400', passage='join_buffer_size = 256M\n#The number of open tables for all threads.\ntable_open_cache = 400\n#The amount of memory allocated for caching query results.\nquery_cache_size=32M\n* Reference:\xa0http://www.packtpub.com/liferay-portal-performance-best-practices/book thread_cache_size ', float_val=400.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.06435749679803848
Excluding recommendation "256M
" for parameter "thread_cache_size" due to low confidence (5.888927626074292e-05)
Creating hints for document 25
Excluding recommendation "How to order entity subclasses by their class type" for parameter "innodb_file_per_table" due to low confidence (0.0004018279432784766)
Excluding recommendation "mysql_native_password_proxy_users" for parameter "vlad_mihalcea" due to low confidence (0.01995771937072277)
Excluding recommendation "4-day x 4 hours" for parameter "mysql_native_password_proxy_users" due to low confidence (1.149734544014791e-05)
Creating hints for document 26
Creating hints for document 27
Excluding recommendation "2021-01-252021-01-24" for parameter "ft_query_expansion_limit" due to low confidence (6.026867049513385e-05)
Adding hint TuningHint(doc_id=27, param=<re.Match object; span=(395, 401), match='emp_id'>, value=<re.Match object; span=(1, 8), match='3300000'>, recommendation='>3300000', passage='Semi-join is introduced in Oracle 8.0. It provides an efficient method of performing a WHERE EXISTS or WHERE IN sub-queries. A semi-join returns one copy of each row in first table for which at least one match is found in second table, there is no need of further scanning of the second table once a record is found.\nSELECT *\nFROM DEPARTMENT\nwhere dpt_id\nin (select emp_dept from EMPLOYEE\nwhere emp_id >3300000) table_open_cache_instances ', float_val=3300000.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.25633004307746887
Excluding recommendation "emp_id >3300000" for parameter "dpt_id" due to low confidence (0.009611097164452076)
Excluding recommendation "emp_id >3300000" for parameter "table_open_cache_instances" due to low confidence (0.0026178613770753145)
Adding hint TuningHint(doc_id=27, param=<re.Match object; span=(366, 374), match='emp_dept'>, value=<re.Match object; span=(1, 8), match='3300000'>, recommendation='>3300000', passage='Semi-join is introduced in Oracle 8.0. It provides an efficient method of performing a WHERE EXISTS or WHERE IN sub-queries. A semi-join returns one copy of each row in first table for which at least one match is found in second table, there is no need of further scanning of the second table once a record is found.\nSELECT *\nFROM DEPARTMENT\nwhere dpt_id\nin (select emp_dept from EMPLOYEE\nwhere emp_id >3300000) table_open_cache_instances ', float_val=3300000.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.25017279386520386
Adding hint TuningHint(doc_id=27, param=<re.Match object; span=(7, 13), match='emp_id'>, value=<re.Match object; span=(0, 7), match='3300000'>, recommendation='3300000', passage='WHERE\xa0\xa0emp_id > 3300000)\nHere is the query plan of the hints injected SQL and it is now running much faster. The new query plan shows that the “INDEX RANGE SCAN” of EMP_DPT_INX to EMPLOYEE table is changed to “INDEX RANGE SCAN DESCENDING” and the estimated cost is the same as the Original SQL. query_prealloc_size ', float_val=3300000.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.32137331366539
Excluding recommendation " emp_id > 3300000" for parameter "query_prealloc_size" due to low confidence (0.0008269201498478651)
Adding hint TuningHint(doc_id=27, param=<re.Match object; span=(215, 221), match='emp_id'>, value=<re.Match object; span=(0, 7), match='3300000'>, recommendation='3300000', passage='The Hints /*+ INDEX_DESC(@SEL$2 EMPLOYEE) */ \xa0injected SQL takes only 0.05 second, it is much faster than the original SQL, the reason behind is the employee records creation order in EMPLOYEE table, the higher the emp_id will be created later, so the corresponding records will be inserted into the right hand side of the EMP_DPT_INX index tree nodes. The “INDEX RANGE SCAN” in the original SQL plan that needs to scan a lot of records from left to right direction before it can hit one record for\xa0 the condition “WHERE\xa0 emp_id > 3300000”.\xa0 In contrast, the Hints injected SQL with the “INDEX RANGE SCAN DESCENDING” operation that can evaluate the WHERE condition with only one scan from right to left on EMP_DPT_INX index tree nodes. That explains why the Hints injected SQL outperformed the original SQL by more than 270 times.\nIt is common that we employ “transaction id”, “serial no” or “creation date” in our application design, this kind of the records are normally created alone with an increasing sequence order, there may be some SQL in your system can be improved by this technique. slow_query_log ', float_val=3300000.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.07863607257604599
Excluding recommendation "transaction id”, “serial no”" for parameter "slow_query_log" due to low confidence (4.3123061914229766e-05)
Creating hints for document 28
Creating hints for document 29
Creating hints for document 30
Creating hints for document 31
Excluding recommendation "(`idx_user_name`,`idx_user_id" for parameter "idx_user_name" due to low confidence (0.04898414760828018)
Excluding recommendation "(`idx_user_name`,`" for parameter "idx_user_id" due to low confidence (0.030487965792417526)
Excluding recommendation "
PrevNext
Platinum Sponsors
" for parameter "mysql_native_password_proxy_users" due to low confidence (5.289208274916746e-05)
Creating hints for document 32
Adding hint TuningHint(doc_id=32, param=<re.Match object; span=(166, 177), match='total_sales'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation='1, 1, 3000', passage="!-- let's add a row in the sales base table\nINSERT INTO sales (id, item, store_id, customer_id, amount)\nVALUES(8, 'Gaming PC Super ProXXL', 1, 1, 3000);\nSELECT city, total_sales FROM city_sales WHERE city = 'Paris' query_prealloc_size ", float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.06920982152223587
Adding hint TuningHint(doc_id=32, param=<re.Match object; span=(166, 177), match='total_sales'>, value=<re.Match object; span=(3, 4), match='1'>, recommendation='1, 1, 3000', passage="!-- let's add a row in the sales base table\nINSERT INTO sales (id, item, store_id, customer_id, amount)\nVALUES(8, 'Gaming PC Super ProXXL', 1, 1, 3000);\nSELECT city, total_sales FROM city_sales WHERE city = 'Paris' query_prealloc_size ", float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.06920982152223587
Adding hint TuningHint(doc_id=32, param=<re.Match object; span=(166, 177), match='total_sales'>, value=<re.Match object; span=(6, 10), match='3000'>, recommendation='1, 1, 3000', passage="!-- let's add a row in the sales base table\nINSERT INTO sales (id, item, store_id, customer_id, amount)\nVALUES(8, 'Gaming PC Super ProXXL', 1, 1, 3000);\nSELECT city, total_sales FROM city_sales WHERE city = 'Paris' query_prealloc_size ", float_val=3000.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.06920982152223587
Excluding recommendation "8, 'Gaming PC Super ProXXL', 1, 1, 3000" for parameter "query_prealloc_size" due to low confidence (0.017863715067505836)
Excluding recommendation "8, 'Gaming PC Super ProXXL', 1, 1, 3000" for parameter "city_sales" due to low confidence (0.04281650111079216)
Excluding recommendation "
" for parameter "concurrent_insert" due to low confidence (0.000954857503529638)
Excluding recommendation "
|-----|-----------|
|Paris|
690" for parameter "total_sales" due to low confidence (0.01587999425828457)
Excluding recommendation "city" for parameter "total_sales" due to low confidence (0.01732511818408966)
Adding hint TuningHint(doc_id=32, param=<re.Match object; span=(154, 173), match='query_prealloc_size'>, value=<re.Match object; span=(1, 5), match='3690'>, recommendation='\n3690', passage="REFRESH MATERIALIZED VIEW city_sales;\nSELECT city, total_sales FROM city_sales WHERE city = 'Paris'\n|city |total_sales|\n|-----|-----------|\n|Paris|\n3690| query_prealloc_size ", float_val=3690.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.06223117187619209
Adding hint TuningHint(doc_id=32, param=<re.Match object; span=(304, 336), match='max_concurrency_scaling_clusters'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation='1 (default) to 10', passage='By default, concurrency scaling is disabled, and you can enable it for any workload management (WLM) queue to scale to a virtually unlimited number of concurrent queries, with consistently fast query performance. You can control the maximum number of concurrency scaling clusters allowed by setting the “max_concurrency_scaling_clusters” parameter value from 1 (default) to 10 (contact support to raise this soft limit). The free billing credits provided for concurrency scaling is often enough and the majority of customers using this feature don’t end up paying extra for it. For more information about the concurrency scaling billing model see Concurrency Scaling pricing.\nYou can monitor and control the concurrency scaling usage and cost by creating daily, weekly, or monthly usage limits and instruct Amazon Redshift to automatically take action (such as logging, alerting or disabling further usage) if those limits are reached. For more information, see Managing usage limits in Amazon Redshift. log_slow_admin_statements ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.6617631912231445
Adding hint TuningHint(doc_id=32, param=<re.Match object; span=(304, 336), match='max_concurrency_scaling_clusters'>, value=<re.Match object; span=(15, 17), match='10'>, recommendation='1 (default) to 10', passage='By default, concurrency scaling is disabled, and you can enable it for any workload management (WLM) queue to scale to a virtually unlimited number of concurrent queries, with consistently fast query performance. You can control the maximum number of concurrency scaling clusters allowed by setting the “max_concurrency_scaling_clusters” parameter value from 1 (default) to 10 (contact support to raise this soft limit). The free billing credits provided for concurrency scaling is often enough and the majority of customers using this feature don’t end up paying extra for it. For more information about the concurrency scaling billing model see Concurrency Scaling pricing.\nYou can monitor and control the concurrency scaling usage and cost by creating daily, weekly, or monthly usage limits and instruct Amazon Redshift to automatically take action (such as logging, alerting or disabling further usage) if those limits are reached. For more information, see Managing usage limits in Amazon Redshift. log_slow_admin_statements ', float_val=10.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.6617631912231445
Excluding recommendation "1 (default) to 10" for parameter "log_slow_admin_statements" due to low confidence (5.959101144981105e-06)
Excluding recommendation "
" for parameter "columb_a" due to low confidence (0.0010284791933372617)
Excluding recommendation "
" for parameter "log_syslog_include_pid" due to low confidence (0.00045080395648255944)
Excluding recommendation "columb_a | lzo" for parameter "my_temp_table" due to low confidence (0.0437762551009655)
Excluding recommendation "
distkey" for parameter "tmp_table_size" due to low confidence (0.00015389481268357486)
Excluding recommendation "char(4" for parameter "column_b" due to low confidence (0.04900919273495674)
Excluding recommendation "
column_a varchar(128" for parameter "my_temp_table" due to low confidence (0.0018637960311025381)
Excluding recommendation "varchar(128" for parameter "column_a" due to low confidence (0.001617354340851307)
Excluding recommendation "1-second intervals" for parameter "max_length_for_sort_data" due to low confidence (0.0016958445776253939)
Excluding recommendation "number of Amazon Redshift Spectrum rows and MBs scanned by a query" for parameter "spectrum_scan_size_mb" due to low confidence (0.0005170432850718498)
Excluding recommendation "spectrum_scan_size_mb" for parameter "spectrum_scan_row_count" due to low confidence (0.00025043293135240674)
Excluding recommendation "Archived, “cold” sales data older than 5 years" for parameter "local_dwh" due to low confidence (1.6133830285980366e-05)
Adding hint TuningHint(doc_id=32, param=<re.Match object; span=(182, 194), match='ext_spectrum'>, value=<re.Match object; span=(39, 40), match='5'>, recommendation='Archived, “cold” sales data older than 5 years', passage='Historical sales data warehoused in a local Amazon Redshift database (represented as “local_dwh”)\nArchived, “cold” sales data older than 5 years stored on Amazon S3\xa0(represented as “ext_spectrum”)\nWe can create a late binding view in Amazon Redshift that allows you to merge and query data from all three sources. See the following code: local_infile ', float_val=5.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.1057967022061348
Excluding recommendation "three" for parameter "local_infile" due to low confidence (5.545831299968995e-06)
Excluding recommendation "between 1MB-1GB each" for parameter "stv_slices" due to low confidence (1.3283927728480194e-05)
Excluding recommendation "between 1MB-1GB each" for parameter "open_files_limit" due to low confidence (0.0002561876317486167)
Excluding recommendation "COUNT(*)" for parameter "number_of_slices" due to low confidence (0.0004124686820432544)
Creating hints for document 33
Excluding recommendation "     tuned-adm profile latency-performance" for parameter "low_priority_updates" due to low confidence (3.736106737051159e-05)
Excluding recommendation "disable" for parameter "intel_pstate" due to low confidence (0.0005738931940868497)
Excluding recommendation "intel_pstate=disable" for parameter "ntel_pstate" due to low confidence (0.0005285177612677217)
Excluding recommendation "maximum turbo frequency and power states" for parameter "log_slow_admin_statements" due to low confidence (0.012401246465742588)
Adding hint TuningHint(doc_id=33, param=<re.Match object; span=(246, 261), match='cpu_dma_latency'>, value=<re.Match object; span=(0, 1), match='0'>, recommendation='0', passage='You can apply the tuned-admin server profile for typical latency performance tuning. It disables the tuned and ktune power-saving mechanisms. The CPU speed mode changes to Performance. The I/O elevator is changed to Deadline for each device. The cpu_dma_latency parameter is registered with a value of 0 (the lowest possible latency) for power management QoS to limit latency where possible.\nUse the following Linux tools to measure maximum turbo frequency and power states: log_slow_admin_statements ', float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.3362024128437042
Creating hints for document 34
Creating hints for document 35
Excluding recommendation "if you need more" for parameter "error_log" due to low confidence (0.007102176081389189)
Adding hint TuningHint(doc_id=35, param=<re.Match object; span=(11242, 11256), match='max_input_vars'>, value=<re.Match object; span=(0, 4), match='1000'>, recommendation='1000', passage='Having a fast business website is essential for both Google ranking and overall conversion rate. Due to Kissmetrics, 40% of site visitors will abandon a page that takes three or more seconds to load. Earlier, the BBC calculated that they lost an additional 10% of users for every extra second their site took to load.\xa0In order to help our readers and customers in gaining higher speed results, we decided to publish a set of articles dedicated to the improvement of website performance using great hints from The Ultimate WordPress Speed Optimization Guide written by Johnny Nguyen.\xa0“Faster websites make more money, rank better, and improve overall user experience!” says Johnny.Today we will start with the web hosting optimization part. Each point will be marked with the level of required skills to implement and the impact it will bring.SKILL:BEGINNER – can Google and follow instructions.INTERMEDIATE – working as WordPress contractor.ADVANCED – programmer or server-admin.IMPACT:LOW – maybe 100-200ms difference. Possibly unnoticeable.MEDIUM – around 500ms difference.HIGH – 1 second difference or more.Your webhosting speed determines how fast it can process code, and how many visitors it can handle. Compare your website to a car. To make a car go faster, you either A) get a stronger engine and/or B) lighten the weight. For websites, the web-server is the “engine” and the code is the”weight”.The goal is to improve our web-server “engine” while decreasing code “weight”, ok?Changing your webhosting is one of the easiest ways to improve speed. Those of you on cheap $5/month shared webhosting will benefit the most from moving to a managed hosting service or even your own VPS. The difference will be night and day without any site changes. Moving from managed hosting to an optimized VPS or dedicated “bare metal” server will be another night-and-day jump.\xa0The difference isn’t only speed but also a matter of cost (savings). A fast server can handle more visitors than a slow one. If your server can handle double the traffic, theoretically the bill can be twice as cheap. Not a big deal for a small site but what about a huge ecommerce site with a $1k/month server bill? 50% cost reduction sounds mighty attractive!1. Choose nearby datacenter location (BEG, LOW-MED)Obviously, you should pick a server location that’s closest to your visitors. Ideally, you don’t want your DNS ping time more than 100ms from the server to your visitor’s computer. There are many implications depending on your needs.Local businesses should get a server as close to their visitors as possible. Keep it within 100ms or less, within 50ms is better. Check ping times with WonderNetwork.The USA is about 80ms from coast to coast. Canada and Mexico are close enough as well.All of Western Europe is only 40-50ms, very close.Asia is within 80ms between most countries.India/Pakistan, Australia/NZ, Africa are somewhat isolated. Local businesses there need a local datacenter. Even Singapore to Australia is borderline “far” by DNS standards (~150ms).South America can be unreliable infrastructure. For that reason, many companies in Central/South America still use US-based datacenters like in California, Texas, or Florida (Miami).If you have worldwide traffic (including Asia/Pacific) and no particular core region, I like USA west coast as perfect location for fast traffic to Europe and Asia.If you have only USA & Europe traffic and no particular core region, I like USA east coast for fast traffic to Europe.It’s also good to have a webhosting company on the same timezone as your core audience. That way they can (quickly) support or troubleshoot issues when most of your visitors are awake.Those of you thinking a CDN can make up for far server location (that’s not necessarily true!)Those of you hunting for dedicated nodes…the best is TIER-4 datacenter with four 9’s (99.9999% uptime guarantee). But good luck getting those guaranteed!Uptime calculator (99.9% uptime means 43min downtime per month)Nearest.host – cool site showing nearby server companies.2. Choose the right website hosting service (BEG, HIGH)Shared hosting ($5-30/month) – fine for small sites and low traffic up to 100k hits/month. No access to server configurations.VPS/cloud hosting ($30-300/month) – great for medium sites and traffic up to 30 million hits/month.Dedicated (bare metal) server ($200/month & up) – great for large sites with TONS of traffic.Buy the best that you can comfortably afford. A small website doesn’t need much power but it’s still noticeable when you get a better server and appreciated more than you think. Think of a new phone that opens apps just a fraction of a second quicker. You really can feel the difference and it improves user experience tremendously.Shared webhosting is usually slow because they stuff hundreds of customers/websites onto the same server (maximize profits). This increases slowdowns, unexpected crashes or server restarts, security attacks, and your email IP getting marked as spam.Shared hosting environments are also slow because they load many scripts/modules to maximize compatibility for as many users as possible. And without dedicated resources, your visitors end up waiting in line while the server is busy handling other websites first.VPS/Dedicated servers are faster because there’s more resources available per account and your resources are serving only your websites. You have more control over your environment, can configure it for your needs. VPS/dedicated can be costly or difficult to manage for regular users. There are cloud-panel services to help manage it and also fully-managed services where they take care of everything for you.Those unable to handle technical responsibilities of VPS can go for “premium shared hosting”. They don’t crowd the server as much but the performance (while better than regular shared hosting) will still be far behind a VPS.3. Choose a high performance web server (INT-ADV, HIGH)Use any web server software but Apache. The best is NGINX or LiteSpeed, or highly-optimized Apache (rare to find). The higher your traffic, the more noticeable the difference.NGINX shines at simple sites. Just set it and go. Not much settings to optimize. But once you have a complicated site, NGINX is a mixed bag. Some NGINX features aren’t easy to configure. If you have a server-admin to fine-tune, it’s great but many people don’t.LiteSpeed has more easy-accessible features than NGINX. Like when you need some things cached but not others, or dealing with server-level redirects via htaccess. LiteSpeed also has a WordPress cache plugin which NGINX doesn’t. That’s a HUGE advantage. (I personally prefer LiteSpeed.)OpenLiteSpeed is the free community version of LiteSpeed. It’s a great alternative for those wanting the free price of NGINX but the powerful LiteSpeed cache plugin.Some webhosts have the Apache+NGINX hybrid stack. I feel those are outdated now and makes for unnecessarily slower/heavier stack.If using Apache, MPM events are best (compared to worker or prefork).Keep your webserver updated. Later versions can speed up certain protocols and processes noticeably.4. Web server configuration (ADV, MED-HIGH)Most web servers come with safe/functional configurations right off the bat. Adequate for the average small site with little traffic. It’s when you get more traffic and more security attacks, or have more demanding apps that fine-tuning the configurations makes a big difference.Timeout – 30 to 60 seconds is a safe start. You can increase up to 600 or beyond if needed for long processes (import, export, backups). Keep in mind that allows poorly-coded processes or hack exploits to run out your server resources.# of child processes allowed – depends on the server environment. Default should be fine.Concurrent connections allowed – anywhere from 1-20k. Higher is not necessarily better!Keep alive – on, off, or LiteSpeed’s “smart keep-alive”. I think “on” is safer. If you have LiteSpeed, the smart keep-alive is awesome!Keep alive timeout – 3-5 seconds is a safe start. Increase if needed.How many threads, body/buffer size, workers, clients, etc….all that you can look up online. It depends on your server size and use scenario. Jump on forums and ask around or have a sys-admin configure for you. Keep in mind different admins have their own ways of configuring.The most important distinction for me is to decide whether this server should be set aggressive or conservative:AGGRESSIVE configuration – gives every site as much resources as possible. Good for low-tenant or dedicated servers.CONSERVATIVE configuration – gives every site as little resources as possible. Good for high-tenant or shared servers.5. Disable unused services (INT, HIGH)Many servers are automatically set up with all features running to make things easy for you. But they’re just like brand new computers with pre-installed software. Get rid of the ones you don’t use. Even if they don’t use much memory, they can still be bombarded by hackers and that eats resources.DNS – disable if you’re using external DNS service. (Cloudflare, DNSME, etc.)Email – disable if you’re using 3rd-party email. (G-Suite, MXroute, etc.)FTP/SFTP – disable if not using.Memcache/Redis – disable if you don’t use it.Other services – Varnish, Elastipress, etc.If you want to be OCD, scan your system for all listening ports and services.6. Remove unused server modules (ADV, LOW)Want to be even more OCD? Disable every single module not used by the server. Some of them are junk unused server stuff; others are unused Linux distro stuff. Old school Apache-compatible stacks or unoptimized control panels tend to have many unused modules enabled by default (while also not enabling ones you might need).Read documentation and check online before blindly removing or replacing them. The danger is you disable things you need (or worse, one that improves performance). You should make a list of disabled services/modules to reference later or give to a contractor when troubleshooting.7. Use the latest PHP version (INT-ADV, HIGH)The PHP version alone makes a HUGE difference.Use the latest PHP version possible! (Easily-configured from your webhosting control panel)For example, PHP 7.0 is 3 times faster than PHP 5.6.Even PHP 7.3 is 10% faster than PHP 7.2.At the time of this writing, PHP 7.4 is available.Be wary of any webhosts still using old PHP!Keeping your website PHP version updated is not only for speed but also security. The only issue is some themes or plugins may not be compatible with the latest PHP version. You’ll know because your site doesn’t work right, or looks weird. So test carefully and keep themes/plugins updated, which helps them stay compatible with the latest PHP.8. Recommended php.ini configurations (INT, MED)Most of you (on shared hosting) won’t even have access to these settings or know how to set them. But nonetheless, here are my recommendations.max_execution_time – lower (30-60 sec) is better to prevent resources hogs from lagging out the server. But you may need higher execution times for long processes like imports, exports, backups.max_input_time – lower (60 sec) is better. Increase only if you’re trying to import something that takes forever.max_input_vars – set to “1000”, unless some plugins need higher.memory_limit – try “256M” to be safe. Raise if you have heavy plugins. I like to set lower so I’m notified immediately when there are memory hogs. The “error_log” will tell you if you need more.zlib.output_compression – may or may not help. I leave it off.9. Use an updated MySQL fork version (INT-ADV, LOW)Most people only know of MySQL, which is now acquired/owned by Oracle. There’s also MariaDB (a fork of MySQL by its original creators) and Percona, and also others.MySQL 8 is much better than MySQL 5.7.But it’s better if you can use MariaDB over MySQL. Community-friendly and better performance than vanilla MySQL 5.7.Use the latest MariaDB version that you can.Whatever you do, just don’t use MySQL 5.7.What about Percona? What about the other 3rd-party MySQL-compatible forks? For most sites, it makes little difference if any. Don’t forget to backup your database before changing or upgrading MySQL.MySQL vs MariaDB vs Percona10. Convert MySQL tables from MyISAM to InnoDB (BEG, LOW)Make sure your tables are set to InnoDB instead of MyISAM.InnoDB is newer and regarded as being better overall (faster, safer).MyISAM can be faster in some scenarios (when mostly read-only).You can convert manually in phpMyAdmin or use a plugin (Servebolt Optimizer or LiteSpeed Cache). Can delete the plugin afterwards if you don’t need it.11. Tuning MySQL configurations (ADV, LOW)Usually not required (or noticeably-beneficial) for the average site but can help tremendously for large sites with high traffic and varying query lengths.You can run MySQLTuner for general recommendations or ask around the sys-admin community to see what everyone else uses.Buffer size, packet size, cache, connections, cache, stack, etc…are all among the general things to tune.Simple Linode guide.When trying out random configurations online or copying somebody else’s, please make sure their environment is similar to yours. The main distinctions are:server size, resources availablehow many clients/sites on serverhow many end users on serverhow much traffichow big are the siteswhat kind of read/write behaviorIt’s important to know whether their settings are for efficiency (high-tenant webhost) or aggressive performance (low-tenant webserver).12. Server full-page caching (ADV, HIGH)Full-page caching can help speed-up any website. But caching directly from the server is much more powerful and resource-efficient than PHP/application-level caching done through a plugin.Some Apache or NGINX servers use Varnish – ugghhh, outdated. Don’t use Varnish proxy. Just upgrade to pure-LiteSpeed or pure-NGINX stack.LiteSpeed servers can use LiteSpeed cache – powerful, many features, and comes with a handy WordPress cache plugin (called “LiteSpeed Cache”).NGINX servers can use FastCGI – great, super fast! While there’s no official NGINX cache plugin for WordPress, there are various “NGINX helper” plugins to facilitate basic cache functions (like purging).To be safe, you should disable caching on pages with forms, carts, or checkouts. Private pages (for logged-in users) CAN be cached but don’t mess with that unless you have that much private traffic and ready to spend hours configuring private cache.You can only enable server-level caching if you own or have access to the server. Otherwise, your webhost decides what caching options you have.Shared hosting usually allows all caching plugins.Managed hosting usually limits you to only their proprietary one.13. Memory object-caching (ADV, LOW-HIGH)Object-caching caches only the database queries instead of the entire page html. This technically makes it “slower” than full-page caching (since you’re not caching the entire page) but useful for speeding up dynamic pages or private pages (logged-in users, admin backend) that can’t be static-cached.Any site with lots of constantly-refreshed data on frontend, or lots of numbers and reports on backend…would stand to benefit from object caching. Mostly-static sites or low-traffic sites would not benefit from object-caching at all; don’t use it on them…it can make them slower!Redis is the gold standard in object caching now. It’s superior to the older memcache in almost every way.Memcache is only used in rare situations where Redis doesn’t work or is slower.If your data doesn’t change much, you can set longer object caching times (e.g. 60 mins and up). Longer times means fewer database queries.Otherwise, stick with the default 5-10 mins to be safe…unless you don’t mind users seeing stale data.Object caching can be managed by WordPress plugins. Most ideal if you have one cache plugin to manage both full-page caching and object caching.You can get ~25% faster object caching by using a Unix SocketUNIX sockets are run from a lower-level layer on the OSI networking model and therefore faster than standard TCP sockets.Redis and Memcache UNIX socket configuration guides for CentOS.Redis and Memcache UNIX socket configuration guides for Ubuntu.Note: with UNIX socket enabled, only one server user account (and presumably all sites by that user) can use object caching. So you can’t use this if you plan to have multiple server users deploying object cache.Some background on memory-caching…Memory-caching is the gold standard in caching, because cache runs faster from memory than than from disk. The issue is we have limited amounts of memory (most of it already used for applications) so we can’t store the entire site cache in there. It matters less nowadays anyway since server disks are so much faster now (thanks to SSD technology).Sure memory is more abundant now too but then again, applications are bigger. You may have heard of others loading their entire site into memory…some using the cache route, others by mounting their WordPress directory into memory. It works great if your site is small enough but for most people: your memory is only big enough to store database queries, anything else you want to cache will be stored on your disk.14. Use the latest HTTP protocol (BEG, HIGH)HTTP/2 loads browser requests so much faster than HTTP/1 (thanks to parallelization). It feels like 3 times faster to me.You should be using HTTP/2 or even HTTP/3 (recently released).Avoid older web servers still on the archaic HTTP/1.Check your site for HTTP/2 and HTTP/3.Using HTTP/2 requires HTTPS/SSL. If your site isn’t in HTTPS, do it now!15. Content encoding (INT, HIGH)GZIP is so 2016. Every web-server should have BROTLI compression nowadays. It’s superior to GZIP (produces smaller files AND in less time). But shockingly, BROTLI still isn’t available on all web-servers.If using BROTLI – set static compression to 4.If using GZIP – set dynamic compression to 1, static compression to 6.You can push static compression levels higher if your CPU is strong (or low-usage server) and/or your static content is cached for a long time (long expiry times). If you’re using a CDN or Cloudflare, make sure you enable BROTLI compression there as well.16. Control-panel (INT, HIGH)This issue matters only for VPS users. Control panels used to be critiqued for the initial weight they put on the server. That’s because control panels were originally designed for large dedicated servers, but have since been optimized for smaller VPS. While it’s true that having no control panel is lighter than having one, it makes day-to-day tasks harder. Their footprint is now negligible considering how useful panels can be.The best performing control panel is one that fits your needs.Allows you to pick the web server of your choice – NGINX or LiteSpeed.Easily configure redirects at server level – instead of slower PHP-level redirection plugin.Easily configure granular caching rules – choosing what and what not to cache.Easy to manage – for you or your sys-admin.Can cage users – preventing resource-hogs on high-tenant servers.Secure against hacks – as hacking attempts eat many resources.Easy to use – for you or your clients.17. Use external DNS service (INT, LOW)Lower DNS latency (small benefit)Easy to update DNS (convenience)Will using an external DNS like Cloudflare or DNS Made Easy make a world of difference in terms of webhosting speed? I think it improves lookup time but not so noticeable unless your previous DNS server was a piece of junk by cheap webhost.The main benefit for me is how quickly I can redirect things. Suppose you get hacked and need to redirect through a security proxy. Or maybe you’re switching certain aspects of your site to another server. In moments like this, having a DNS service is so convenient. You can switch things over with very little downtime, and even switch them back quickly if there’s an issue.DNS services may seem like an extra hassle to setup, but once in place they allow you to integrate new services and mitigate performance issues so much faster.18. Run WP-cron from your server (BEG, MED)Many WordPress tasks need a trigger to function. Such as sending out system emails, run backups, release scheduled posts. By default, WordPress uses a function called WP-Cron (conveniently located at yourdomain.com/wp-cron.php). It works by checking (and executing) for any pending tasks any time someone visits the website. It’s great for small sites, but terrible if you have tons of traffic (triggering many unnecessary cron-checks). Also an obvious DDOS vulnerability.The sensible thing is to disable WP-cron and use a real cron job whether from your server or an external cron service. Some cron jobs visit the website directly. Others go through the Linux directory. Use whichever one works. I think a 5-minute interval is good.19. Caging users & resource limits (ADV, MED-HIGH)Do you have many sites or clients on the same machine? Are you unable to police them all effectively? If you’re losing control of your tenants, it’s probably time to limit their resources. I’ll start you off with a few tactics below. You look up the rest.Cloudlinux & CageFS – limit CPU and memory usageServer-wide bans on cache-prebuilding, broken-link checkers, and other resource hogs.Decrease php execution time.Global configs blocking the usual offenders, bots, etc.Worst-case scenario, just split off some clients onto another server. Split them up by size, space usage, traffic amount, whatever you want.19. Caging users & resource limits (ADV, MED-HIGH)Do you have many sites or clients on the same machine? Are you unable to police them all effectively? If you’re losing control of your tenants, it’s probably time to limit their resources. I’ll start you off with a few tactics below. You look up the rest.Cloudlinux & CageFS – limit CPU and memory usageServer-wide bans on cache-prebuilding, broken-link checkers, and other resource hogs.Decrease php execution time.Global configs blocking the usual offenders, bots, etc.Worst-case scenario, just split off some clients onto another server. Split them up by size, space usage, traffic amount, whatever you want.20. Tracking down resource hogs (ADV, MED-HIGH)We often run into slow server issues with no obvious clue of where to look. Today, it’s this client. Tomorrow, it’s that client. It seems any site can be the culprit on any given day. When you have so many clients, and none of them can afford switching plugins on and off, it is really really difficult to track down the problem.Here are some ideas:Check server logs – are you being hacked? Are there excessive requests?Check server monitors – which users are hogging the CPU, memory, and bandwidth?Once you know which site it is…check WordPress error log. Run Query Monitor.Of course, it might not even happen all the time. You have to track down what users or processes were doing when the slowdown happened.Sometimes you’ll need more of a developer mentality. What plugin was updated last? Any new themes or plugins that were custom-coded? (Check for memory-exhaustive commands.) Yes, you can use applications monitors like New Relic but for me, it’s overkill. The trickiest problems are when it seems like every site is the problem. Or also when the server load is low but the sites are still slow. Good luck!In the next part of this blog series we’ll cover caching optimization for your websites, so stay tuned. For a full version of the article go to The Ultimate WordPress Speed Optimization Guide.Need an optimized WordPress hosting that meets the needs of your project? Get in touch with Jelastic for choosing the best option and receiving technical assistance while migration.Related ArticlesEnterprise WordPress Hosting: Automatic Scaling and High AvailabilityWordPress Hosting in Elastic Standalone ContainerHow to Migrate a WordPress Site to Jelastic PaaSSetup WordPress Multisite Network with Domain Mapping and CDNWebinar Summary: WordPress Cluster for Enterprise High Availability and On-Demand ScalingSubscribe to get the latest updates\nGET STARTED FOR FREE\nE-mail\nSearch\nCategoriesDevelopmentHosting BusinessMulti-CloudWordPressDatabasesJavaContainersKubernetesUse CasesNews and ReleasesSolution innodb_page_cleaners ', float_val=1000.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.2125418335199356
Adding hint TuningHint(doc_id=35, param=<re.Match object; span=(11129, 11143), match='max_input_time'>, value=<re.Match object; span=(7, 9), match='60'>, recommendation='lower (60 sec', passage='Having a fast business website is essential for both Google ranking and overall conversion rate. Due to Kissmetrics, 40% of site visitors will abandon a page that takes three or more seconds to load. Earlier, the BBC calculated that they lost an additional 10% of users for every extra second their site took to load.\xa0In order to help our readers and customers in gaining higher speed results, we decided to publish a set of articles dedicated to the improvement of website performance using great hints from The Ultimate WordPress Speed Optimization Guide written by Johnny Nguyen.\xa0“Faster websites make more money, rank better, and improve overall user experience!” says Johnny.Today we will start with the web hosting optimization part. Each point will be marked with the level of required skills to implement and the impact it will bring.SKILL:BEGINNER – can Google and follow instructions.INTERMEDIATE – working as WordPress contractor.ADVANCED – programmer or server-admin.IMPACT:LOW – maybe 100-200ms difference. Possibly unnoticeable.MEDIUM – around 500ms difference.HIGH – 1 second difference or more.Your webhosting speed determines how fast it can process code, and how many visitors it can handle. Compare your website to a car. To make a car go faster, you either A) get a stronger engine and/or B) lighten the weight. For websites, the web-server is the “engine” and the code is the”weight”.The goal is to improve our web-server “engine” while decreasing code “weight”, ok?Changing your webhosting is one of the easiest ways to improve speed. Those of you on cheap $5/month shared webhosting will benefit the most from moving to a managed hosting service or even your own VPS. The difference will be night and day without any site changes. Moving from managed hosting to an optimized VPS or dedicated “bare metal” server will be another night-and-day jump.\xa0The difference isn’t only speed but also a matter of cost (savings). A fast server can handle more visitors than a slow one. If your server can handle double the traffic, theoretically the bill can be twice as cheap. Not a big deal for a small site but what about a huge ecommerce site with a $1k/month server bill? 50% cost reduction sounds mighty attractive!1. Choose nearby datacenter location (BEG, LOW-MED)Obviously, you should pick a server location that’s closest to your visitors. Ideally, you don’t want your DNS ping time more than 100ms from the server to your visitor’s computer. There are many implications depending on your needs.Local businesses should get a server as close to their visitors as possible. Keep it within 100ms or less, within 50ms is better. Check ping times with WonderNetwork.The USA is about 80ms from coast to coast. Canada and Mexico are close enough as well.All of Western Europe is only 40-50ms, very close.Asia is within 80ms between most countries.India/Pakistan, Australia/NZ, Africa are somewhat isolated. Local businesses there need a local datacenter. Even Singapore to Australia is borderline “far” by DNS standards (~150ms).South America can be unreliable infrastructure. For that reason, many companies in Central/South America still use US-based datacenters like in California, Texas, or Florida (Miami).If you have worldwide traffic (including Asia/Pacific) and no particular core region, I like USA west coast as perfect location for fast traffic to Europe and Asia.If you have only USA & Europe traffic and no particular core region, I like USA east coast for fast traffic to Europe.It’s also good to have a webhosting company on the same timezone as your core audience. That way they can (quickly) support or troubleshoot issues when most of your visitors are awake.Those of you thinking a CDN can make up for far server location (that’s not necessarily true!)Those of you hunting for dedicated nodes…the best is TIER-4 datacenter with four 9’s (99.9999% uptime guarantee). But good luck getting those guaranteed!Uptime calculator (99.9% uptime means 43min downtime per month)Nearest.host – cool site showing nearby server companies.2. Choose the right website hosting service (BEG, HIGH)Shared hosting ($5-30/month) – fine for small sites and low traffic up to 100k hits/month. No access to server configurations.VPS/cloud hosting ($30-300/month) – great for medium sites and traffic up to 30 million hits/month.Dedicated (bare metal) server ($200/month & up) – great for large sites with TONS of traffic.Buy the best that you can comfortably afford. A small website doesn’t need much power but it’s still noticeable when you get a better server and appreciated more than you think. Think of a new phone that opens apps just a fraction of a second quicker. You really can feel the difference and it improves user experience tremendously.Shared webhosting is usually slow because they stuff hundreds of customers/websites onto the same server (maximize profits). This increases slowdowns, unexpected crashes or server restarts, security attacks, and your email IP getting marked as spam.Shared hosting environments are also slow because they load many scripts/modules to maximize compatibility for as many users as possible. And without dedicated resources, your visitors end up waiting in line while the server is busy handling other websites first.VPS/Dedicated servers are faster because there’s more resources available per account and your resources are serving only your websites. You have more control over your environment, can configure it for your needs. VPS/dedicated can be costly or difficult to manage for regular users. There are cloud-panel services to help manage it and also fully-managed services where they take care of everything for you.Those unable to handle technical responsibilities of VPS can go for “premium shared hosting”. They don’t crowd the server as much but the performance (while better than regular shared hosting) will still be far behind a VPS.3. Choose a high performance web server (INT-ADV, HIGH)Use any web server software but Apache. The best is NGINX or LiteSpeed, or highly-optimized Apache (rare to find). The higher your traffic, the more noticeable the difference.NGINX shines at simple sites. Just set it and go. Not much settings to optimize. But once you have a complicated site, NGINX is a mixed bag. Some NGINX features aren’t easy to configure. If you have a server-admin to fine-tune, it’s great but many people don’t.LiteSpeed has more easy-accessible features than NGINX. Like when you need some things cached but not others, or dealing with server-level redirects via htaccess. LiteSpeed also has a WordPress cache plugin which NGINX doesn’t. That’s a HUGE advantage. (I personally prefer LiteSpeed.)OpenLiteSpeed is the free community version of LiteSpeed. It’s a great alternative for those wanting the free price of NGINX but the powerful LiteSpeed cache plugin.Some webhosts have the Apache+NGINX hybrid stack. I feel those are outdated now and makes for unnecessarily slower/heavier stack.If using Apache, MPM events are best (compared to worker or prefork).Keep your webserver updated. Later versions can speed up certain protocols and processes noticeably.4. Web server configuration (ADV, MED-HIGH)Most web servers come with safe/functional configurations right off the bat. Adequate for the average small site with little traffic. It’s when you get more traffic and more security attacks, or have more demanding apps that fine-tuning the configurations makes a big difference.Timeout – 30 to 60 seconds is a safe start. You can increase up to 600 or beyond if needed for long processes (import, export, backups). Keep in mind that allows poorly-coded processes or hack exploits to run out your server resources.# of child processes allowed – depends on the server environment. Default should be fine.Concurrent connections allowed – anywhere from 1-20k. Higher is not necessarily better!Keep alive – on, off, or LiteSpeed’s “smart keep-alive”. I think “on” is safer. If you have LiteSpeed, the smart keep-alive is awesome!Keep alive timeout – 3-5 seconds is a safe start. Increase if needed.How many threads, body/buffer size, workers, clients, etc….all that you can look up online. It depends on your server size and use scenario. Jump on forums and ask around or have a sys-admin configure for you. Keep in mind different admins have their own ways of configuring.The most important distinction for me is to decide whether this server should be set aggressive or conservative:AGGRESSIVE configuration – gives every site as much resources as possible. Good for low-tenant or dedicated servers.CONSERVATIVE configuration – gives every site as little resources as possible. Good for high-tenant or shared servers.5. Disable unused services (INT, HIGH)Many servers are automatically set up with all features running to make things easy for you. But they’re just like brand new computers with pre-installed software. Get rid of the ones you don’t use. Even if they don’t use much memory, they can still be bombarded by hackers and that eats resources.DNS – disable if you’re using external DNS service. (Cloudflare, DNSME, etc.)Email – disable if you’re using 3rd-party email. (G-Suite, MXroute, etc.)FTP/SFTP – disable if not using.Memcache/Redis – disable if you don’t use it.Other services – Varnish, Elastipress, etc.If you want to be OCD, scan your system for all listening ports and services.6. Remove unused server modules (ADV, LOW)Want to be even more OCD? Disable every single module not used by the server. Some of them are junk unused server stuff; others are unused Linux distro stuff. Old school Apache-compatible stacks or unoptimized control panels tend to have many unused modules enabled by default (while also not enabling ones you might need).Read documentation and check online before blindly removing or replacing them. The danger is you disable things you need (or worse, one that improves performance). You should make a list of disabled services/modules to reference later or give to a contractor when troubleshooting.7. Use the latest PHP version (INT-ADV, HIGH)The PHP version alone makes a HUGE difference.Use the latest PHP version possible! (Easily-configured from your webhosting control panel)For example, PHP 7.0 is 3 times faster than PHP 5.6.Even PHP 7.3 is 10% faster than PHP 7.2.At the time of this writing, PHP 7.4 is available.Be wary of any webhosts still using old PHP!Keeping your website PHP version updated is not only for speed but also security. The only issue is some themes or plugins may not be compatible with the latest PHP version. You’ll know because your site doesn’t work right, or looks weird. So test carefully and keep themes/plugins updated, which helps them stay compatible with the latest PHP.8. Recommended php.ini configurations (INT, MED)Most of you (on shared hosting) won’t even have access to these settings or know how to set them. But nonetheless, here are my recommendations.max_execution_time – lower (30-60 sec) is better to prevent resources hogs from lagging out the server. But you may need higher execution times for long processes like imports, exports, backups.max_input_time – lower (60 sec) is better. Increase only if you’re trying to import something that takes forever.max_input_vars – set to “1000”, unless some plugins need higher.memory_limit – try “256M” to be safe. Raise if you have heavy plugins. I like to set lower so I’m notified immediately when there are memory hogs. The “error_log” will tell you if you need more.zlib.output_compression – may or may not help. I leave it off.9. Use an updated MySQL fork version (INT-ADV, LOW)Most people only know of MySQL, which is now acquired/owned by Oracle. There’s also MariaDB (a fork of MySQL by its original creators) and Percona, and also others.MySQL 8 is much better than MySQL 5.7.But it’s better if you can use MariaDB over MySQL. Community-friendly and better performance than vanilla MySQL 5.7.Use the latest MariaDB version that you can.Whatever you do, just don’t use MySQL 5.7.What about Percona? What about the other 3rd-party MySQL-compatible forks? For most sites, it makes little difference if any. Don’t forget to backup your database before changing or upgrading MySQL.MySQL vs MariaDB vs Percona10. Convert MySQL tables from MyISAM to InnoDB (BEG, LOW)Make sure your tables are set to InnoDB instead of MyISAM.InnoDB is newer and regarded as being better overall (faster, safer).MyISAM can be faster in some scenarios (when mostly read-only).You can convert manually in phpMyAdmin or use a plugin (Servebolt Optimizer or LiteSpeed Cache). Can delete the plugin afterwards if you don’t need it.11. Tuning MySQL configurations (ADV, LOW)Usually not required (or noticeably-beneficial) for the average site but can help tremendously for large sites with high traffic and varying query lengths.You can run MySQLTuner for general recommendations or ask around the sys-admin community to see what everyone else uses.Buffer size, packet size, cache, connections, cache, stack, etc…are all among the general things to tune.Simple Linode guide.When trying out random configurations online or copying somebody else’s, please make sure their environment is similar to yours. The main distinctions are:server size, resources availablehow many clients/sites on serverhow many end users on serverhow much traffichow big are the siteswhat kind of read/write behaviorIt’s important to know whether their settings are for efficiency (high-tenant webhost) or aggressive performance (low-tenant webserver).12. Server full-page caching (ADV, HIGH)Full-page caching can help speed-up any website. But caching directly from the server is much more powerful and resource-efficient than PHP/application-level caching done through a plugin.Some Apache or NGINX servers use Varnish – ugghhh, outdated. Don’t use Varnish proxy. Just upgrade to pure-LiteSpeed or pure-NGINX stack.LiteSpeed servers can use LiteSpeed cache – powerful, many features, and comes with a handy WordPress cache plugin (called “LiteSpeed Cache”).NGINX servers can use FastCGI – great, super fast! While there’s no official NGINX cache plugin for WordPress, there are various “NGINX helper” plugins to facilitate basic cache functions (like purging).To be safe, you should disable caching on pages with forms, carts, or checkouts. Private pages (for logged-in users) CAN be cached but don’t mess with that unless you have that much private traffic and ready to spend hours configuring private cache.You can only enable server-level caching if you own or have access to the server. Otherwise, your webhost decides what caching options you have.Shared hosting usually allows all caching plugins.Managed hosting usually limits you to only their proprietary one.13. Memory object-caching (ADV, LOW-HIGH)Object-caching caches only the database queries instead of the entire page html. This technically makes it “slower” than full-page caching (since you’re not caching the entire page) but useful for speeding up dynamic pages or private pages (logged-in users, admin backend) that can’t be static-cached.Any site with lots of constantly-refreshed data on frontend, or lots of numbers and reports on backend…would stand to benefit from object caching. Mostly-static sites or low-traffic sites would not benefit from object-caching at all; don’t use it on them…it can make them slower!Redis is the gold standard in object caching now. It’s superior to the older memcache in almost every way.Memcache is only used in rare situations where Redis doesn’t work or is slower.If your data doesn’t change much, you can set longer object caching times (e.g. 60 mins and up). Longer times means fewer database queries.Otherwise, stick with the default 5-10 mins to be safe…unless you don’t mind users seeing stale data.Object caching can be managed by WordPress plugins. Most ideal if you have one cache plugin to manage both full-page caching and object caching.You can get ~25% faster object caching by using a Unix SocketUNIX sockets are run from a lower-level layer on the OSI networking model and therefore faster than standard TCP sockets.Redis and Memcache UNIX socket configuration guides for CentOS.Redis and Memcache UNIX socket configuration guides for Ubuntu.Note: with UNIX socket enabled, only one server user account (and presumably all sites by that user) can use object caching. So you can’t use this if you plan to have multiple server users deploying object cache.Some background on memory-caching…Memory-caching is the gold standard in caching, because cache runs faster from memory than than from disk. The issue is we have limited amounts of memory (most of it already used for applications) so we can’t store the entire site cache in there. It matters less nowadays anyway since server disks are so much faster now (thanks to SSD technology).Sure memory is more abundant now too but then again, applications are bigger. You may have heard of others loading their entire site into memory…some using the cache route, others by mounting their WordPress directory into memory. It works great if your site is small enough but for most people: your memory is only big enough to store database queries, anything else you want to cache will be stored on your disk.14. Use the latest HTTP protocol (BEG, HIGH)HTTP/2 loads browser requests so much faster than HTTP/1 (thanks to parallelization). It feels like 3 times faster to me.You should be using HTTP/2 or even HTTP/3 (recently released).Avoid older web servers still on the archaic HTTP/1.Check your site for HTTP/2 and HTTP/3.Using HTTP/2 requires HTTPS/SSL. If your site isn’t in HTTPS, do it now!15. Content encoding (INT, HIGH)GZIP is so 2016. Every web-server should have BROTLI compression nowadays. It’s superior to GZIP (produces smaller files AND in less time). But shockingly, BROTLI still isn’t available on all web-servers.If using BROTLI – set static compression to 4.If using GZIP – set dynamic compression to 1, static compression to 6.You can push static compression levels higher if your CPU is strong (or low-usage server) and/or your static content is cached for a long time (long expiry times). If you’re using a CDN or Cloudflare, make sure you enable BROTLI compression there as well.16. Control-panel (INT, HIGH)This issue matters only for VPS users. Control panels used to be critiqued for the initial weight they put on the server. That’s because control panels were originally designed for large dedicated servers, but have since been optimized for smaller VPS. While it’s true that having no control panel is lighter than having one, it makes day-to-day tasks harder. Their footprint is now negligible considering how useful panels can be.The best performing control panel is one that fits your needs.Allows you to pick the web server of your choice – NGINX or LiteSpeed.Easily configure redirects at server level – instead of slower PHP-level redirection plugin.Easily configure granular caching rules – choosing what and what not to cache.Easy to manage – for you or your sys-admin.Can cage users – preventing resource-hogs on high-tenant servers.Secure against hacks – as hacking attempts eat many resources.Easy to use – for you or your clients.17. Use external DNS service (INT, LOW)Lower DNS latency (small benefit)Easy to update DNS (convenience)Will using an external DNS like Cloudflare or DNS Made Easy make a world of difference in terms of webhosting speed? I think it improves lookup time but not so noticeable unless your previous DNS server was a piece of junk by cheap webhost.The main benefit for me is how quickly I can redirect things. Suppose you get hacked and need to redirect through a security proxy. Or maybe you’re switching certain aspects of your site to another server. In moments like this, having a DNS service is so convenient. You can switch things over with very little downtime, and even switch them back quickly if there’s an issue.DNS services may seem like an extra hassle to setup, but once in place they allow you to integrate new services and mitigate performance issues so much faster.18. Run WP-cron from your server (BEG, MED)Many WordPress tasks need a trigger to function. Such as sending out system emails, run backups, release scheduled posts. By default, WordPress uses a function called WP-Cron (conveniently located at yourdomain.com/wp-cron.php). It works by checking (and executing) for any pending tasks any time someone visits the website. It’s great for small sites, but terrible if you have tons of traffic (triggering many unnecessary cron-checks). Also an obvious DDOS vulnerability.The sensible thing is to disable WP-cron and use a real cron job whether from your server or an external cron service. Some cron jobs visit the website directly. Others go through the Linux directory. Use whichever one works. I think a 5-minute interval is good.19. Caging users & resource limits (ADV, MED-HIGH)Do you have many sites or clients on the same machine? Are you unable to police them all effectively? If you’re losing control of your tenants, it’s probably time to limit their resources. I’ll start you off with a few tactics below. You look up the rest.Cloudlinux & CageFS – limit CPU and memory usageServer-wide bans on cache-prebuilding, broken-link checkers, and other resource hogs.Decrease php execution time.Global configs blocking the usual offenders, bots, etc.Worst-case scenario, just split off some clients onto another server. Split them up by size, space usage, traffic amount, whatever you want.19. Caging users & resource limits (ADV, MED-HIGH)Do you have many sites or clients on the same machine? Are you unable to police them all effectively? If you’re losing control of your tenants, it’s probably time to limit their resources. I’ll start you off with a few tactics below. You look up the rest.Cloudlinux & CageFS – limit CPU and memory usageServer-wide bans on cache-prebuilding, broken-link checkers, and other resource hogs.Decrease php execution time.Global configs blocking the usual offenders, bots, etc.Worst-case scenario, just split off some clients onto another server. Split them up by size, space usage, traffic amount, whatever you want.20. Tracking down resource hogs (ADV, MED-HIGH)We often run into slow server issues with no obvious clue of where to look. Today, it’s this client. Tomorrow, it’s that client. It seems any site can be the culprit on any given day. When you have so many clients, and none of them can afford switching plugins on and off, it is really really difficult to track down the problem.Here are some ideas:Check server logs – are you being hacked? Are there excessive requests?Check server monitors – which users are hogging the CPU, memory, and bandwidth?Once you know which site it is…check WordPress error log. Run Query Monitor.Of course, it might not even happen all the time. You have to track down what users or processes were doing when the slowdown happened.Sometimes you’ll need more of a developer mentality. What plugin was updated last? Any new themes or plugins that were custom-coded? (Check for memory-exhaustive commands.) Yes, you can use applications monitors like New Relic but for me, it’s overkill. The trickiest problems are when it seems like every site is the problem. Or also when the server load is low but the sites are still slow. Good luck!In the next part of this blog series we’ll cover caching optimization for your websites, so stay tuned. For a full version of the article go to The Ultimate WordPress Speed Optimization Guide.Need an optimized WordPress hosting that meets the needs of your project? Get in touch with Jelastic for choosing the best option and receiving technical assistance while migration.Related ArticlesEnterprise WordPress Hosting: Automatic Scaling and High AvailabilityWordPress Hosting in Elastic Standalone ContainerHow to Migrate a WordPress Site to Jelastic PaaSSetup WordPress Multisite Network with Domain Mapping and CDNWebinar Summary: WordPress Cluster for Enterprise High Availability and On-Demand ScalingSubscribe to get the latest updates\nGET STARTED FOR FREE\nE-mail\nSearch\nCategoriesDevelopmentHosting BusinessMulti-CloudWordPressDatabasesJavaContainersKubernetesUse CasesNews and ReleasesSolution innodb_page_cleaners ', float_val=60.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.0781671330332756
Excluding recommendation "INT-ADV, LOW" for parameter "output_compression" due to low confidence (0.004627527203410864)
Adding hint TuningHint(doc_id=35, param=<re.Match object; span=(11306, 11318), match='memory_limit'>, value=<re.Match object; span=(0, 4), match='256M'>, recommendation='256M”', passage='Having a fast business website is essential for both Google ranking and overall conversion rate. Due to Kissmetrics, 40% of site visitors will abandon a page that takes three or more seconds to load. Earlier, the BBC calculated that they lost an additional 10% of users for every extra second their site took to load.\xa0In order to help our readers and customers in gaining higher speed results, we decided to publish a set of articles dedicated to the improvement of website performance using great hints from The Ultimate WordPress Speed Optimization Guide written by Johnny Nguyen.\xa0“Faster websites make more money, rank better, and improve overall user experience!” says Johnny.Today we will start with the web hosting optimization part. Each point will be marked with the level of required skills to implement and the impact it will bring.SKILL:BEGINNER – can Google and follow instructions.INTERMEDIATE – working as WordPress contractor.ADVANCED – programmer or server-admin.IMPACT:LOW – maybe 100-200ms difference. Possibly unnoticeable.MEDIUM – around 500ms difference.HIGH – 1 second difference or more.Your webhosting speed determines how fast it can process code, and how many visitors it can handle. Compare your website to a car. To make a car go faster, you either A) get a stronger engine and/or B) lighten the weight. For websites, the web-server is the “engine” and the code is the”weight”.The goal is to improve our web-server “engine” while decreasing code “weight”, ok?Changing your webhosting is one of the easiest ways to improve speed. Those of you on cheap $5/month shared webhosting will benefit the most from moving to a managed hosting service or even your own VPS. The difference will be night and day without any site changes. Moving from managed hosting to an optimized VPS or dedicated “bare metal” server will be another night-and-day jump.\xa0The difference isn’t only speed but also a matter of cost (savings). A fast server can handle more visitors than a slow one. If your server can handle double the traffic, theoretically the bill can be twice as cheap. Not a big deal for a small site but what about a huge ecommerce site with a $1k/month server bill? 50% cost reduction sounds mighty attractive!1. Choose nearby datacenter location (BEG, LOW-MED)Obviously, you should pick a server location that’s closest to your visitors. Ideally, you don’t want your DNS ping time more than 100ms from the server to your visitor’s computer. There are many implications depending on your needs.Local businesses should get a server as close to their visitors as possible. Keep it within 100ms or less, within 50ms is better. Check ping times with WonderNetwork.The USA is about 80ms from coast to coast. Canada and Mexico are close enough as well.All of Western Europe is only 40-50ms, very close.Asia is within 80ms between most countries.India/Pakistan, Australia/NZ, Africa are somewhat isolated. Local businesses there need a local datacenter. Even Singapore to Australia is borderline “far” by DNS standards (~150ms).South America can be unreliable infrastructure. For that reason, many companies in Central/South America still use US-based datacenters like in California, Texas, or Florida (Miami).If you have worldwide traffic (including Asia/Pacific) and no particular core region, I like USA west coast as perfect location for fast traffic to Europe and Asia.If you have only USA & Europe traffic and no particular core region, I like USA east coast for fast traffic to Europe.It’s also good to have a webhosting company on the same timezone as your core audience. That way they can (quickly) support or troubleshoot issues when most of your visitors are awake.Those of you thinking a CDN can make up for far server location (that’s not necessarily true!)Those of you hunting for dedicated nodes…the best is TIER-4 datacenter with four 9’s (99.9999% uptime guarantee). But good luck getting those guaranteed!Uptime calculator (99.9% uptime means 43min downtime per month)Nearest.host – cool site showing nearby server companies.2. Choose the right website hosting service (BEG, HIGH)Shared hosting ($5-30/month) – fine for small sites and low traffic up to 100k hits/month. No access to server configurations.VPS/cloud hosting ($30-300/month) – great for medium sites and traffic up to 30 million hits/month.Dedicated (bare metal) server ($200/month & up) – great for large sites with TONS of traffic.Buy the best that you can comfortably afford. A small website doesn’t need much power but it’s still noticeable when you get a better server and appreciated more than you think. Think of a new phone that opens apps just a fraction of a second quicker. You really can feel the difference and it improves user experience tremendously.Shared webhosting is usually slow because they stuff hundreds of customers/websites onto the same server (maximize profits). This increases slowdowns, unexpected crashes or server restarts, security attacks, and your email IP getting marked as spam.Shared hosting environments are also slow because they load many scripts/modules to maximize compatibility for as many users as possible. And without dedicated resources, your visitors end up waiting in line while the server is busy handling other websites first.VPS/Dedicated servers are faster because there’s more resources available per account and your resources are serving only your websites. You have more control over your environment, can configure it for your needs. VPS/dedicated can be costly or difficult to manage for regular users. There are cloud-panel services to help manage it and also fully-managed services where they take care of everything for you.Those unable to handle technical responsibilities of VPS can go for “premium shared hosting”. They don’t crowd the server as much but the performance (while better than regular shared hosting) will still be far behind a VPS.3. Choose a high performance web server (INT-ADV, HIGH)Use any web server software but Apache. The best is NGINX or LiteSpeed, or highly-optimized Apache (rare to find). The higher your traffic, the more noticeable the difference.NGINX shines at simple sites. Just set it and go. Not much settings to optimize. But once you have a complicated site, NGINX is a mixed bag. Some NGINX features aren’t easy to configure. If you have a server-admin to fine-tune, it’s great but many people don’t.LiteSpeed has more easy-accessible features than NGINX. Like when you need some things cached but not others, or dealing with server-level redirects via htaccess. LiteSpeed also has a WordPress cache plugin which NGINX doesn’t. That’s a HUGE advantage. (I personally prefer LiteSpeed.)OpenLiteSpeed is the free community version of LiteSpeed. It’s a great alternative for those wanting the free price of NGINX but the powerful LiteSpeed cache plugin.Some webhosts have the Apache+NGINX hybrid stack. I feel those are outdated now and makes for unnecessarily slower/heavier stack.If using Apache, MPM events are best (compared to worker or prefork).Keep your webserver updated. Later versions can speed up certain protocols and processes noticeably.4. Web server configuration (ADV, MED-HIGH)Most web servers come with safe/functional configurations right off the bat. Adequate for the average small site with little traffic. It’s when you get more traffic and more security attacks, or have more demanding apps that fine-tuning the configurations makes a big difference.Timeout – 30 to 60 seconds is a safe start. You can increase up to 600 or beyond if needed for long processes (import, export, backups). Keep in mind that allows poorly-coded processes or hack exploits to run out your server resources.# of child processes allowed – depends on the server environment. Default should be fine.Concurrent connections allowed – anywhere from 1-20k. Higher is not necessarily better!Keep alive – on, off, or LiteSpeed’s “smart keep-alive”. I think “on” is safer. If you have LiteSpeed, the smart keep-alive is awesome!Keep alive timeout – 3-5 seconds is a safe start. Increase if needed.How many threads, body/buffer size, workers, clients, etc….all that you can look up online. It depends on your server size and use scenario. Jump on forums and ask around or have a sys-admin configure for you. Keep in mind different admins have their own ways of configuring.The most important distinction for me is to decide whether this server should be set aggressive or conservative:AGGRESSIVE configuration – gives every site as much resources as possible. Good for low-tenant or dedicated servers.CONSERVATIVE configuration – gives every site as little resources as possible. Good for high-tenant or shared servers.5. Disable unused services (INT, HIGH)Many servers are automatically set up with all features running to make things easy for you. But they’re just like brand new computers with pre-installed software. Get rid of the ones you don’t use. Even if they don’t use much memory, they can still be bombarded by hackers and that eats resources.DNS – disable if you’re using external DNS service. (Cloudflare, DNSME, etc.)Email – disable if you’re using 3rd-party email. (G-Suite, MXroute, etc.)FTP/SFTP – disable if not using.Memcache/Redis – disable if you don’t use it.Other services – Varnish, Elastipress, etc.If you want to be OCD, scan your system for all listening ports and services.6. Remove unused server modules (ADV, LOW)Want to be even more OCD? Disable every single module not used by the server. Some of them are junk unused server stuff; others are unused Linux distro stuff. Old school Apache-compatible stacks or unoptimized control panels tend to have many unused modules enabled by default (while also not enabling ones you might need).Read documentation and check online before blindly removing or replacing them. The danger is you disable things you need (or worse, one that improves performance). You should make a list of disabled services/modules to reference later or give to a contractor when troubleshooting.7. Use the latest PHP version (INT-ADV, HIGH)The PHP version alone makes a HUGE difference.Use the latest PHP version possible! (Easily-configured from your webhosting control panel)For example, PHP 7.0 is 3 times faster than PHP 5.6.Even PHP 7.3 is 10% faster than PHP 7.2.At the time of this writing, PHP 7.4 is available.Be wary of any webhosts still using old PHP!Keeping your website PHP version updated is not only for speed but also security. The only issue is some themes or plugins may not be compatible with the latest PHP version. You’ll know because your site doesn’t work right, or looks weird. So test carefully and keep themes/plugins updated, which helps them stay compatible with the latest PHP.8. Recommended php.ini configurations (INT, MED)Most of you (on shared hosting) won’t even have access to these settings or know how to set them. But nonetheless, here are my recommendations.max_execution_time – lower (30-60 sec) is better to prevent resources hogs from lagging out the server. But you may need higher execution times for long processes like imports, exports, backups.max_input_time – lower (60 sec) is better. Increase only if you’re trying to import something that takes forever.max_input_vars – set to “1000”, unless some plugins need higher.memory_limit – try “256M” to be safe. Raise if you have heavy plugins. I like to set lower so I’m notified immediately when there are memory hogs. The “error_log” will tell you if you need more.zlib.output_compression – may or may not help. I leave it off.9. Use an updated MySQL fork version (INT-ADV, LOW)Most people only know of MySQL, which is now acquired/owned by Oracle. There’s also MariaDB (a fork of MySQL by its original creators) and Percona, and also others.MySQL 8 is much better than MySQL 5.7.But it’s better if you can use MariaDB over MySQL. Community-friendly and better performance than vanilla MySQL 5.7.Use the latest MariaDB version that you can.Whatever you do, just don’t use MySQL 5.7.What about Percona? What about the other 3rd-party MySQL-compatible forks? For most sites, it makes little difference if any. Don’t forget to backup your database before changing or upgrading MySQL.MySQL vs MariaDB vs Percona10. Convert MySQL tables from MyISAM to InnoDB (BEG, LOW)Make sure your tables are set to InnoDB instead of MyISAM.InnoDB is newer and regarded as being better overall (faster, safer).MyISAM can be faster in some scenarios (when mostly read-only).You can convert manually in phpMyAdmin or use a plugin (Servebolt Optimizer or LiteSpeed Cache). Can delete the plugin afterwards if you don’t need it.11. Tuning MySQL configurations (ADV, LOW)Usually not required (or noticeably-beneficial) for the average site but can help tremendously for large sites with high traffic and varying query lengths.You can run MySQLTuner for general recommendations or ask around the sys-admin community to see what everyone else uses.Buffer size, packet size, cache, connections, cache, stack, etc…are all among the general things to tune.Simple Linode guide.When trying out random configurations online or copying somebody else’s, please make sure their environment is similar to yours. The main distinctions are:server size, resources availablehow many clients/sites on serverhow many end users on serverhow much traffichow big are the siteswhat kind of read/write behaviorIt’s important to know whether their settings are for efficiency (high-tenant webhost) or aggressive performance (low-tenant webserver).12. Server full-page caching (ADV, HIGH)Full-page caching can help speed-up any website. But caching directly from the server is much more powerful and resource-efficient than PHP/application-level caching done through a plugin.Some Apache or NGINX servers use Varnish – ugghhh, outdated. Don’t use Varnish proxy. Just upgrade to pure-LiteSpeed or pure-NGINX stack.LiteSpeed servers can use LiteSpeed cache – powerful, many features, and comes with a handy WordPress cache plugin (called “LiteSpeed Cache”).NGINX servers can use FastCGI – great, super fast! While there’s no official NGINX cache plugin for WordPress, there are various “NGINX helper” plugins to facilitate basic cache functions (like purging).To be safe, you should disable caching on pages with forms, carts, or checkouts. Private pages (for logged-in users) CAN be cached but don’t mess with that unless you have that much private traffic and ready to spend hours configuring private cache.You can only enable server-level caching if you own or have access to the server. Otherwise, your webhost decides what caching options you have.Shared hosting usually allows all caching plugins.Managed hosting usually limits you to only their proprietary one.13. Memory object-caching (ADV, LOW-HIGH)Object-caching caches only the database queries instead of the entire page html. This technically makes it “slower” than full-page caching (since you’re not caching the entire page) but useful for speeding up dynamic pages or private pages (logged-in users, admin backend) that can’t be static-cached.Any site with lots of constantly-refreshed data on frontend, or lots of numbers and reports on backend…would stand to benefit from object caching. Mostly-static sites or low-traffic sites would not benefit from object-caching at all; don’t use it on them…it can make them slower!Redis is the gold standard in object caching now. It’s superior to the older memcache in almost every way.Memcache is only used in rare situations where Redis doesn’t work or is slower.If your data doesn’t change much, you can set longer object caching times (e.g. 60 mins and up). Longer times means fewer database queries.Otherwise, stick with the default 5-10 mins to be safe…unless you don’t mind users seeing stale data.Object caching can be managed by WordPress plugins. Most ideal if you have one cache plugin to manage both full-page caching and object caching.You can get ~25% faster object caching by using a Unix SocketUNIX sockets are run from a lower-level layer on the OSI networking model and therefore faster than standard TCP sockets.Redis and Memcache UNIX socket configuration guides for CentOS.Redis and Memcache UNIX socket configuration guides for Ubuntu.Note: with UNIX socket enabled, only one server user account (and presumably all sites by that user) can use object caching. So you can’t use this if you plan to have multiple server users deploying object cache.Some background on memory-caching…Memory-caching is the gold standard in caching, because cache runs faster from memory than than from disk. The issue is we have limited amounts of memory (most of it already used for applications) so we can’t store the entire site cache in there. It matters less nowadays anyway since server disks are so much faster now (thanks to SSD technology).Sure memory is more abundant now too but then again, applications are bigger. You may have heard of others loading their entire site into memory…some using the cache route, others by mounting their WordPress directory into memory. It works great if your site is small enough but for most people: your memory is only big enough to store database queries, anything else you want to cache will be stored on your disk.14. Use the latest HTTP protocol (BEG, HIGH)HTTP/2 loads browser requests so much faster than HTTP/1 (thanks to parallelization). It feels like 3 times faster to me.You should be using HTTP/2 or even HTTP/3 (recently released).Avoid older web servers still on the archaic HTTP/1.Check your site for HTTP/2 and HTTP/3.Using HTTP/2 requires HTTPS/SSL. If your site isn’t in HTTPS, do it now!15. Content encoding (INT, HIGH)GZIP is so 2016. Every web-server should have BROTLI compression nowadays. It’s superior to GZIP (produces smaller files AND in less time). But shockingly, BROTLI still isn’t available on all web-servers.If using BROTLI – set static compression to 4.If using GZIP – set dynamic compression to 1, static compression to 6.You can push static compression levels higher if your CPU is strong (or low-usage server) and/or your static content is cached for a long time (long expiry times). If you’re using a CDN or Cloudflare, make sure you enable BROTLI compression there as well.16. Control-panel (INT, HIGH)This issue matters only for VPS users. Control panels used to be critiqued for the initial weight they put on the server. That’s because control panels were originally designed for large dedicated servers, but have since been optimized for smaller VPS. While it’s true that having no control panel is lighter than having one, it makes day-to-day tasks harder. Their footprint is now negligible considering how useful panels can be.The best performing control panel is one that fits your needs.Allows you to pick the web server of your choice – NGINX or LiteSpeed.Easily configure redirects at server level – instead of slower PHP-level redirection plugin.Easily configure granular caching rules – choosing what and what not to cache.Easy to manage – for you or your sys-admin.Can cage users – preventing resource-hogs on high-tenant servers.Secure against hacks – as hacking attempts eat many resources.Easy to use – for you or your clients.17. Use external DNS service (INT, LOW)Lower DNS latency (small benefit)Easy to update DNS (convenience)Will using an external DNS like Cloudflare or DNS Made Easy make a world of difference in terms of webhosting speed? I think it improves lookup time but not so noticeable unless your previous DNS server was a piece of junk by cheap webhost.The main benefit for me is how quickly I can redirect things. Suppose you get hacked and need to redirect through a security proxy. Or maybe you’re switching certain aspects of your site to another server. In moments like this, having a DNS service is so convenient. You can switch things over with very little downtime, and even switch them back quickly if there’s an issue.DNS services may seem like an extra hassle to setup, but once in place they allow you to integrate new services and mitigate performance issues so much faster.18. Run WP-cron from your server (BEG, MED)Many WordPress tasks need a trigger to function. Such as sending out system emails, run backups, release scheduled posts. By default, WordPress uses a function called WP-Cron (conveniently located at yourdomain.com/wp-cron.php). It works by checking (and executing) for any pending tasks any time someone visits the website. It’s great for small sites, but terrible if you have tons of traffic (triggering many unnecessary cron-checks). Also an obvious DDOS vulnerability.The sensible thing is to disable WP-cron and use a real cron job whether from your server or an external cron service. Some cron jobs visit the website directly. Others go through the Linux directory. Use whichever one works. I think a 5-minute interval is good.19. Caging users & resource limits (ADV, MED-HIGH)Do you have many sites or clients on the same machine? Are you unable to police them all effectively? If you’re losing control of your tenants, it’s probably time to limit their resources. I’ll start you off with a few tactics below. You look up the rest.Cloudlinux & CageFS – limit CPU and memory usageServer-wide bans on cache-prebuilding, broken-link checkers, and other resource hogs.Decrease php execution time.Global configs blocking the usual offenders, bots, etc.Worst-case scenario, just split off some clients onto another server. Split them up by size, space usage, traffic amount, whatever you want.19. Caging users & resource limits (ADV, MED-HIGH)Do you have many sites or clients on the same machine? Are you unable to police them all effectively? If you’re losing control of your tenants, it’s probably time to limit their resources. I’ll start you off with a few tactics below. You look up the rest.Cloudlinux & CageFS – limit CPU and memory usageServer-wide bans on cache-prebuilding, broken-link checkers, and other resource hogs.Decrease php execution time.Global configs blocking the usual offenders, bots, etc.Worst-case scenario, just split off some clients onto another server. Split them up by size, space usage, traffic amount, whatever you want.20. Tracking down resource hogs (ADV, MED-HIGH)We often run into slow server issues with no obvious clue of where to look. Today, it’s this client. Tomorrow, it’s that client. It seems any site can be the culprit on any given day. When you have so many clients, and none of them can afford switching plugins on and off, it is really really difficult to track down the problem.Here are some ideas:Check server logs – are you being hacked? Are there excessive requests?Check server monitors – which users are hogging the CPU, memory, and bandwidth?Once you know which site it is…check WordPress error log. Run Query Monitor.Of course, it might not even happen all the time. You have to track down what users or processes were doing when the slowdown happened.Sometimes you’ll need more of a developer mentality. What plugin was updated last? Any new themes or plugins that were custom-coded? (Check for memory-exhaustive commands.) Yes, you can use applications monitors like New Relic but for me, it’s overkill. The trickiest problems are when it seems like every site is the problem. Or also when the server load is low but the sites are still slow. Good luck!In the next part of this blog series we’ll cover caching optimization for your websites, so stay tuned. For a full version of the article go to The Ultimate WordPress Speed Optimization Guide.Need an optimized WordPress hosting that meets the needs of your project? Get in touch with Jelastic for choosing the best option and receiving technical assistance while migration.Related ArticlesEnterprise WordPress Hosting: Automatic Scaling and High AvailabilityWordPress Hosting in Elastic Standalone ContainerHow to Migrate a WordPress Site to Jelastic PaaSSetup WordPress Multisite Network with Domain Mapping and CDNWebinar Summary: WordPress Cluster for Enterprise High Availability and On-Demand ScalingSubscribe to get the latest updates\nGET STARTED FOR FREE\nE-mail\nSearch\nCategoriesDevelopmentHosting BusinessMulti-CloudWordPressDatabasesJavaContainersKubernetesUse CasesNews and ReleasesSolution innodb_page_cleaners ', float_val=256.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.22986075282096863
Creating hints for document 36
Excluding recommendation "
1" for parameter "row_number" due to low confidence (0.007676634006202221)
Excluding recommendation "
1" for parameter "slow_query_log" due to low confidence (0.0019307754701003432)
Excluding recommendation "GROUP BY, ORDER BY, and LIMIT 1" for parameter "regexp_like" due to low confidence (0.002124628284946084)
Adding hint TuningHint(doc_id=36, param=<re.Match object; span=(261, 283), match='lower_case_table_names'>, value=<re.Match object; span=(30, 31), match='1'>, recommendation='GROUP BY, ORDER BY, and LIMIT 1', passage="of GROUP BY, ORDER BY, and LIMIT 1.\nUse regular expressions instead of LIKE on\nlarge strings – Queries that include clauses such as LIKE\n'%string%' on large strings can be very\ncostly. Consider using the regexp_like() function and a regular expression instead. lower_case_table_names ", float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.13789887726306915
Excluding recommendation "max()" for parameter "thread_cache_size" due to low confidence (0.04179763421416283)
Creating hints for document 37
Creating hints for document 38
Creating hints for document 39
Excluding recommendation "RANGE_JOIN(r1, 0.1)" for parameter "multi_range_count" due to low confidence (0.008965094573795795)
Excluding recommendation "r1.start < r2.start + 100" for parameter "multi_range_count" due to low confidence (0.0034618142526596785)
Excluding recommendation "
$"left.end" > $"right.start"" for parameter "join_buffer_size" due to low confidence (0.002242935821413994)
Excluding recommendation "10" for parameter "range_join" due to low confidence (0.013504733331501484)
Adding hint TuningHint(doc_id=39, param=<re.Match object; span=(64, 74), match='range_join'>, value=<re.Match object; span=(0, 3), match='0.5'>, recommendation='0.5', passage='$"left.start" < $"right.end")\nval joined2 = df1\n.join(df2.hint("range_join", 0.5), $"left.type" === $"right.type" &&\n$"left.end" > $"right.start" && max_join_size ', float_val=0.5, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.10471159964799881
Excluding recommendation "
$"left.end" > $"right.start"" for parameter "max_join_size" due to low confidence (0.0015681034419685602)
Excluding recommendation "99.9th percentile divided by 100" for parameter "explicit_defaults_for_timestamp" due to low confidence (0.0013854345306754112)
Creating hints for document 40
Creating hints for document 41
Creating hints for document 42
Excluding recommendation "20 * 2" for parameter "lower_case_table_names" due to low confidence (0.00018720715888775885)
Excluding recommendation "20 * 2" for parameter "ccounts_managed" due to low confidence (0.00015823155990801752)
Excluding recommendation "20 * 2" for parameter "ccount_managed" due to low confidence (0.00020031025633215904)
Excluding recommendation "20 * 2" for parameter "ser_system" due to low confidence (0.0005626857746392488)
Creating hints for document 43
Creating hints for document 44
Creating hints for document 45
Creating hints for document 46
Excluding recommendation "without ordering inserts" for parameter "table_open_cache_instances" due to low confidence (0.008378822356462479)
Excluding recommendation "false" for parameter "explicit_defaults_for_timestamp" due to low confidence (0.0006208706181496382)
Excluding recommendation "explicit_defaults_for_timestamp" for parameter "db_screenshot" due to low confidence (0.000155173969687894)
Excluding recommendation "Book  " for parameter "slow_query_log" due to low confidence (0.0003152029530610889)
Excluding recommendation "false" for parameter "mysql_native_password_proxy_users" due to low confidence (5.788815997220809e-06)
Excluding recommendation "Key points" for parameter "log_slow_admin_statements" due to low confidence (7.4500503615126945e-06)
Excluding recommendation "SQL Statements" for parameter "mysql_native_password_proxy_users" due to low confidence (0.0038533001206815243)
Creating hints for document 47
Excluding recommendation "{{STATIC CONTENT}}
{{CAPTION_TITLE" for parameter "open_files_limit" due to low confidence (0.0023314044810831547)
Creating hints for document 48
Excluding recommendation "MEM_LIMIT query option" for parameter "slow_query_log" due to low confidence (2.882321859942749e-05)
Excluding recommendation "CDH 5.9 or higher" for parameter "show_compatibility" due to low confidence (0.000952306785620749)
Excluding recommendation "STRAIGHT_JOIN" for parameter "innodb_optimize_fulltext_only" due to low confidence (6.417170516215265e-05)
Creating hints for document 49
Adding hint TuningHint(doc_id=49, param=<re.Match object; span=(513, 543), match='innodb_flush_log_at_trx_commit'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation='1', passage='Will all the methods improve your insert performance?How to measure SQL Server performanceOptimizing MySQL InnoDB storage engineBuy a fast serverWhat is a virtual CPUUsing a Dedicated server for MySQLMySQL serverUsing SSD instead of magnetic drivesUsing RAID 5/6 for Database DurabilityTweak MySQL memory settingsinnodb_buffer_pool_sizeinnodb_buffer_pool_instancesOther Memory settingsTweak commit mechanismWhat is MySQL transactionWhat is MySQL commitMySQL inserts with a transactionChanging the commit mechanisminnodb_flush_log_at_trx_commit=1innodb_flush_log_at_trx_commit=0innodb_flush_log_at_trx_commit=2innodb_flush_log_at_timeoutUsing precalculated primary key for stringChanging the Database’s flush methodUsing file system compressionDo you need that index?Dropping the indexUsing partitions to improve MySQL insert slow ratePlacing a table on a different driveUsing MySQL bulk insertRegular insert (single row)MySQL insert multiple rows (Extended inserts)Using replace into or insert ignoreMySQL Replace intoMySQL Insert ignoreInserting from multiple threadsUsing load from file (MySQL bulk insert)Using application-level cacheAdjusting char/varchar collationUsing MySQL clusterUsing a custom engineUsing a custom solutionBonus sectionImprove select speedThread concurrencyUsing replicationUsing prepared statementsDisabling foreign keyConnection reuseNumber of available connectionsSummary\nEvery database deployment is different, which means that some of the suggestions here can slow down your insert performance; that’s why you need to benchmark each modification to see the effect it has.\nHow to measure SQL Server performance\nBefore we try to tweak our performance, we must know we improved the performance. innodb_write_io_threads ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.08972690999507904
Excluding recommendation "Before we try to tweak our performance, we must know we improved the performance" for parameter "innodb_write_io_threads" due to low confidence (0.0011801625369116664)
Adding hint TuningHint(doc_id=49, param=<re.Match object; span=(504, 543), match='mechanisminnodb_flush_log_at_trx_commit'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation='1', passage='Will all the methods improve your insert performance?How to measure SQL Server performanceOptimizing MySQL InnoDB storage engineBuy a fast serverWhat is a virtual CPUUsing a Dedicated server for MySQLMySQL serverUsing SSD instead of magnetic drivesUsing RAID 5/6 for Database DurabilityTweak MySQL memory settingsinnodb_buffer_pool_sizeinnodb_buffer_pool_instancesOther Memory settingsTweak commit mechanismWhat is MySQL transactionWhat is MySQL commitMySQL inserts with a transactionChanging the commit mechanisminnodb_flush_log_at_trx_commit=1innodb_flush_log_at_trx_commit=0innodb_flush_log_at_trx_commit=2innodb_flush_log_at_timeoutUsing precalculated primary key for stringChanging the Database’s flush methodUsing file system compressionDo you need that index?Dropping the indexUsing partitions to improve MySQL insert slow ratePlacing a table on a different driveUsing MySQL bulk insertRegular insert (single row)MySQL insert multiple rows (Extended inserts)Using replace into or insert ignoreMySQL Replace intoMySQL Insert ignoreInserting from multiple threadsUsing load from file (MySQL bulk insert)Using application-level cacheAdjusting char/varchar collationUsing MySQL clusterUsing a custom engineUsing a custom solutionBonus sectionImprove select speedThread concurrencyUsing replicationUsing prepared statementsDisabling foreign keyConnection reuseNumber of available connectionsSummary\nEvery database deployment is different, which means that some of the suggestions here can slow down your insert performance; that’s why you need to benchmark each modification to see the effect it has.\nHow to measure SQL Server performance\nBefore we try to tweak our performance, we must know we improved the performance. innodb_write_io_threads ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.10699533671140671
Excluding recommendation "instancesOther Memory settingsTweak" for parameter "settingsinnodb_buffer_pool_sizeinnodb_buffer_pool_instances" due to low confidence (0.0005287699168547988)
Adding hint TuningHint(doc_id=49, param=<re.Match object; span=(609, 636), match='innodb_flush_log_at_timeout'>, value=<re.Match object; span=(11, 12), match='2'>, recommendation='trx_commit=2', passage='Will all the methods improve your insert performance?How to measure SQL Server performanceOptimizing MySQL InnoDB storage engineBuy a fast serverWhat is a virtual CPUUsing a Dedicated server for MySQLMySQL serverUsing SSD instead of magnetic drivesUsing RAID 5/6 for Database DurabilityTweak MySQL memory settingsinnodb_buffer_pool_sizeinnodb_buffer_pool_instancesOther Memory settingsTweak commit mechanismWhat is MySQL transactionWhat is MySQL commitMySQL inserts with a transactionChanging the commit mechanisminnodb_flush_log_at_trx_commit=1innodb_flush_log_at_trx_commit=0innodb_flush_log_at_trx_commit=2innodb_flush_log_at_timeoutUsing precalculated primary key for stringChanging the Database’s flush methodUsing file system compressionDo you need that index?Dropping the indexUsing partitions to improve MySQL insert slow ratePlacing a table on a different driveUsing MySQL bulk insertRegular insert (single row)MySQL insert multiple rows (Extended inserts)Using replace into or insert ignoreMySQL Replace intoMySQL Insert ignoreInserting from multiple threadsUsing load from file (MySQL bulk insert)Using application-level cacheAdjusting char/varchar collationUsing MySQL clusterUsing a custom engineUsing a custom solutionBonus sectionImprove select speedThread concurrencyUsing replicationUsing prepared statementsDisabling foreign keyConnection reuseNumber of available connectionsSummary\nEvery database deployment is different, which means that some of the suggestions here can slow down your insert performance; that’s why you need to benchmark each modification to see the effect it has.\nHow to measure SQL Server performance\nBefore we try to tweak our performance, we must know we improved the performance. innodb_write_io_threads ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.07073114812374115
Excluding recommendation "50,000 concurrent inserts per second" for parameter "mysql_native_password_proxy_users" due to low confidence (0.003296144539490342)
Excluding recommendation "50,000 concurrent inserts per second" for parameter "innodb_buffer_pool_size" due to low confidence (0.005632854998111725)
Adding hint TuningHint(doc_id=49, param=<re.Match object; span=(374, 397), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 4), match='50GB'>, recommendation='50GB', passage='Typically, having multiple buffer pool instances is appropriate for systems that allocate multiple gigabytes to the InnoDB buffer pool, with each instance being one gigabyte or larger\nThis setting allows you to have multiple pools (the total size will still be the maximum specified in the previous section), so, for example, let’s say we have set this value to 10, and the innodb_buffer_pool_size is set to 50GB., MySQL will then allocate ten pools of 5GB. innodb_buffer_pool_size ', float_val=50.0, val_unit='GB', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.3358713686466217
Creating hints for document 50
Creating hints for document 51
Excluding recommendation "y.y.y.y" for parameter "log_timestamps" due to low confidence (0.00916872825473547)
Excluding recommendation "x.x.x.x" for parameter "peak_time" due to low confidence (0.00040252707549370825)
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(138, 153), match='max_connections'>, value=<re.Match object; span=(0, 3), match='800'>, recommendation='800', passage='query_cache_type=0\nquery_cache_size=0\n#query_cache_limit = 4M\ndefault_table_type = InnoDB\ntable_open_cache = 4096\nopen_files_limit = 8192\nmax_connections = 800 query_cache_limit ', float_val=800.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.8057395815849304
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(39, 56), match='query_cache_limit'>, value=<re.Match object; span=(0, 2), match='4M'>, recommendation='4M', passage='query_cache_type=0\nquery_cache_size=0\n#query_cache_limit = 4M\ndefault_table_type = InnoDB\ntable_open_cache = 4096\nopen_files_limit = 8192\nmax_connections = 800 query_cache_limit ', float_val=4.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.08288316428661346
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(90, 106), match='table_open_cache'>, value=<re.Match object; span=(0, 4), match='4096'>, recommendation='4096', passage='query_cache_type=0\nquery_cache_size=0\n#query_cache_limit = 4M\ndefault_table_type = InnoDB\ntable_open_cache = 4096\nopen_files_limit = 8192\nmax_connections = 800 query_cache_limit ', float_val=4096.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.786810040473938
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(114, 130), match='open_files_limit'>, value=<re.Match object; span=(0, 4), match='8192'>, recommendation='8192', passage='query_cache_type=0\nquery_cache_size=0\n#query_cache_limit = 4M\ndefault_table_type = InnoDB\ntable_open_cache = 4096\nopen_files_limit = 8192\nmax_connections = 800 query_cache_limit ', float_val=8192.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.7869772911071777
Excluding recommendation "0" for parameter "query_cache_size" due to low confidence (0.01855659671127796)
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(0, 16), match='query_cache_type'>, value=<re.Match object; span=(0, 1), match='0'>, recommendation='0', passage='query_cache_type=0\nquery_cache_size=0\n#query_cache_limit = 4M\ndefault_table_type = InnoDB\ntable_open_cache = 4096\nopen_files_limit = 8192\nmax_connections = 800 query_cache_limit ', float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.642454981803894
Excluding recommendation "
" for parameter "log_warnings" due to low confidence (0.000263674563029781)
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(0, 16), match='sort_buffer_size'>, value=<re.Match object; span=(0, 2), match='2M'>, recommendation='2M', passage='sort_buffer_size = 2M\njoin_buffer_size = 256K\nread_buffer_size=128K\nread_rnd_buffer_size = 256M\ntransaction-isolation=READ-COMMITTED\nlog_warnings\nslow_query_log sort_buffer_size ', float_val=2.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.2490767538547516
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(68, 88), match='read_rnd_buffer_size'>, value=<re.Match object; span=(0, 4), match='256M'>, recommendation='256M', passage='sort_buffer_size = 2M\njoin_buffer_size = 256K\nread_buffer_size=128K\nread_rnd_buffer_size = 256M\ntransaction-isolation=READ-COMMITTED\nlog_warnings\nslow_query_log sort_buffer_size ', float_val=256.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.08982732892036438
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(22, 38), match='join_buffer_size'>, value=<re.Match object; span=(0, 4), match='256K'>, recommendation='256K', passage='sort_buffer_size = 2M\njoin_buffer_size = 256K\nread_buffer_size=128K\nread_rnd_buffer_size = 256M\ntransaction-isolation=READ-COMMITTED\nlog_warnings\nslow_query_log sort_buffer_size ', float_val=256.0, val_unit='K', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.31841352581977844
Excluding recommendation "sort_buffer_size = 2M" for parameter "slow_query_log" due to low confidence (0.00011615848052315414)
Excluding recommendation "128K" for parameter "read_buffer_size" due to low confidence (0.04497770592570305)
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(78, 106), match='innodb_buffer_pool_instances'>, value=<re.Match object; span=(0, 1), match='6'>, recommendation='6', passage='long_query_time=5\n# Physical RAM is 32G (8-core)\ninnodb_buffer_pool_size =24G\ninnodb_buffer_pool_instances=6\nkey_buffer_size=512M\nnnodb_write_io_threads=8 innodb_buffer_pool_size ', float_val=6.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.4078684449195862
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(109, 124), match='key_buffer_size'>, value=<re.Match object; span=(0, 4), match='512M'>, recommendation='512M', passage='long_query_time=5\n# Physical RAM is 32G (8-core)\ninnodb_buffer_pool_size =24G\ninnodb_buffer_pool_instances=6\nkey_buffer_size=512M\nnnodb_write_io_threads=8 innodb_buffer_pool_size ', float_val=512.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.18617071211338043
Excluding recommendation "5
" for parameter "long_query_time" due to low confidence (0.0013318028068169951)
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(130, 152), match='nnodb_write_io_threads'>, value=<re.Match object; span=(0, 1), match='8'>, recommendation='8', passage='long_query_time=5\n# Physical RAM is 32G (8-core)\ninnodb_buffer_pool_size =24G\ninnodb_buffer_pool_instances=6\nkey_buffer_size=512M\nnnodb_write_io_threads=8 innodb_buffer_pool_size ', float_val=8.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.42254510521888733
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(49, 72), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 3), match='24G'>, recommendation='24G', passage='long_query_time=5\n# Physical RAM is 32G (8-core)\ninnodb_buffer_pool_size =24G\ninnodb_buffer_pool_instances=6\nkey_buffer_size=512M\nnnodb_write_io_threads=8 innodb_buffer_pool_size ', float_val=24.0, val_unit='G', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.22433069348335266
Excluding recommendation "innodb_read_io_threads=8" for parameter "innodb_file_per_table" due to low confidence (0.004271527286618948)
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(25, 50), match='innodb_thread_concurrency'>, value=<re.Match object; span=(0, 2), match='16'>, recommendation='16', passage='innodb_read_io_threads=8\ninnodb_thread_concurrency = 16\n#innodb_data_file_path = ibdata1:1G:autoextend\n#innodb_autoextend_increment=128M\n#innodb_file_per_table innodb_file_per_table ', float_val=16.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.5657617449760437
Excluding recommendation "8" for parameter "innodb_read_io_threads" due to low confidence (0.04619865491986275)
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(104, 131), match='innodb_autoextend_increment'>, value=<re.Match object; span=(0, 4), match='128M'>, recommendation='128M', passage='innodb_read_io_threads=8\ninnodb_thread_concurrency = 16\n#innodb_data_file_path = ibdata1:1G:autoextend\n#innodb_autoextend_increment=128M\n#innodb_file_per_table innodb_file_per_table ', float_val=128.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.4735054671764374
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(57, 78), match='innodb_data_file_path'>, value=<re.Match object; span=(6, 7), match='1'>, recommendation='ibdata1:1G:autoextend\n', passage='innodb_read_io_threads=8\ninnodb_thread_concurrency = 16\n#innodb_data_file_path = ibdata1:1G:autoextend\n#innodb_autoextend_increment=128M\n#innodb_file_per_table innodb_file_per_table ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.1035669818520546
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(57, 78), match='innodb_data_file_path'>, value=<re.Match object; span=(8, 10), match='1G'>, recommendation='ibdata1:1G:autoextend\n', passage='innodb_read_io_threads=8\ninnodb_thread_concurrency = 16\n#innodb_data_file_path = ibdata1:1G:autoextend\n#innodb_autoextend_increment=128M\n#innodb_file_per_table innodb_file_per_table ', float_val=1.0, val_unit='G', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.1035669818520546
Excluding recommendation "O_DIRECT" for parameter "innodb_flush_log_at_trx_commit" due to low confidence (0.03264632821083069)
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(77, 97), match='innodb_log_file_size'>, value=<re.Match object; span=(0, 2), match='2G'>, recommendation='2G', passage='innodb_flush_log_at_trx_commit=2\n#sync_binlog=1\ninnodb_log_buffer_size = 16M\ninnodb_log_file_size = 2G\ninnodb_max_dirty_pages_pct = 80\ninnodb_flush_method=O_DIRECT innodb_flush_log_at_trx_commit ', float_val=2.0, val_unit='G', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.5315348505973816
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(48, 70), match='innodb_log_buffer_size'>, value=<re.Match object; span=(0, 3), match='16M'>, recommendation='16M', passage='innodb_flush_log_at_trx_commit=2\n#sync_binlog=1\ninnodb_log_buffer_size = 16M\ninnodb_log_file_size = 2G\ninnodb_max_dirty_pages_pct = 80\ninnodb_flush_method=O_DIRECT innodb_flush_log_at_trx_commit ', float_val=16.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.5187473297119141
Excluding recommendation "1" for parameter "sync_binlog" due to low confidence (0.00093752087559551)
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(103, 129), match='innodb_max_dirty_pages_pct'>, value=<re.Match object; span=(0, 2), match='80'>, recommendation='80', passage='innodb_flush_log_at_trx_commit=2\n#sync_binlog=1\ninnodb_log_buffer_size = 16M\ninnodb_log_file_size = 2G\ninnodb_max_dirty_pages_pct = 80\ninnodb_flush_method=O_DIRECT innodb_flush_log_at_trx_commit ', float_val=80.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.5776606798171997
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(94, 112), match='max_allowed_packet'>, value=<re.Match object; span=(0, 4), match='512M'>, recommendation='512M\n', passage='innodb_lock_wait_timeout = 120\nbinlog_format=ROW\ninnodb_autoinc_lock_mode=2\n[mysqldump]\nquick\nmax_allowed_packet = 512M\n[mysql]\nno-auto-rehash innodb_flush_log_at_timeout ', float_val=512.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.31003284454345703
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(0, 24), match='innodb_lock_wait_timeout'>, value=<re.Match object; span=(0, 3), match='120'>, recommendation='120', passage='innodb_lock_wait_timeout = 120\nbinlog_format=ROW\ninnodb_autoinc_lock_mode=2\n[mysqldump]\nquick\nmax_allowed_packet = 512M\n[mysql]\nno-auto-rehash innodb_flush_log_at_timeout ', float_val=120.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.3990499973297119
Excluding recommendation "no-auto-rehash" for parameter "innodb_flush_log_at_timeout" due to low confidence (0.00046297808876261115)
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(49, 73), match='innodb_autoinc_lock_mode'>, value=<re.Match object; span=(0, 1), match='2'>, recommendation='2', passage='innodb_lock_wait_timeout = 120\nbinlog_format=ROW\ninnodb_autoinc_lock_mode=2\n[mysqldump]\nquick\nmax_allowed_packet = 512M\n[mysql]\nno-auto-rehash innodb_flush_log_at_timeout ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.5990505814552307
Excluding recommendation "
" for parameter "libgalera_smm" due to low confidence (3.094690327998251e-05)
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(109, 120), match='listen_addr'>, value=<re.Match object; span=(0, 3), match='0.0'>, recommendation='0.0.0.0:4567', passage='wsrep_on=ON\nwsrep_provider=/usr/lib64/galera/libgalera_smm.so\nwsrep_provider_options="gcache.size=10G;gmcast.listen_addr=tcp://0.0.0.0:4567;socket.checksum=2" mysql_native_password_proxy_users ', float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.1307826042175293
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(109, 120), match='listen_addr'>, value=<re.Match object; span=(4, 7), match='0.0'>, recommendation='0.0.0.0:4567', passage='wsrep_on=ON\nwsrep_provider=/usr/lib64/galera/libgalera_smm.so\nwsrep_provider_options="gcache.size=10G;gmcast.listen_addr=tcp://0.0.0.0:4567;socket.checksum=2" mysql_native_password_proxy_users ', float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.1307826042175293
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(109, 120), match='listen_addr'>, value=<re.Match object; span=(8, 12), match='4567'>, recommendation='0.0.0.0:4567', passage='wsrep_on=ON\nwsrep_provider=/usr/lib64/galera/libgalera_smm.so\nwsrep_provider_options="gcache.size=10G;gmcast.listen_addr=tcp://0.0.0.0:4567;socket.checksum=2" mysql_native_password_proxy_users ', float_val=4567.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.1307826042175293
Excluding recommendation "gcache.size=10G" for parameter "wsrep_provider" due to low confidence (0.01901705004274845)
Excluding recommendation "ON" for parameter "wsrep_on" due to low confidence (0.012170393951237202)
Excluding recommendation "socket.checksum=2" for parameter "mysql_native_password_proxy_users" due to low confidence (0.0029187947511672974)
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(62, 84), match='wsrep_provider_options'>, value=<re.Match object; span=(12, 15), match='10G'>, recommendation='gcache.size=10G', passage='wsrep_on=ON\nwsrep_provider=/usr/lib64/galera/libgalera_smm.so\nwsrep_provider_options="gcache.size=10G;gmcast.listen_addr=tcp://0.0.0.0:4567;socket.checksum=2" mysql_native_password_proxy_users ', float_val=10.0, val_unit='G', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.08816315978765488
Excluding recommendation "10.92.221.215,10.92.221.216" for parameter "galera_cluster" due to low confidence (0.000398319709347561)
Excluding recommendation "10.92.223.215,10.92.223.216" for parameter "wsrep_cluster_address" due to low confidence (0.016802260652184486)
Excluding recommendation "10.92.221.215" for parameter "wsrep_node_address" due to low confidence (0.004667773377150297)
Excluding recommendation "10.92.221.215" for parameter "lower_case_table_names" due to low confidence (0.0006873724050819874)
Excluding recommendation "ivrocsdbp00" for parameter "wsrep_node_name" due to low confidence (0.04297482222318649)
Excluding recommendation "galera_cluster" for parameter "wsrep_cluster_name" due to low confidence (0.0019186690915375948)
Excluding recommendation "Active
Oldest
Votes" for parameter "nnodb_write_io_threads" due to low confidence (0.002956871874630451)
Excluding recommendation "Active
Oldest
Votes" for parameter "innodb_write_io_threads" due to low confidence (0.0033681427594274282)
Excluding recommendation "innodb_thread_concurrency = 0" for parameter "innodb_file_per_table" due to low confidence (0.0007491970318369567)
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(19, 44), match='innodb_thread_concurrency'>, value=<re.Match object; span=(0, 1), match='0'>, recommendation='0', passage='I would start with innodb_thread_concurrency = 0 to de-restrict the thread concurrency throttling.\nAre your UPDATEs running fully indexed, ideally with PK in the WHERE?\nIs there a good reason you have innodb_file_per_table commented out? innodb_thread_concurrency ', float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.4500904679298401
Excluding recommendation "RAM usage" for parameter "innodb_file_per_table" due to low confidence (0.00547428335994482)
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(63, 88), match='innodb_thread_concurrency'>, value=<re.Match object; span=(0, 1), match='0'>, recommendation='0', passage="I have corrected my typo and changed my configuration files as innodb_thread_concurrency = 0 as you mentioned.\nI tried to configure very low-performing-consuming parameters and I have read about that innodb_file_per_table parameters could effect the RAM usage, so I decided to comment it out. Actually I couldn't figure out what this parameters use for clearly. innodb_file_per_table ", float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.12583105266094208
Excluding recommendation "100s wait_timeout" for parameter "connnection_pool" due to low confidence (6.965506145206746e-06)
Excluding recommendation "92" for parameter "table_open_cache_instances" due to low confidence (0.013611940667033195)
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(329, 342), match='threads_cache'>, value=<re.Match object; span=(0, 2), match='92'>, recommendation='92', passage='After I start all appcalitons that we use, I realised that I was seeing about 120 processes that created by our user in PROCESSLIST in the INFORMATION_SCHEMA. Also I know that some of these connections don\'t make anything but using connnection_pool.\nI was set up 100s wait_timeout, after 100s later, PROCESSLIST down to "27" and threads_cache became 92. table_open_cache_instances ', float_val=92.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.13683001697063446
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(268, 280), match='wait_timeout'>, value=<re.Match object; span=(0, 4), match='100s'>, recommendation='100s', passage='After I start all appcalitons that we use, I realised that I was seeing about 120 processes that created by our user in PROCESSLIST in the INFORMATION_SCHEMA. Also I know that some of these connections don\'t make anything but using connnection_pool.\nI was set up 100s wait_timeout, after 100s later, PROCESSLIST down to "27" and threads_cache became 92. table_open_cache_instances ', float_val=100.0, val_unit='s', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.3162759840488434
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(297, 314), match='thread_cache_size'>, value=<re.Match object; span=(0, 3), match='256'>, recommendation='256', passage='I also know that these 27 connection was used by some applications that running some check queries in spesific time interval. (10sec, 4sec, 2sec) So when they run queries , their connection_time return 0 and count again as they are never closed.\nI believe that in the peak_time, we are gonna need thread_cache_size, so configuring this parameter as 256 would be good for our system.\nI know it is so hard to understand for now but can you please check my innodb engine status and give me some advice as I am not very good at concept of database management systems. slow_query_log ', float_val=256.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.7372020483016968
Excluding recommendation "256" for parameter "slow_query_log" due to low confidence (0.001411302713677287)
Excluding recommendation "0 and count" for parameter "connection_time" due to low confidence (0.004553576000034809)
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(268, 277), match='peak_time'>, value=<re.Match object; span=(52, 55), match='256'>, recommendation='thread_cache_size, so configuring this parameter as 256', passage='I also know that these 27 connection was used by some applications that running some check queries in spesific time interval. (10sec, 4sec, 2sec) So when they run queries , their connection_time return 0 and count again as they are never closed.\nI believe that in the peak_time, we are gonna need thread_cache_size, so configuring this parameter as 256 would be good for our system.\nI know it is so hard to understand for now but can you please check my innodb engine status and give me some advice as I am not very good at concept of database management systems. slow_query_log ', float_val=256.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.11759907007217407
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(30, 40), match='srv_active'>, value=<re.Match object; span=(0, 4), match='4897'>, recommendation='4897', passage='srv_master_thread loops: 4897 srv_active, 0 srv_shutdown, 371 srv_idle\nsrv_master_thread log flush and writes: 5266\n----------\nSEMAPHORES\n----------\nOS WAIT ARRAY INFO: reservation count 34869 log_syslog_include_pid ', float_val=4897.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.48568570613861084
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(62, 70), match='srv_idle'>, value=<re.Match object; span=(0, 3), match='371'>, recommendation='371', passage='srv_master_thread loops: 4897 srv_active, 0 srv_shutdown, 371 srv_idle\nsrv_master_thread log flush and writes: 5266\n----------\nSEMAPHORES\n----------\nOS WAIT ARRAY INFO: reservation count 34869 log_syslog_include_pid ', float_val=371.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.15386880934238434
Excluding recommendation "reservation count 34869" for parameter "log_syslog_include_pid" due to low confidence (0.005073017440736294)
Excluding recommendation "4897 srv_active, 0 srv_shutdown" for parameter "srv_master_thread" due to low confidence (0.019779356196522713)
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(44, 56), match='srv_shutdown'>, value=<re.Match object; span=(0, 1), match='0'>, recommendation='0', passage='srv_master_thread loops: 4897 srv_active, 0 srv_shutdown, 371 srv_idle\nsrv_master_thread log flush and writes: 5266\n----------\nSEMAPHORES\n----------\nOS WAIT ARRAY INFO: reservation count 34869 log_syslog_include_pid ', float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.6092156767845154
Excluding recommendation "370893, unzip_LRU len: 0" for parameter "net_write_timeout" due to low confidence (0.007830900140106678)
Excluding recommendation "Free buffers" for parameter "sort_buffer_size" due to low confidence (0.028408225625753403)
Excluding recommendation "63353, unzip_LRU len: 0" for parameter "net_write_timeout" due to low confidence (0.006461471784859896)
Excluding recommendation "Free buffers" for parameter "sort_buffer_size" due to low confidence (0.019021250307559967)
Excluding recommendation "62058, unzip_LRU len: 0" for parameter "max_write_lock_count" due to low confidence (0.008527873083949089)
Excluding recommendation "Free buffers" for parameter "binlog_stmt_cache_size" due to low confidence (0.013212054036557674)
Excluding recommendation "62631, unzip_LRU len: 0" for parameter "net_write_timeout" due to low confidence (0.005254159215837717)
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(224, 238), match='log_timestamps'>, value=<re.Match object; span=(0, 1), match='2'>, recommendation='2 days 3 hrs 54 min 46 sec', passage='Servers are running over 48 hours and let me share tuning-primer results in DB-1.\n-- MYSQL PERFORMANCE TUNING PRIMER --\n- By: Matthew Montgomery -\nMySQL Version 10.2.27-MariaDB-log x86_64\nUptime = 2 days 3 hrs 54 min 46 sec log_timestamps ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.19834372401237488
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(224, 238), match='log_timestamps'>, value=<re.Match object; span=(7, 8), match='3'>, recommendation='2 days 3 hrs 54 min 46 sec', passage='Servers are running over 48 hours and let me share tuning-primer results in DB-1.\n-- MYSQL PERFORMANCE TUNING PRIMER --\n- By: Matthew Montgomery -\nMySQL Version 10.2.27-MariaDB-log x86_64\nUptime = 2 days 3 hrs 54 min 46 sec log_timestamps ', float_val=3.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.19834372401237488
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(224, 238), match='log_timestamps'>, value=<re.Match object; span=(13, 15), match='54'>, recommendation='2 days 3 hrs 54 min 46 sec', passage='Servers are running over 48 hours and let me share tuning-primer results in DB-1.\n-- MYSQL PERFORMANCE TUNING PRIMER --\n- By: Matthew Montgomery -\nMySQL Version 10.2.27-MariaDB-log x86_64\nUptime = 2 days 3 hrs 54 min 46 sec log_timestamps ', float_val=54.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.19834372401237488
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(224, 238), match='log_timestamps'>, value=<re.Match object; span=(20, 22), match='46'>, recommendation='2 days 3 hrs 54 min 46 sec', passage='Servers are running over 48 hours and let me share tuning-primer results in DB-1.\n-- MYSQL PERFORMANCE TUNING PRIMER --\n- By: Matthew Montgomery -\nMySQL Version 10.2.27-MariaDB-log x86_64\nUptime = 2 days 3 hrs 54 min 46 sec log_timestamps ', float_val=46.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.19834372401237488
Excluding recommendation "5.000000 sec.
You have 10 out of 5022308" for parameter "long_query_time" due to low confidence (0.006089984439313412)
Excluding recommendation "binary update log is NOT enabled" for parameter "slow_query_log" due to low confidence (0.00018599889881443232)
Excluding recommendation "256" for parameter "thread_cache_size" due to low confidence (0.03696694225072861)
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(8, 22), match='threads_cached'>, value=<re.Match object; span=(0, 3), match='103'>, recommendation='103', passage='Current threads_cached = 103\nCurrent threads_per_sec = 0\nHistoric threads_per_sec = 0\nYour thread_cache_size is fine\nMAX CONNECTIONS\nCurrent max_connections = 800\nCurrent threads_connected = 17 thread_cache_size ', float_val=103.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.3402577340602875
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(141, 156), match='max_connections'>, value=<re.Match object; span=(0, 3), match='800'>, recommendation='800', passage='Current threads_cached = 103\nCurrent threads_per_sec = 0\nHistoric threads_per_sec = 0\nYour thread_cache_size is fine\nMAX CONNECTIONS\nCurrent max_connections = 800\nCurrent threads_connected = 17 thread_cache_size ', float_val=800.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.9059332013130188
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(171, 188), match='threads_connected'>, value=<re.Match object; span=(0, 2), match='17'>, recommendation='17', passage='Current threads_cached = 103\nCurrent threads_per_sec = 0\nHistoric threads_per_sec = 0\nYour thread_cache_size is fine\nMAX CONNECTIONS\nCurrent max_connections = 800\nCurrent threads_connected = 17 thread_cache_size ', float_val=17.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.30804529786109924
Excluding recommendation "fine" for parameter "thread_cache_size" due to low confidence (0.003945489879697561)
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(37, 52), match='threads_per_sec'>, value=<re.Match object; span=(0, 1), match='0'>, recommendation='0', passage='Current threads_cached = 103\nCurrent threads_per_sec = 0\nHistoric threads_per_sec = 0\nYour thread_cache_size is fine\nMAX CONNECTIONS\nCurrent max_connections = 800\nCurrent threads_connected = 17 thread_cache_size ', float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.3617861568927765
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(9, 29), match='max_used_connections'>, value=<re.Match object; span=(0, 3), match='120'>, recommendation='120', passage='Historic max_used_connections = 120\nThe number of used connections is 15% of the configured maximum.\nYour max_connections variable seems to be fine.\nINNODB STATUS\nCurrent InnoDB index space = 4.29 G\nCurrent InnoDB data space = 4.72 G max_connections ', float_val=120.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.1344393640756607
Excluding recommendation "120" for parameter "max_connections" due to low confidence (0.00011460421228548512)
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(47, 70), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 5), match='24.00'>, recommendation='24.00 G', passage='Current InnoDB buffer pool free = 69 %\nCurrent innodb_buffer_pool_size = 24.00 G\nDepending on how much space your innodb indexes take up it may be safe\nto increase this value to up to 2 / 3 of total system memory\nMEMORY USAGE innodb_buffer_pool_size ', float_val=24.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.15766049921512604
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(54, 69), match='key_buffer_size'>, value=<re.Match object; span=(0, 3), match='512'>, recommendation='512 M\n', passage='KEY BUFFER\nCurrent MyISAM index space = 638 K\nCurrent key_buffer_size = 512 M\nKey cache miss rate is 1 : 144181\nKey buffer free ratio = 81 %\nYour key_buffer_size seems to be too high.\nPerhaps you can use these resources elsewhere key_buffer_size ', float_val=512.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.08398624509572983
Excluding recommendation "SORT OPERATIONS" for parameter "query_cache_size" due to low confidence (0.0003059874288737774)
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(121, 137), match='sort_buffer_size'>, value=<re.Match object; span=(0, 1), match='2'>, recommendation='2 M', passage='QUERY CACHE\nQuery cache is supported but not enabled\nPerhaps you should set the query_cache_size\nSORT OPERATIONS\nCurrent sort_buffer_size = 2 M\nCurrent read_rnd_buffer_size = 256 M\nSort buffer seems to be fine query_cache_size ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.11464470624923706
Excluding recommendation "256 M" for parameter "read_rnd_buffer_size" due to low confidence (0.03086932748556137)
Excluding recommendation "260.00 K
" for parameter "join_buffer_size" due to low confidence (0.03314005583524704)
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(266, 282), match='open_files_limit'>, value=<re.Match object; span=(0, 4), match='9031'>, recommendation='9031', passage='If you are unable to optimize your queries you may want to increase your\njoin_buffer_size to accommodate larger joins in one pass.\nNote! This script will still suggest raising the join_buffer_size when\nANY joins not using indexes are found.\nOPEN FILES LIMIT\nCurrent open_files_limit = 9031 files join_buffer_size ', float_val=9031.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.09383393824100494
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(4, 20), match='open_files_limit'>, value=<re.Match object; span=(0, 2), match='2x'>, recommendation='2x-3x', passage='The open_files_limit should typically be set to at least 2x-3x\nthat of table_cache if you have heavy MyISAM usage.\nYour open_files_limit value seems to be fine\nTABLE CACHE\nCurrent table_open_cache = 4096 tables\nCurrent table_definition_cache = 400 tables table_open_cache ', float_val=2.0, val_unit='x', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.5118791460990906
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(4, 20), match='open_files_limit'>, value=<re.Match object; span=(3, 5), match='3x'>, recommendation='2x-3x', passage='The open_files_limit should typically be set to at least 2x-3x\nthat of table_cache if you have heavy MyISAM usage.\nYour open_files_limit value seems to be fine\nTABLE CACHE\nCurrent table_open_cache = 4096 tables\nCurrent table_definition_cache = 400 tables table_open_cache ', float_val=3.0, val_unit='x', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.5118791460990906
Excluding recommendation "4096 tables" for parameter "table_open_cache" due to low confidence (0.011359041556715965)
Excluding recommendation "2x-3x" for parameter "table_cache" due to low confidence (0.0018590337131172419)
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(219, 241), match='table_definition_cache'>, value=<re.Match object; span=(0, 3), match='400'>, recommendation='400 tables', passage='The open_files_limit should typically be set to at least 2x-3x\nthat of table_cache if you have heavy MyISAM usage.\nYour open_files_limit value seems to be fine\nTABLE CACHE\nCurrent table_open_cache = 4096 tables\nCurrent table_definition_cache = 400 tables table_open_cache ', float_val=400.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.12179487943649292
Excluding recommendation "fine" for parameter "table_cache" due to low confidence (0.0001157596634584479)
Excluding recommendation "64 M" for parameter "tmp_table_size" due to low confidence (0.0025237996596843004)
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(116, 135), match='max_heap_table_size'>, value=<re.Match object; span=(0, 2), match='64'>, recommendation='64 M', passage='You have a total of 186 tables\nYou have 428 open tables.\nThe table_cache value seems to be fine\nTEMP TABLES\nCurrent max_heap_table_size = 64 M\nCurrent tmp_table_size = 64 M\nOf 490764 temp tables, 0% were created on disk tmp_table_size ', float_val=64.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.10713298618793488
Excluding recommendation "Current table scan ratio = 34 : 1" for parameter "read_buffer_size" due to low confidence (0.0037037311121821404)
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(202, 216), match='tmp_table_size'>, value=<re.Match object; span=(26, 27), match='1'>, recommendation='Current Lock Wait ratio = 1 : 383', passage='Created disk tmp tables ratio seems fine\nTABLE SCANS\nCurrent read_buffer_size = 128 K\nCurrent table scan ratio = 34 : 1\nread_buffer_size seems to be fine\nTABLE LOCKING\nCurrent Lock Wait ratio = 1 : 383 tmp_table_size ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.06077379360795021
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(202, 216), match='tmp_table_size'>, value=<re.Match object; span=(30, 33), match='383'>, recommendation='Current Lock Wait ratio = 1 : 383', passage='Created disk tmp tables ratio seems fine\nTABLE SCANS\nCurrent read_buffer_size = 128 K\nCurrent table scan ratio = 34 : 1\nread_buffer_size seems to be fine\nTABLE LOCKING\nCurrent Lock Wait ratio = 1 : 383 tmp_table_size ', float_val=383.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.06077379360795021
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(8, 28), match='read_rnd_buffer_size'>, value=<re.Match object; span=(0, 3), match='256'>, recommendation='256 M', passage='Current read_rnd_buffer_size = 256 M - indicates your rrbs is 256Meg.\nSET GLOBAL read_rnd_buffer_size=256*1024;\nfor a 256K rrbs to significantly reduce handler_read_rnd_next RPS.\nIn your my.cnf make the change for future more reasonable RAM usage and to reduce CPU busy. read_rnd_buffer_size ', float_val=256.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.13681989908218384
Excluding recommendation "256K rrbs" for parameter "handler_read_rnd_next" due to low confidence (0.00024282668891828507)
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(17, 37), match='read_rnd_buffer_size'>, value=<re.Match object; span=(0, 4), match='256K'>, recommendation='256K', passage="You are correct, read_rnd_buffer_size in MariaDB reference manual is 256K.\nIf you could provide the additional information requested, additional suggestions will be provided.\nView profile, Network profile for contact info and our free downloadable Utility Scripts to assist with performance tuning.\n–\xa0Wilson Hauck\nMay 10 '20 at 20:40 binlog_stmt_cache_size ", float_val=256.0, val_unit='K', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.7498667240142822
Excluding recommendation "View profile, Network profile for contact info and our free downloadable Utility Scripts" for parameter "binlog_stmt_cache_size" due to low confidence (0.0017959962133318186)
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(59, 79), match='read_rnd_buffer_size'>, value=<re.Match object; span=(0, 4), match='256K'>, recommendation='256K', passage="Is your response time improved significantly with the 256K read_rnd_buffer_size rather than the 256Meg you had been running?\nUpvotes would be nice, if we helped you.\n–\xa0Wilson Hauck\nMay 24 '20 at 14:25\nAdd a comment\n-- MYSQL PERFORMANCE TUNING PRIMER --\n- By: Matthew Montgomery - key_buffer_size ", float_val=256.0, val_unit='K', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.083421990275383
Excluding recommendation "256K read_rnd_buffer_size rather than the 256Meg" for parameter "key_buffer_size" due to low confidence (0.0016558407805860043)
Excluding recommendation "2 days 9 hrs 24 min 19 sec" for parameter "expire_logs_days" due to low confidence (0.00463516591116786)
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(122, 137), match='long_query_time'>, value=<re.Match object; span=(0, 8), match='5.000000'>, recommendation='5.000000 sec', passage="for info about MySQL's Enterprise Monitoring and Advisory Service\nSLOW QUERIES\nThe slow query log is NOT enabled.\nCurrent long_query_time = 5.000000 sec.\nYou have 608 out of 14381378 that take longer than 5.000000 sec. to complete slow_query_log ", float_val=5.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.19994454085826874
Excluding recommendation "608 out of 14381378" for parameter "slow_query_log" due to low confidence (0.007348550017923117)
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(55, 69), match='threads_cached'>, value=<re.Match object; span=(0, 3), match='109'>, recommendation='109', passage='WORKER THREADS\nCurrent thread_cache_size = 256\nCurrent threads_cached = 109\nCurrent threads_per_sec = 0\nHistoric threads_per_sec = 0\nYour thread_cache_size is fine\nMAX CONNECTIONS thread_cache_size ', float_val=109.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.8253700733184814
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(23, 40), match='thread_cache_size'>, value=<re.Match object; span=(0, 3), match='256'>, recommendation='256', passage='WORKER THREADS\nCurrent thread_cache_size = 256\nCurrent threads_cached = 109\nCurrent threads_per_sec = 0\nHistoric threads_per_sec = 0\nYour thread_cache_size is fine\nMAX CONNECTIONS thread_cache_size ', float_val=256.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.08495689183473587
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(84, 99), match='threads_per_sec'>, value=<re.Match object; span=(0, 1), match='0'>, recommendation='0', passage='WORKER THREADS\nCurrent thread_cache_size = 256\nCurrent threads_cached = 109\nCurrent threads_per_sec = 0\nHistoric threads_per_sec = 0\nYour thread_cache_size is fine\nMAX CONNECTIONS thread_cache_size ', float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.1633058339357376
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(70, 90), match='max_used_connections'>, value=<re.Match object; span=(0, 3), match='156'>, recommendation='156', passage='Current max_connections = 800\nCurrent threads_connected = 24\nHistoric max_used_connections = 156\nThe number of used connections is 19% of the configured maximum.\nYour max_connections variable seems to be fine.\nINNODB STATUS\nCurrent InnoDB index space = 5.79 G max_connections ', float_val=156.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.38295695185661316
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(38, 55), match='threads_connected'>, value=<re.Match object; span=(0, 2), match='24'>, recommendation='24', passage='Current max_connections = 800\nCurrent threads_connected = 24\nHistoric max_used_connections = 156\nThe number of used connections is 19% of the configured maximum.\nYour max_connections variable seems to be fine.\nINNODB STATUS\nCurrent InnoDB index space = 5.79 G max_connections ', float_val=24.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.8403124213218689
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(8, 23), match='max_connections'>, value=<re.Match object; span=(0, 3), match='800'>, recommendation='800', passage='Current max_connections = 800\nCurrent threads_connected = 24\nHistoric max_used_connections = 156\nThe number of used connections is 19% of the configured maximum.\nYour max_connections variable seems to be fine.\nINNODB STATUS\nCurrent InnoDB index space = 5.79 G max_connections ', float_val=800.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.3713454008102417
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(82, 105), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 5), match='24.00'>, recommendation='24.00 G', passage='Current InnoDB data space = 6.29 G\nCurrent InnoDB buffer pool free = 63 %\nCurrent innodb_buffer_pool_size = 24.00 G\nDepending on how much space your innodb indexes take up it may be safe\nto increase this value to up to 2 / 3 of total system memory innodb_buffer_pool_size ', float_val=24.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.14591170847415924
Excluding recommendation "512 M" for parameter "key_buffer_size" due to low confidence (0.008092467673122883)
Excluding recommendation "Current read_rnd_buffer_size = 256 K" for parameter "query_cache_size" due to low confidence (0.002315936842933297)
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(167, 183), match='sort_buffer_size'>, value=<re.Match object; span=(0, 1), match='2'>, recommendation='2 M', passage='Perhaps you can use these resources elsewhere\nQUERY CACHE\nQuery cache is supported but not enabled\nPerhaps you should set the query_cache_size\nSORT OPERATIONS\nCurrent sort_buffer_size = 2 M\nCurrent read_rnd_buffer_size = 256 K query_cache_size ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.25788062810897827
Excluding recommendation "256 K" for parameter "read_rnd_buffer_size" due to low confidence (0.01223525870591402)
Excluding recommendation "260.00 K
" for parameter "join_buffer_size" due to low confidence (0.01690014638006687)
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(25, 41), match='open_files_limit'>, value=<re.Match object; span=(0, 2), match='2x'>, recommendation='2x-3x', passage='OPEN FILES LIMIT\nCurrent open_files_limit = 9031 files\nThe open_files_limit should typically be set to at least 2x-3x\nthat of table_cache if you have heavy MyISAM usage.\nYour open_files_limit value seems to be fine open_files_limit ', float_val=2.0, val_unit='x', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.4671023190021515
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(25, 41), match='open_files_limit'>, value=<re.Match object; span=(3, 5), match='3x'>, recommendation='2x-3x', passage='OPEN FILES LIMIT\nCurrent open_files_limit = 9031 files\nThe open_files_limit should typically be set to at least 2x-3x\nthat of table_cache if you have heavy MyISAM usage.\nYour open_files_limit value seems to be fine open_files_limit ', float_val=3.0, val_unit='x', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.4671023190021515
Excluding recommendation "2x-3x" for parameter "table_cache" due to low confidence (7.20222742529586e-05)
Excluding recommendation "fine" for parameter "table_cache" due to low confidence (0.03212440386414528)
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(59, 81), match='table_definition_cache'>, value=<re.Match object; span=(0, 3), match='400'>, recommendation='400 tables', passage='TABLE CACHE\nCurrent table_open_cache = 4096 tables\nCurrent table_definition_cache = 400 tables\nYou have a total of 186 tables\nYou have 1303 open tables.\nThe table_cache value seems to be fine\nTEMP TABLES table_open_cache ', float_val=400.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.08714929968118668
Excluding recommendation "128 K" for parameter "read_buffer_size" due to low confidence (0.029448023065924644)
Excluding recommendation "50 : 1" for parameter "tmp_table_size" due to low confidence (0.013261099345982075)
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(8, 27), match='max_heap_table_size'>, value=<re.Match object; span=(0, 2), match='64'>, recommendation='64 M', passage='Current max_heap_table_size = 64 M\nCurrent tmp_table_size = 64 M\nOf 842280 temp tables, 0% were created on disk\nCreated disk tmp tables ratio seems fine\nTABLE SCANS\nCurrent read_buffer_size = 128 K\nCurrent table scan ratio = 50 : 1 tmp_table_size ', float_val=64.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.05511642247438431
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(230, 250), match='low_priority_updates'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation="1' max_write_lock_count", passage="read_buffer_size seems to be fine\nTABLE LOCKING\nCurrent Lock Wait ratio = 1 : 29\nYou may benefit from selective use of InnoDB.\nIf you have long running SELECT's against MyISAM tables and perform\nfrequent updates consider setting 'low_priority_updates=1' max_write_lock_count ", float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.18150416016578674
Adding hint TuningHint(doc_id=51, param=<re.Match object; span=(254, 274), match='max_write_lock_count'>, value=<re.Match object; span=(21, 22), match='1'>, recommendation='low_priority_updates=1', passage="read_buffer_size seems to be fine\nTABLE LOCKING\nCurrent Lock Wait ratio = 1 : 29\nYou may benefit from selective use of InnoDB.\nIf you have long running SELECT's against MyISAM tables and perform\nfrequent updates consider setting 'low_priority_updates=1' max_write_lock_count ", float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.07682166248559952
Excluding recommendation "1 : 29
" for parameter "read_buffer_size" due to low confidence (0.00011436989734647796)
Excluding recommendation "bronze badges" for parameter "key_cache_division_limit" due to low confidence (0.04234778508543968)
Excluding recommendation "cp_resource_allocation, cp_pending, cp_batch" for parameter "cp_pending" due to low confidence (7.262932194862515e-05)
Excluding recommendation "cp_pending" for parameter "cp_batch" due to low confidence (0.0002677986631169915)
Excluding recommendation "cp_pending, cp_batch" for parameter "cp_resource_allocation" due to low confidence (0.010775646194815636)
Excluding recommendation "cp_resource_allocation, cp_pending, cp_batch" for parameter "table_open_cache_instances" due to low confidence (0.00010136616037925705)
Excluding recommendation "`CAMPAIGN_ID`" for parameter "table_open_cache_instances" due to low confidence (0.02704302780330181)
Excluding recommendation "`DAILY_ATTEMPT`" for parameter "innodb_api_disable_rowlock" due to low confidence (0.03103630058467388)
Excluding recommendation "`RID`" for parameter "table_open_cache_instances" due to low confidence (0.02669038437306881)
Excluding recommendation "`TRIES_MADE`" for parameter "max_prepared_stmt_count" due to low confidence (0.02597007341682911)
Excluding recommendation "`SELECT_TIME` datetime DEFAULT NULL" for parameter "explicit_defaults_for_timestamp" due to low confidence (0.0036208946257829666)
Excluding recommendation "APP_INT1" for parameter "innodb_print_all_deadlocks" due to low confidence (0.00011973211076110601)
Excluding recommendation "`CID`" for parameter "explicit_defaults_for_timestamp" due to low confidence (0.004642566666007042)
Excluding recommendation "'CALL_END_TIME - CALL_ANSWER_TIME" for parameter "explicit_defaults_for_timestamp" due to low confidence (0.00130489154253155)
Excluding recommendation "`LIST_TYPE`" for parameter "lower_case_table_names" due to low confidence (0.003483750158920884)
Excluding recommendation "DEFAULT NULL, table_open_cache_instances" for parameter "_unicode_ci" due to low confidence (0.046714626252651215)
Excluding recommendation "CHARACTER SET" for parameter "table_open_cache_instances" due to low confidence (0.001766886212863028)
Excluding recommendation "2048" for parameter "app_str" due to low confidence (0.0024085030891001225)
Excluding recommendation "`APP_STR2`" for parameter "table_open_cache_instances" due to low confidence (0.007260872051119804)
Excluding recommendation "0: initial, 1: Converted, 2: Convert failed" for parameter "table_open_cache_instances" due to low confidence (0.0012723190011456609)
Excluding recommendation "BTREE" for parameter "key_cache_age_threshold" due to low confidence (0.011177651584148407)
Excluding recommendation "innodb_purge_batch_size" for parameter "cp_batch" due to low confidence (0.006672113202512264)
Excluding recommendation "
`BATCH_NAME` varchar(200) NOT NULL" for parameter "innodb_purge_batch_size" due to low confidence (0.0016019759932532907)
Excluding recommendation "DEFAULT current_timestamp()," for parameter "explicit_defaults_for_timestamp" due to low confidence (0.0071475813165307045)
Excluding recommendation "int(10) unsigned NOT NULL DEFAULT 0" for parameter "open_files_limit" due to low confidence (0.0013986621052026749)
Excluding recommendation "REMAINING_DESTINATIONS" for parameter "max_delayed_threads" due to low confidence (0.002717785770073533)
Excluding recommendation "`NUM_UNTRIED`" for parameter "binlog_group_commit_sync_no_delay_count" due to low confidence (0.010529696941375732)
Excluding recommendation "`COMPLETION_REASON` int(10) unsigned DEFAULT NULL" for parameter "max_prepared_stmt_count" due to low confidence (0.005004276987165213)
Excluding recommendation "last rid" for parameter "max_prepared_stmt_count" due to low confidence (0.007648348342627287)
Excluding recommendation "`CURRENT_RID`" for parameter "innodb_ft_enable_diag_print" due to low confidence (0.045691631734371185)
Excluding recommendation "
KEY `ix2_campaign`" for parameter "log_builtin_as_identified_by_password" due to low confidence (0.00460242060944438)
Creating hints for document 52
Creating hints for document 53
Creating hints for document 54
Creating hints for document 55
Creating hints for document 56
Excluding recommendation "allocsize
allocsize=size" for parameter "xfs_bmap" due to low confidence (0.003687805961817503)
Excluding recommendation "64KiB" for parameter "thread_cache_size" due to low confidence (0.00038150319596752524)
Excluding recommendation "64" for parameter "read_rnd_buffer_size" due to low confidence (1.1515647202031687e-05)
Excluding recommendation "individual files, or an entire filesystem" for parameter "xfs_fsr" due to low confidence (0.0017962732817977667)
Excluding recommendation "21600 >/dev/null 2>&1" for parameter "xfs_fsr" due to low confidence (0.011405684985220432)
Excluding recommendation "30 1 * * * root" for parameter "expire_logs_days" due to low confidence (0.005608236882835627)
Excluding recommendation "RAID_DISKS=${NUMSPINDLES};" for parameter "innodb_file_per_table" due to low confidence (0.009172530844807625)
Excluding recommendation "0, 1, 10, 5, or 6" for parameter "query_alloc_block_size" due to low confidence (0.009142992086708546)
Excluding recommendation "Running the database and MySQL on a different machine" for parameter "log_slow_admin_statements" due to low confidence (8.156802323355805e-06)
Adding hint TuningHint(doc_id=56, param=<re.Match object; span=(231, 242), match='table_cache'>, value=<re.Match object; span=(0, 3), match='128'>, recommendation='128', passage="Add the following to the [mysqld] section of /etc/my.cnf to see improvements in database speed for MythTV as well as MythWeb. Check your default values using 'mysql> show global variables;'\nkey_buffer = 48M\nmax_allowed_packet = 8M\ntable_cache = 128 # this setting is deprecated in mysql 5.6.23 and will prevent mysql from starting\nsort_buffer_size = 48M mysql_native_password_proxy_users ", float_val=128.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.6525372266769409
Adding hint TuningHint(doc_id=56, param=<re.Match object; span=(207, 225), match='max_allowed_packet'>, value=<re.Match object; span=(0, 2), match='8M'>, recommendation='8M\ntable_cache = 128', passage="Add the following to the [mysqld] section of /etc/my.cnf to see improvements in database speed for MythTV as well as MythWeb. Check your default values using 'mysql> show global variables;'\nkey_buffer = 48M\nmax_allowed_packet = 8M\ntable_cache = 128 # this setting is deprecated in mysql 5.6.23 and will prevent mysql from starting\nsort_buffer_size = 48M mysql_native_password_proxy_users ", float_val=8.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.16441436111927032
Adding hint TuningHint(doc_id=56, param=<re.Match object; span=(207, 225), match='max_allowed_packet'>, value=<re.Match object; span=(17, 20), match='128'>, recommendation='8M\ntable_cache = 128', passage="Add the following to the [mysqld] section of /etc/my.cnf to see improvements in database speed for MythTV as well as MythWeb. Check your default values using 'mysql> show global variables;'\nkey_buffer = 48M\nmax_allowed_packet = 8M\ntable_cache = 128 # this setting is deprecated in mysql 5.6.23 and will prevent mysql from starting\nsort_buffer_size = 48M mysql_native_password_proxy_users ", float_val=128.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.16441436111927032
Adding hint TuningHint(doc_id=56, param=<re.Match object; span=(190, 200), match='key_buffer'>, value=<re.Match object; span=(0, 3), match='48M'>, recommendation='48M', passage="Add the following to the [mysqld] section of /etc/my.cnf to see improvements in database speed for MythTV as well as MythWeb. Check your default values using 'mysql> show global variables;'\nkey_buffer = 48M\nmax_allowed_packet = 8M\ntable_cache = 128 # this setting is deprecated in mysql 5.6.23 and will prevent mysql from starting\nsort_buffer_size = 48M mysql_native_password_proxy_users ", float_val=48.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.16615621745586395
Excluding recommendation "sort_buffer_size = 48M" for parameter "mysql_native_password_proxy_users" due to low confidence (0.0004996192292310297)
Adding hint TuningHint(doc_id=56, param=<re.Match object; span=(0, 17), match='net_buffer_length'>, value=<re.Match object; span=(0, 2), match='1M'>, recommendation='1M', passage='net_buffer_length = 1M\nthread_cache_size = 4\nquery_cache_type = 1 ***\nquery_cache_size = 4M ***\nN.B. Turning on the query_cache (query_cache_type=1) can cause problems with if you have a newer server (>=5.7) and mixed clients (some below 5.7, some above). query_cache_size ', float_val=1.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.4277939796447754
Excluding recommendation "query_cache_type=1" for parameter "query_cache" due to low confidence (0.0029356174636632204)
Adding hint TuningHint(doc_id=56, param=<re.Match object; span=(23, 40), match='thread_cache_size'>, value=<re.Match object; span=(0, 1), match='4'>, recommendation='4', passage='net_buffer_length = 1M\nthread_cache_size = 4\nquery_cache_type = 1 ***\nquery_cache_size = 4M ***\nN.B. Turning on the query_cache (query_cache_type=1) can cause problems with if you have a newer server (>=5.7) and mixed clients (some below 5.7, some above). query_cache_size ', float_val=4.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.06408330798149109
Excluding recommendation "4M ***" for parameter "query_cache_size" due to low confidence (0.002335284138098359)
Adding hint TuningHint(doc_id=56, param=<re.Match object; span=(45, 61), match='query_cache_type'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation='1', passage='net_buffer_length = 1M\nthread_cache_size = 4\nquery_cache_type = 1 ***\nquery_cache_size = 4M ***\nN.B. Turning on the query_cache (query_cache_type=1) can cause problems with if you have a newer server (>=5.7) and mixed clients (some below 5.7, some above). query_cache_size ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.5286900997161865
Creating hints for document 57
Excluding recommendation "key" for parameter "log_builtin_as_identified_by_password" due to low confidence (0.010353435762226582)
Excluding recommendation "
ports:
- port: 3306" for parameter "mysql_native_password_proxy_users" due to low confidence (0.008582962676882744)
Excluding recommendation "MYSQL_ROOT_PASSWORD" for parameter "mysql_native_password_proxy_users" due to low confidence (0.036835793405771255)
Creating hints for document 58
Creating hints for document 59
Excluding recommendation "log_queries_not_using_indexes" for parameter "wp_page_navi" due to low confidence (0.00031540190684609115)
Excluding recommendation "
" for parameter "log_queries_not_using_indexes" due to low confidence (1.6665118891978636e-05)
Creating hints for document 60
Adding hint TuningHint(doc_id=60, param=<re.Match object; span=(339, 367), match='binlog_rows_query_log_events'>, value=<re.Match object; span=(0, 3), match='120'>, recommendation='120', passage='This is configured in $JFROG_HOME/artifactory/var/etc/artifactory/artifactory.system.properties.\nDefault values:artifactory.http.client.max.total.connections = 50artifactory.http.client.max.connections.per.route = 50\nTuning example:artifactory.http.client.max.total.connections = 150artifactory.http.client.max.connections.per.route = 120 binlog_rows_query_log_events ', float_val=120.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.05166090279817581
Excluding recommendation "large Cache FS provider" for parameter "mysql_native_password_proxy_users" due to low confidence (7.943966920720413e-05)
Creating hints for document 61
Creating hints for document 62
Creating hints for document 63
Creating hints for document 64
Creating hints for document 65
Creating hints for document 66
Excluding recommendation "INDEX([FK_Sales_Invoices_AccountsPersonID" for parameter "long_query_time" due to low confidence (0.0011641043238341808)
Excluding recommendation "INDEX(0))" for parameter "log_queries_not_using_indexes" due to low confidence (0.004148182459175587)
Excluding recommendation "sp_depends and information_schema.routinesFebruary" for parameter "information_schema" due to low confidence (7.052925502648577e-05)
Excluding recommendation "2 Comments" for parameter "log_queries_not_using_indexes" due to low confidence (6.458447387558408e-06)
Excluding recommendation "information_schema.routinesFebruary" for parameter "sp_depends" due to low confidence (0.0002799384237732738)
Creating hints for document 67
Excluding recommendation "ZFS root boot config" for parameter "log_syslog_include_pid" due to low confidence (0.0010398372542113066)
Excluding recommendation "ZFS root boot config log_syslog_include_pid" for parameter "freebsd_network_tuning" due to low confidence (0.0006429043132811785)
Excluding recommendation "dirty_data cache" for parameter "preload_buffer_size" due to low confidence (0.0017112074419856071)
Excluding recommendation "vfs.zfs.dirty_data_max" for parameter "dirty_data" due to low confidence (0.0031900766771286726)
Excluding recommendation "vfs.zfs.dirty_data_max can not exceed" for parameter "dirty_data_max" due to low confidence (0.0040926625952124596)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(103, 121), match='dirty_data_max_max'>, value=<re.Match object; span=(0, 10), match='4294967296'>, recommendation='4294967296, 4GB', passage='# Adaptive Replacement Cache (ARC) and can be viewed in "top" as the "Anon"\n# value under ARC.\nvfs.zfs.dirty_data_max_max="17179869184"\n# (default 4294967296, 4GB)\n# ZFS: max percentage of total server RAM allowed to be dirty (Anon in top). host_cache_size ', float_val=4294967296.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.06184108927845955
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(103, 121), match='dirty_data_max_max'>, value=<re.Match object; span=(12, 15), match='4GB'>, recommendation='4294967296, 4GB', passage='# Adaptive Replacement Cache (ARC) and can be viewed in "top" as the "Anon"\n# value under ARC.\nvfs.zfs.dirty_data_max_max="17179869184"\n# (default 4294967296, 4GB)\n# ZFS: max percentage of total server RAM allowed to be dirty (Anon in top). host_cache_size ', float_val=4.0, val_unit='GB', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.06184108927845955
Excluding recommendation "default 4294967296, 4GB" for parameter "host_cache_size" due to low confidence (0.00425835233181715)
Excluding recommendation "Setting the value to zero(0)" for parameter "max_binlog_stmt_cache_size" due to low confidence (0.0005183456814847887)
Excluding recommendation "25% of 64GBytes of RAM is 16MB" for parameter "dirty_data_max_max" due to low confidence (0.010168026201426983)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(88, 110), match='dirty_data_max_percent'>, value=<re.Match object; span=(8, 10), match='10'>, recommendation='default 10 percent', passage='# 25% of 64GBytes of RAM is 16MB which is equal to vfs.zfs.dirty_data_max_max .\nvfs.zfs.dirty_data_max_percent="25"\n# (default 10 percent)\n# hostcache cache limit is the number of ip addresses in the hostcache list.\n# Setting the value to zero(0) stops any ip address connection information from max_binlog_stmt_cache_size ', float_val=10.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.058599092066287994
Excluding recommendation "0" for parameter "disk_ident" due to low confidence (0.0256640687584877)
Excluding recommendation "default 1) diskid/DISK-ABC0123" for parameter "lower_case_table_names" due to low confidence (0.002105207648128271)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(8, 30), match='hyperthreading_allowed'>, value=<re.Match object; span=(8, 9), match='1'>, recommendation='default 1, allow Hyper Threading (HT', passage='machdep.hyperthreading_allowed="0"\n# (default 1, allow Hyper Threading (HT))\n# Enable the optimized version of the soreceive() kernel socket interface for\n# stream (TCP) sockets. soreceive_stream() only does one sockbuf unlock/lock preload_buffer_size ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.08508654683828354
Excluding recommendation "one sockbuf" for parameter "preload_buffer_size" due to low confidence (0.01862250827252865)
Excluding recommendation "
# (default 0" for parameter "net_write_timeout" due to low confidence (0.0003459811268839985)
Excluding recommendation "1" for parameter "soreceive_stream" due to low confidence (0.008683708496391773)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(61, 71), match='num_queues'>, value=<re.Match object; span=(0, 1), match='0'>, recommendation='0', passage='# The Intel igb(4) driver with queues autoconfigured (hw.igb.num_queues="0")\n# and msix enabled (hw.igb.enable_msix=1) will create the maximum number of\n# queues limited by the Intel igb hardware, msix messages and the number of\n# CPUs in the system. Once the igb interface maximum number of queues is innodb_log_buffer_size ', float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.05151485651731491
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(104, 115), match='enable_msix'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation='1', passage='# The Intel igb(4) driver with queues autoconfigured (hw.igb.num_queues="0")\n# and msix enabled (hw.igb.enable_msix=1) will create the maximum number of\n# queues limited by the Intel igb hardware, msix messages and the number of\n# CPUs in the system. Once the igb interface maximum number of queues is innodb_log_buffer_size ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.6755734086036682
Excluding recommendation "maximum number of queues" for parameter "innodb_log_buffer_size" due to low confidence (0.0017589607741683722)
Excluding recommendation "addresses" for parameter "mysql_native_password_proxy_users" due to low confidence (0.0015221727080643177)
Excluding recommendation "32768" for parameter "source_nodes_hashsize" due to low confidence (0.02183840423822403)
Excluding recommendation "Other options" for parameter "open_files_limit" due to low confidence (0.0019932419527322054)
Excluding recommendation "default 1" for parameter "enable_udp" due to low confidence (0.0073502566665410995)
Excluding recommendation "Disable UDP/IPv4 and UDP/IPv6" for parameter "innodb_api_disable_rowlock" due to low confidence (0.0017136292299255729)
Excluding recommendation "#cc_htcp_load="YES" for parameter "explicit_defaults_for_timestamp" due to low confidence (0.014730935916304588)
Excluding recommendation "default 1, enabled" for parameter "trust_hostudp" due to low confidence (0.0218973271548748)
Excluding recommendation "YES" for parameter "cc_cdg_load" due to low confidence (0.0031077677849680185)
Excluding recommendation "256 packets times the number of interfaces in the machine" for parameter "max_delayed_threads" due to low confidence (0.0071246437728405)
Excluding recommendation "net.link.ifqmaxlen="2048"." for parameter "init_cwnd" due to low confidence (0.00011203227040823549)
Excluding recommendation "net.link.ifqmaxlen="2048"." for parameter "preload_buffer_size" due to low confidence (0.00029240964795462787)
Excluding recommendation "small or
# slow" for parameter "accept_filter" due to low confidence (4.1722752939676866e-05)
Excluding recommendation "small or
# slow" for parameter "net_write_timeout" due to low confidence (0.0003034151450265199)
Excluding recommendation "
#accf_data_load="YES" for parameter "mysql_native_password_proxy_users" due to low confidence (0.0005677339504472911)
Excluding recommendation "aio_load="YES" for parameter "net_write_timeout" due to low confidence (0.0005010551540181041)
Excluding recommendation "aesni_load="YES" for parameter "log_syslog_include_pid" due to low confidence (0.0004092727031093091)
Excluding recommendation "re(4" for parameter "innodb_api_enable_binlog" due to low confidence (0.0003400730201974511)
Excluding recommendation "interrupt rate" for parameter "innodb_write_io_threads" due to low confidence (0.005785009823739529)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(145, 156), match='enable_msix'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation='1', passage='# output looking similar to, "igb0: Using MSIX interrupts with 5 vectors" for a\n# two(2) port, four(4) queue Intel i350-T2 network card.\n#hw.igb.enable_msix="1"\n# (default 1)\n# Intel igb(4): Adaptive interrupt Moderation adjusts the interrupt rate innodb_write_io_threads ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.2096102386713028
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(211, 221), match='enable_aim'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation='1', passage='# dynamically based on packet size and throughput and reduces system load for\n# igb(4). Enabling AIM, and the separate MSIX option, will result in\n# significantly better efficiency in the network stack.\n#hw.igb.enable_aim="1"\n# (default 1) innodb_buffer_pool_size ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.2776203751564026
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(240, 263), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(8, 9), match='1'>, recommendation='default 1', passage='# dynamically based on packet size and throughput and reduces system load for\n# igb(4). Enabling AIM, and the separate MSIX option, will result in\n# significantly better efficiency in the network stack.\n#hw.igb.enable_aim="1"\n# (default 1) innodb_buffer_pool_size ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.12048069387674332
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(21, 40), match='rx_processing_limit'>, value=<re.Match object; span=(8, 9), match='1'>, recommendation='dev.igb.1.rx_processing_limit', passage='# value to dev.igb.0.rx_processing_limit and dev.igb.1.rx_processing_limit .\n# Option removed in FreeBSD 12\n#hw.igb.rx_process_limit="-1"\n# (default 100 packets to process concurrently)\n# Intel igb(4): The Intel i350-T2 dual port NIC supports up to eight(8) innodb_disable_sort_file_cache ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.20392198860645294
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(116, 132), match='rx_process_limit'>, value=<re.Match object; span=(8, 9), match='1'>, recommendation='dev.igb.1.rx_processing_limit', passage='# value to dev.igb.0.rx_processing_limit and dev.igb.1.rx_processing_limit .\n# Option removed in FreeBSD 12\n#hw.igb.rx_process_limit="-1"\n# (default 100 packets to process concurrently)\n# Intel igb(4): The Intel i350-T2 dual port NIC supports up to eight(8) innodb_disable_sort_file_cache ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.1708802878856659
Excluding recommendation "eight(8" for parameter "innodb_disable_sort_file_cache" due to low confidence (0.0029307652730494738)
Excluding recommendation "2" for parameter "num_queues" due to low confidence (0.01095624826848507)
Excluding recommendation "four(4) network queues" for parameter "net_write_timeout" due to low confidence (0.00598099222406745)
Excluding recommendation "zero(0)" for parameter "num_queues" due to low confidence (0.014513034373521805)
Excluding recommendation "top -CHIPS" for parameter "binlog_stmt_cache_size" due to low confidence (7.022226782282814e-05)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(286, 296), match='num_queues'>, value=<re.Match object; span=(0, 1), match='2'>, recommendation='2', passage='# watch CPU usage per igb0:que. Multiple network queues will trigger more total\n# interrupts compared to a single network queue, but the processing of each of\n# those queues will be spread over multiple CPU cores allowing the system to\n# handle increased network traffic loads.\n#hw.igb.num_queues="2" max_delayed_threads ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.2091580480337143
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(301, 320), match='max_delayed_threads'>, value=<re.Match object; span=(0, 1), match='2'>, recommendation='2', passage='# watch CPU usage per igb0:que. Multiple network queues will trigger more total\n# interrupts compared to a single network queue, but the processing of each of\n# those queues will be spread over multiple CPU cores allowing the system to\n# handle increased network traffic loads.\n#hw.igb.num_queues="2" max_delayed_threads ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.07428836822509766
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(8, 26), match='max_interrupt_rate'>, value=<re.Match object; span=(0, 5), match='16000'>, recommendation='16000', passage='#hw.igb.max_interrupt_rate="16000" # (default 8000)\n# Intel igb(4): using older intel drivers and jumbo frames caused memory\n# fragmentation as header splitting wouldn\'t allocate jumbo clusters. The\n# current intel drivers do not seem to have these issues, so headers splitting innodb_replication_delay ', float_val=16000.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.4730677306652069
Excluding recommendation "8000" for parameter "innodb_replication_delay" due to low confidence (0.0007853745482861996)
Excluding recommendation "0" for parameter "header_split" due to low confidence (0.03987688571214676)
Excluding recommendation "intel igb tuning" for parameter "innodb_api_disable_rowlock" due to low confidence (0.0018287717830389738)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(262, 283), match='skip_external_locking'>, value=<re.Match object; span=(8, 9), match='1'>, recommendation='default 1, add fe80:: address', passage='# IPv6: disable automatically adding an IPv6 link-local address to interfaces.\n# The link-local address conflict in Pf leading to issues with a global ipv6\n# address and the link-local address.\n#net.inet6.ip6.auto_linklocal="0"\n# (default 1, add fe80:: address) skip_external_locking ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.17268943786621094
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(262, 283), match='skip_external_locking'>, value=<re.Match object; span=(17, 19), match='80'>, recommendation='default 1, add fe80:: address', passage='# IPv6: disable automatically adding an IPv6 link-local address to interfaces.\n# The link-local address conflict in Pf leading to issues with a global ipv6\n# address and the link-local address.\n#net.inet6.ip6.auto_linklocal="0"\n# (default 1, add fe80:: address) skip_external_locking ', float_val=80.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.17268943786621094
Excluding recommendation "default 1, add fe80:: address" for parameter "auto_linklocal" due to low confidence (0.04486086592078209)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(259, 276), match='net_write_timeout'>, value=<re.Match object; span=(8, 12), match='1000'>, recommendation='default 1000', passage='# thermal sensors for intel or amd cpus\n#coretemp_load="YES"\n#amdtemp_load="YES"\n# higher HZ settings have a negative impact on machine performance due to\n# handling more timer interrupts resulting in more context switches and cache\n# flushes (default 1000). net_write_timeout ', float_val=1000.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.2802692651748657
Excluding recommendation "1000" for parameter "max_delayed_threads" due to low confidence (0.0042677330784499645)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(201, 221), match='intr_storm_threshold'>, value=<re.Match object; span=(0, 4), match='9000'>, recommendation='9000', passage='# total rate). If you still see Interrupt Storm detected messages, increase the\n# limit to a higher number and look for the culprit.\nFor 10gig NIC\'s set to\n# 9000 and use large MTU. (default 1000)\n#hw.intr_storm_threshold="9000" max_delayed_threads ', float_val=9000.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.09041840583086014
Excluding recommendation "65536" for parameter "log_syslog_include_pid" due to low confidence (0.0001444864901714027)
Excluding recommendation "#autoboot_delay="60"" for parameter "innodb_flush_log_at_timeout" due to low confidence (0.004660669714212418)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(140, 154), match='autoboot_delay'>, value=<re.Match object; span=(0, 2), match='60'>, recommendation='60', passage='# system only to power off due to another brownout. If you are at the console\n# during boot you can always hit enter to bypass this delay.\n#autoboot_delay="60"\n# (default 10) seconds\n#autoboot_delay="-1"\n# (default 10) seconds innodb_flush_log_at_timeout ', float_val=60.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.06883183121681213
Excluding recommendation "
April 2021" for parameter "freebsd_network_tuning" due to low confidence (7.104023825377226e-05)
Excluding recommendation "two windows" for parameter "max_connections" due to low confidence (0.0016109230928122997)
Excluding recommendation "greater than zero(0)." for parameter "_window_scale_option" due to low confidence (0.0013304597232490778)
Excluding recommendation "greater than zero(0)." for parameter "key_buffer_size" due to low confidence (0.0021930881775915623)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(146, 172), match='max_binlog_stmt_cache_size'>, value=<re.Match object; span=(1, 6), match='2Gbit'>, recommendation='\n2Gbit', passage='# https://en.wikipedia.org/wiki/Bandwidth-delay_product\n# speed:\n1Gbit\nmaxsockbuf:\n2MB\nwscale:\nin-flight:\n2^6*65KB =\n4MB (default)\n# speed:\n2Gbit max_binlog_stmt_cache_size ', float_val=2.0, val_unit='Gbit', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.18236695230007172
Excluding recommendation "
1Gbit
maxsockbuf:
2MB" for parameter "delay_product" due to low confidence (0.009869417175650597)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(63, 74), match='recvbuf_max'>, value=<re.Match object; span=(0, 7), match='4194304'>, recommendation='4194304', passage='#net.inet.tcp.recvbuf_inc=65536\n# (default 16384)\nnet.inet.tcp.recvbuf_max=4194304\n# (default 2097152)\nnet.inet.tcp.recvspace=65536 binlog_stmt_cache_size ', float_val=4194304.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.11756212264299393
Excluding recommendation "16384" for parameter "binlog_stmt_cache_size" due to low confidence (0.0005755333113484085)
Excluding recommendation "default 16384" for parameter "recvbuf_inc" due to low confidence (0.011031731963157654)
Excluding recommendation "
net.inet.tcp.sendbuf_inc=65536" for parameter "sendbuf_inc" due to low confidence (0.0011605772888287902)
Excluding recommendation "2097152" for parameter "binlog_stmt_cache_size" due to low confidence (0.024554425850510597)
Excluding recommendation "4194304" for parameter "sendbuf_max" due to low confidence (0.014522080309689045)
Excluding recommendation "abc_l_var * maxseg) bytes" for parameter "max_binlog_stmt_cache_size" due to low confidence (0.001615396817214787)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(24, 33), match='abc_l_var'>, value=<re.Match object; span=(0, 2), match='44'>, recommendation='44 times a\n# maxseg of 1460 bytes', passage='# increment per ACK to (abc_l_var * maxseg) bytes. An abc_l_var of 44 times a\n# maxseg of 1460 bytes would allow slow start to increase the congestion window\n# by more than 64 kilobytes per step; 65535 bytes is the TCP receive buffer\n# size of most hosts without TCP window scaling. max_binlog_stmt_cache_size ', float_val=44.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.12695109844207764
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(24, 33), match='abc_l_var'>, value=<re.Match object; span=(23, 27), match='1460'>, recommendation='44 times a\n# maxseg of 1460 bytes', passage='# increment per ACK to (abc_l_var * maxseg) bytes. An abc_l_var of 44 times a\n# maxseg of 1460 bytes would allow slow start to increase the congestion window\n# by more than 64 kilobytes per step; 65535 bytes is the TCP receive buffer\n# size of most hosts without TCP window scaling. max_binlog_stmt_cache_size ', float_val=1460.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.12695109844207764
Excluding recommendation "44
#" for parameter "binlog_stmt_cache_size" due to low confidence (0.0021596087608486414)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(13, 22), match='abc_l_var'>, value=<re.Match object; span=(0, 2), match='44'>, recommendation='44\n#', passage='net.inet.tcp.abc_l_var=44\n# (default 2) if net.inet.tcp.mssdflt = 1460\n#net.inet.tcp.abc_l_var=52\n# (default 2) if net.inet.tcp.mssdflt = 1240 binlog_stmt_cache_size ', float_val=44.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.05774166062474251
Excluding recommendation "44
" for parameter "tcp_initcwnd_paper" due to low confidence (0.0051774936728179455)
Excluding recommendation "52" for parameter "initcwnd_segments" due to low confidence (0.007114632520824671)
Excluding recommendation "52" for parameter "innodb_max_dirty_pages_pct_lwm" due to low confidence (0.012878259643912315)
Excluding recommendation "0" for parameter "local_slowstart_flightsize" due to low confidence (0.0003582086064852774)
Excluding recommendation "0" for parameter "slowstart_flightsize" due to low confidence (0.00034840693115256727)
Excluding recommendation "0" for parameter "binlog_stmt_cache_size" due to low confidence (0.0003413587110117078)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(13, 32), match='isn_reseed_interval'>, value=<re.Match object; span=(8, 9), match='0'>, recommendation='default 0, disabled', passage='net.inet.tcp.isn_reseed_interval=4500\n# (default 0, disabled)\n# TCP segmentation offload (TSO), also called large segment offload (LSO),\n# should be disabled on NAT firewalls and routers. TSO/LSO works by queuing up net_write_timeout ', float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.10046177357435226
Excluding recommendation "default 0, disabled" for parameter "net_write_timeout" due to low confidence (0.0075244419276714325)
Excluding recommendation "255.255.255.0" for parameter "binlog_stmt_cache_size" due to low confidence (3.790673417825019e-06)
Excluding recommendation "inet 10.10.10.1" for parameter "ifconfig_igb" due to low confidence (0.0006650711875408888)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(297, 316), match='max_delayed_threads'>, value=<re.Match object; span=(5, 6), match='0'>, recommendation='zero(0)', passage='# Intel i350-T2 igb(4): the rx_budget sets the maximum number of receive\n# packets to process in an interrupt. If the budget is reached, the\n# remaining/pending packets will be processed later in a scheduled taskqueue.\n# The default of zero(0) indicates a FreeBSD 12 default of sixteen(16) frames max_delayed_threads ', float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.059784576296806335
Excluding recommendation "maximum number of receive
#" for parameter "rx_budget" due to low confidence (0.0024988981895148754)
Excluding recommendation "default 0, which is 16 frames" for parameter "rx_budget" due to low confidence (0.03184748813509941)
Excluding recommendation "Fortuna pseudorandom number generator (PRNG) maximum event size" for parameter "max_binlog_stmt_cache_size" due to low confidence (0.0034674988128244877)
Excluding recommendation "128 bytes and 256 bytes
#" for parameter "key_buffer_size" due to low confidence (1.7772126739146188e-05)
Excluding recommendation "FS_ATIME, INTERRUPT and NET_ETHER
" for parameter "preload_buffer_size" due to low confidence (9.191199205815792e-05)
Excluding recommendation "A harvest mask of 33119" for parameter "key_buffer_size" due to low confidence (0.0017277795122936368)
Excluding recommendation "4" for parameter "keymap_restrict_change" due to low confidence (0.008773403242230415)
Excluding recommendation "default 0" for parameter "key_cache_age_threshold" due to low confidence (0.002034801058471203)
Excluding recommendation "64 bit user processes (default 1, disabled" for parameter "explicit_defaults_for_timestamp" due to low confidence (0.0030026796739548445)
Excluding recommendation "default 1, disabled" for parameter "allow_wx" due to low confidence (0.0023808670230209827)
Excluding recommendation "default 0, disabled" for parameter "shm_use_phys" due to low confidence (0.0022508723195642233)
Excluding recommendation "default 0" for parameter "msgbuf_show_timestamp" due to low confidence (0.0009545308421365917)
Excluding recommendation "kern.randompid=1" for parameter "log_syslog_include_pid" due to low confidence (0.00021946731430944055)
Excluding recommendation "no redirected ICMP packets" for parameter "innodb_write_io_threads" due to low confidence (0.0007122207898646593)
Excluding recommendation "
net.inet.icmp.drop_redirect=1" for parameter "drop_redirect" due to low confidence (0.0016406649956479669)
Excluding recommendation "1" for parameter "optimize_writers" due to low confidence (0.009615707211196423)
Excluding recommendation "1
# verify packet arrives on correct interface (default 0" for parameter "check_interface" due to low confidence (0.025842610746622086)
Excluding recommendation "ports 32768 to portrange.last for outgoing connections (default 10000" for parameter "mysql_native_password_proxy_users" due to low confidence (0.020819680765271187)
Excluding recommendation "default 0" for parameter "net_write_timeout" due to low confidence (0.019218550994992256)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(273, 282), match='random_id'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation='1', passage='net.inet.ip.portrange.randomcps=9999 # use random port allocation if less than this many ports per second are allocated (default 10)\nnet.inet.ip.portrange.randomtime=1 # seconds to use sequental port allocation before switching back to random (default 45 secs)\nnet.inet.ip.random_id=1\n# assign a random IP id to each packet leaving the system (default 0) net_write_timeout ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.06056381016969681
Excluding recommendation "1" for parameter "drop_synfin" due to low confidence (0.026154233142733574)
Excluding recommendation "2_recycle=1" for parameter "fast_finwait" due to low confidence (0.0006836006650701165)
Excluding recommendation "false RST (default 0" for parameter "net_write_timeout" due to low confidence (0.0006527227815240622)
Excluding recommendation "three way TCP handshake (default 0" for parameter "explicit_defaults_for_timestamp" due to low confidence (0.0026170164346694946)
Excluding recommendation "three way TCP handshake (default 0" for parameter "server_enable" due to low confidence (0.000845034490339458)
Excluding recommendation "three way TCP handshake (default 1, enabled" for parameter "client_enable" due to low confidence (0.007574805058538914)
Excluding recommendation "0" for parameter "icmp_may_rst" due to low confidence (0.012091838754713535)
Excluding recommendation "keepcnt=2" for parameter "net_write_timeout" due to low confidence (0.0003513721749186516)
Excluding recommendation "0" for parameter "path_mtu_discovery" due to low confidence (0.018434379249811172)
Excluding recommendation "75000, 75 secs" for parameter "net_read_timeout" due to low confidence (0.0025001822505146265)
Excluding recommendation "
security" for parameter "open_files_limit" due to low confidence (0.0008634267724119127)
Excluding recommendation "open_files_limit" for parameter "hardlink_check_uid" due to low confidence (0.015124652534723282)
Excluding recommendation "1" for parameter "hardlink_check_gid" due to low confidence (0.024232111871242523)
Excluding recommendation "
security.bsd.see_other_uids=0" for parameter "innodb_disable_sort_file_cache" due to low confidence (0.0005669780657626688)
Excluding recommendation "0" for parameter "see_other_uids" due to low confidence (0.002792887156829238)
Excluding recommendation "
security.bsd.see_other_gids=0" for parameter "see_other_gids" due to low confidence (0.0021178892347961664)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(212, 235), match='unprivileged_proc_debug'>, value=<re.Match object; span=(0, 1), match='0'>, recommendation='0', passage='# users only see their own processes. root can see all (default 1)\nsecurity.bsd.stack_guard_page=1\n# insert a stack guard page ahead of growable segments, stack smashing protection (SSP) (default 0)\nsecurity.bsd.unprivileged_proc_debug=0 # unprivileged processes may not use process debugging (default 1) log_syslog_include_pid ', float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.09981909394264221
Excluding recommendation "
security.bsd.unprivileged_proc_debug=0" for parameter "log_syslog_include_pid" due to low confidence (0.00011293144052615389)
Excluding recommendation "
security.bsd.stack_guard_page=1" for parameter "stack_guard_page" due to low confidence (0.0031550044659525156)
Excluding recommendation "default 1" for parameter "read_rnd_buffer_size" due to low confidence (6.228507845662534e-05)
Excluding recommendation "default 1" for parameter "unprivileged_read_msgbuf" due to low confidence (0.010859050787985325)
Excluding recommendation "95%" for parameter "dirty_data_max" due to low confidence (0.011012431234121323)
Excluding recommendation "95%" for parameter "dirty_data" due to low confidence (0.023544978350400925)
Excluding recommendation "95
" for parameter "dirty_data_sync_percent" due to low confidence (0.02950187586247921)
Excluding recommendation "98
" for parameter "delay_min_dirty_percent" due to low confidence (0.03922269120812416)
Excluding recommendation "95%" for parameter "innodb_max_dirty_pages_pct_lwm" due to low confidence (0.0008553974330425262)
Excluding recommendation "128" for parameter "binlog_stmt_cache_size" due to low confidence (0.0031495208386331797)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(8, 23), match='min_auto_ashift'>, value=<re.Match object; span=(0, 2), match='4K'>, recommendation='4K and 13 for 8k alignment', passage='vfs.zfs.min_auto_ashift=12\n# newly created pool ashift, set to 12 for 4K and 13 for 8k alignment, zdb (default 9, 512 byte, ashift=9)\nvfs.zfs.trim.txg_batch=128 binlog_stmt_cache_size ', float_val=4.0, val_unit='K', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.27862101793289185
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(8, 23), match='min_auto_ashift'>, value=<re.Match object; span=(7, 9), match='13'>, recommendation='4K and 13 for 8k alignment', passage='vfs.zfs.min_auto_ashift=12\n# newly created pool ashift, set to 12 for 4K and 13 for 8k alignment, zdb (default 9, 512 byte, ashift=9)\nvfs.zfs.trim.txg_batch=128 binlog_stmt_cache_size ', float_val=13.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.27862101793289185
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(8, 23), match='min_auto_ashift'>, value=<re.Match object; span=(14, 16), match='8k'>, recommendation='4K and 13 for 8k alignment', passage='vfs.zfs.min_auto_ashift=12\n# newly created pool ashift, set to 12 for 4K and 13 for 8k alignment, zdb (default 9, 512 byte, ashift=9)\nvfs.zfs.trim.txg_batch=128 binlog_stmt_cache_size ', float_val=8.0, val_unit='k', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.27862101793289185
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(147, 156), match='txg_batch'>, value=<re.Match object; span=(0, 3), match='128'>, recommendation='128', passage='vfs.zfs.min_auto_ashift=12\n# newly created pool ashift, set to 12 for 4K and 13 for 8k alignment, zdb (default 9, 512 byte, ashift=9)\nvfs.zfs.trim.txg_batch=128 binlog_stmt_cache_size ', float_val=128.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.1408393383026123
Excluding recommendation "128" for parameter "max_binlog_stmt_cache_size" due to low confidence (0.016886312514543533)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(190, 205), match='def_queue_depth'>, value=<re.Match object; span=(0, 3), match='128'>, recommendation='128', passage='# max number of TRIMs per top-level vdev (default 32)\nvfs.zfs.txg.timeout=75\n# force commit Transaction Group (TXG) at 75 secs, increase to aggregated more data (default 5 sec)\nvfs.zfs.vdev.def_queue_depth=128 max_binlog_stmt_cache_size ', float_val=128.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.2029879242181778
Excluding recommendation "max_binlog_stmt_cache_size" for parameter "dirty_data_max" due to low confidence (0.011896067298948765)
Excluding recommendation "large amounts of RAM" for parameter "max_binlog_stmt_cache_size" due to low confidence (0.00017747974197845906)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(78, 93), match='write_gap_limit'>, value=<re.Match object; span=(0, 1), match='0'>, recommendation='0', passage='# max number of outstanding I/Os per top-level vdev (default 32)\nvfs.zfs.vdev.write_gap_limit=0\n# max gap between any two aggregated writes, 0 to minimize frags (default 4096, 4KB)\nZFS Tuning: The plan is to use large amounts of RAM for dirty_data_max to max_binlog_stmt_cache_size ', float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.08692196011543274
Excluding recommendation "_*_4_threads_*_1_drive=128" for parameter "thread_cache_size" due to low confidence (0.0004204052092973143)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(26, 41), match='def_queue_depth'>, value=<re.Match object; span=(0, 2), match='32'>, recommendation='32 (Q32) times', passage='# Thread 4). Set the vdev.def_queue_depth to a queue depth of 32 (Q32) times\n# four(4) threads times one(1) NVMe drive to equal 128 max number of outstanding\n# I/Os per top-level vdev. (32_queues_*_4_threads_*_1_drive=128). thread_cache_size ', float_val=32.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.3791143000125885
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(26, 41), match='def_queue_depth'>, value=<re.Match object; span=(5, 7), match='32'>, recommendation='32 (Q32) times', passage='# Thread 4). Set the vdev.def_queue_depth to a queue depth of 32 (Q32) times\n# four(4) threads times one(1) NVMe drive to equal 128 max number of outstanding\n# I/Os per top-level vdev. (32_queues_*_4_threads_*_1_drive=128). thread_cache_size ', float_val=32.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.3791143000125885
Excluding recommendation "8.85 gigabytes of dirty_data_max RAM space" for parameter "read_rnd_buffer_size" due to low confidence (0.0016093588201329112)
Excluding recommendation "larger than
" for parameter "dirty_data_sync_pct" due to low confidence (0.047647714614868164)
Excluding recommendation "8.85 gigabytes" for parameter "dirty_data_max" due to low confidence (0.0005519597325474024)
Excluding recommendation "a completely filled dirty_data_max cache" for parameter "max_binlog_stmt_cache_size" due to low confidence (0.0007698145927861333)
Excluding recommendation "max_binlog_stmt_cache_size" for parameter "dirty_data_max" due to low confidence (0.006364328321069479)
Excluding recommendation "500 gigabytes of of second tier MLC, dynamic cache" for parameter "max_binlog_stmt_cache_size" due to low confidence (0.0006474601686932147)
Excluding recommendation "
" for parameter "dirty_data_max" due to low confidence (1.9205162971047685e-05)
Excluding recommendation "2.62 gigabytes per second" for parameter "dirty_data_sync_pct" due to low confidence (0.003366862889379263)
Excluding recommendation "txg.timeout of 75 seconds" for parameter "delay_key_write" due to low confidence (0.012998796068131924)
Excluding recommendation "14.16
# gigabytes" for parameter "binlog_stmt_cache_size" due to low confidence (0.017601575702428818)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(251, 270), match='dirty_data_sync_pct'>, value=<re.Match object; span=(0, 5), match='14.16'>, recommendation='14.16\n# gigabytes', passage='# The Samsung 960 EVO NVMe 1TB has six(6) gigabytes of first tier cache plus\n# thirty six(36) gigabytes of second tier, dynamic cache. The 960 EVO can write\n# at 1.95 gigabytes per second when the drive is properly cooled meaning 14.16\n# gigabytes of dirty_data_sync_pct can be committed to the NVMe drive in binlog_stmt_cache_size ', float_val=14.16, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.14197002351284027
Excluding recommendation "async_read" for parameter "sync_write" due to low confidence (0.027239171788096428)
Excluding recommendation "
# async_write and finally scrub/resilver" for parameter "async_write" due to low confidence (0.0001491914299549535)
Excluding recommendation "sync_read, sync_write" for parameter "async_read" due to low confidence (0.0012486819177865982)
Excluding recommendation "sync_write, async_read" for parameter "sync_read" due to low confidence (0.007387757301330566)
Excluding recommendation "######" for parameter "net_write_timeout" due to low confidence (0.0004983441904187202)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(57, 68), match='delay_scale'>, value=<re.Match object; span=(0, 6), match='500000'>, recommendation='500000 ns, nanoseconds', passage='######### OFF BELOW HERE #########\n# ZFS Tuning\n#vfs.zfs.delay_scale=500000\n# (default 500000 ns, nanoseconds)\n#vfs.zfs.dirty_data_max=17179869184 binlog_stmt_cache_size ', float_val=500000.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.08941333740949631
Excluding recommendation "500000 ns, nanoseconds" for parameter "binlog_stmt_cache_size" due to low confidence (0.0007856658776290715)
Excluding recommendation "17179869184 binlog_stmt_cache_size" for parameter "dirty_data_max" due to low confidence (0.01726537197828293)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(46, 64), match='dirty_data_max_max'>, value=<re.Match object; span=(9, 12), match='10%'>, recommendation='default, 10% of RAM or up to 4GB', passage='# dirty_data can use up to 16GB RAM, equal to dirty_data_max_max (default, 10% of RAM or up to 4GB)\n#vfs.zfs.dirty_data_sync=12348030976\n# force commit Transaction Group (TXG) if dirty_data reaches 11.5GB (default 67108864, 64MB, FreeBSD 12.0; replaced by vfs.zfs.dirty_data_sync_pct on FreeBSD 12.1) binlog_stmt_cache_size ', float_val=0.1, val_unit='', hint_type=<HintType.RAM_RATIO: 1>) with confidence 0.5547305345535278
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(46, 64), match='dirty_data_max_max'>, value=<re.Match object; span=(29, 32), match='4GB'>, recommendation='default, 10% of RAM or up to 4GB', passage='# dirty_data can use up to 16GB RAM, equal to dirty_data_max_max (default, 10% of RAM or up to 4GB)\n#vfs.zfs.dirty_data_sync=12348030976\n# force commit Transaction Group (TXG) if dirty_data reaches 11.5GB (default 67108864, 64MB, FreeBSD 12.0; replaced by vfs.zfs.dirty_data_sync_pct on FreeBSD 12.1) binlog_stmt_cache_size ', float_val=4.0, val_unit='GB', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.5547305345535278
Excluding recommendation "default, 10% of RAM or up to 4GB" for parameter "dirty_data" due to low confidence (0.037101924419403076)
Excluding recommendation "default 67108864, 64MB, FreeBSD 12.0" for parameter "dirty_data_sync_pct" due to low confidence (0.0005149523494765162)
Excluding recommendation "default, 10% of RAM or up to 4GB" for parameter "dirty_data_sync" due to low confidence (0.010419338941574097)
Excluding recommendation "default 67108864, 64MB, FreeBSD 12.0" for parameter "binlog_stmt_cache_size" due to low confidence (3.082453622482717e-05)
Excluding recommendation "sha256 / sha512 checksums (default 1" for parameter "innodb_disable_sort_file_cache" due to low confidence (0.0014320634072646499)
Excluding recommendation "default 0" for parameter "no_scrub_prefetch" due to low confidence (0.006502313539385796)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(79, 95), match='nopwrite_enabled'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation='1', passage='#vfs.zfs.no_scrub_prefetch=0\n# disable prefetch on scrubs (default 0)\n#vfs.zfs.nopwrite_enabled=1\n# enable nopwrite feature, requires sha256 / sha512 checksums (default 1) innodb_disable_sort_file_cache ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.2114640772342682
Excluding recommendation "#vfs.zfs.resilver_delay=2" for parameter "binlog_stmt_cache_size" due to low confidence (0.0011016620555892587)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(145, 159), match='resilver_delay'>, value=<re.Match object; span=(0, 1), match='2'>, recommendation='2', passage='#vfs.zfs.prefetch_disable=0\n# file-level prefetching, disable if zfs-stats prefetch stats below 10% (default 0 if RAM greater than 4GB)\n#vfs.zfs.resilver_delay=2 binlog_stmt_cache_size ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.09167838096618652
Excluding recommendation "below 10%" for parameter "prefetch_disable" due to low confidence (0.03560899943113327)
Excluding recommendation "#vfs.zfs.sync_pass_rewrite=2" for parameter "binlog_stmt_cache_size" due to low confidence (0.0014321908820420504)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(117, 128), match='scrub_delay'>, value=<re.Match object; span=(0, 1), match='4'>, recommendation='4', passage='# number of pause ticks to delay resilver on a busy pool (default 2, kern.hz 1000 ticks/sec / 2 = 500 IOPS)\n#vfs.zfs.scrub_delay=4\n# number of pause ticks to delay scrub on a busy pool (default 4, kern.hz 1000 ticks/sec / 4 = 250 IOPS)\n#vfs.zfs.sync_pass_rewrite=2 binlog_stmt_cache_size ', float_val=4.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.06056031584739685
Excluding recommendation "2" for parameter "sync_pass_rewrite" due to low confidence (0.009542183019220829)
Excluding recommendation "default 32, 32*5secs=160 secs" for parameter "txg_delay" due to low confidence (0.044844452291727066)
Excluding recommendation "default 32, 32*5secs=160 secs" for parameter "delay_key_write" due to low confidence (0.01806195080280304)
Excluding recommendation "131072, 128KB, FreeBSD 12.0" for parameter "aggregation_limit" due to low confidence (0.0023025027476251125)
Excluding recommendation "default 1048576 on FreeBSD 12.1" for parameter "open_files_limit" due to low confidence (0.011423495598137379)
Excluding recommendation "async_read_max_active=3" for parameter "read_rnd_buffer_size" due to low confidence (0.00024834051146171987)
Excluding recommendation "3" for parameter "async_read" due to low confidence (0.0020270219538360834)
Excluding recommendation "1" for parameter "async_read_min_active" due to low confidence (0.002466261852532625)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(14, 35), match='async_read_max_active'>, value=<re.Match object; span=(0, 1), match='3'>, recommendation='3', passage='#vfs.zfs.vdev.async_read_max_active=3\n# max async_read I/O requests per device in pool (default 3)\n#vfs.zfs.vdev.async_read_min_active=1\n# min async_read I/O requests per device in pool (default 1) read_rnd_buffer_size ', float_val=3.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.12710611522197723
Excluding recommendation "max_active I/Os are all active" for parameter "dirty_data_max" due to low confidence (0.000965493090916425)
Excluding recommendation "30" for parameter "async_write_active_min_dirty_percent" due to low confidence (0.0009357085218653083)
Excluding recommendation "60" for parameter "async_write_active_max_dirty_percent" due to low confidence (0.004972577095031738)
Excluding recommendation "max_active I/Os (default 30%)" for parameter "innodb_max_dirty_pages_pct_lwm" due to low confidence (0.00012012168008368462)
Excluding recommendation "I/Os are all active (default 60%)" for parameter "max_active" due to low confidence (0.00015111449465621263)
Excluding recommendation "1" for parameter "async_write_min_active" due to low confidence (0.002634979784488678)
Excluding recommendation "max_active=10" for parameter "net_write_timeout" due to low confidence (0.00018842410645447671)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(14, 36), match='async_write_max_active'>, value=<re.Match object; span=(0, 2), match='10'>, recommendation='10', passage='#vfs.zfs.vdev.async_write_max_active=10\n# max async_write I/O requests per device in pool (default 10)\n#vfs.zfs.vdev.async_write_min_active=1\n# min async_write I/O requests per device in pool (default 1) net_write_timeout ', float_val=10.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.0888226330280304
Excluding recommendation "max_active=10" for parameter "async_write" due to low confidence (0.0006970657268539071)
Excluding recommendation "#vfs.zfs.vdev.max_active=1000" for parameter "max_binlog_stmt_cache_size" due to low confidence (0.012299831956624985)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(14, 24), match='max_active'>, value=<re.Match object; span=(0, 4), match='1000'>, recommendation='1000', passage='#vfs.zfs.vdev.max_active=1000\n# max I/Os of any type active per device in pool (default 1000)\n#vfs.zfs.vdev.read_gap_limit=32768\n# max gap between any two reads being aggregated (default 32768, 32KB) max_binlog_stmt_cache_size ', float_val=1000.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.16842997074127197
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(108, 122), match='read_gap_limit'>, value=<re.Match object; span=(0, 5), match='32768'>, recommendation='32768', passage='#vfs.zfs.vdev.max_active=1000\n# max I/Os of any type active per device in pool (default 1000)\n#vfs.zfs.vdev.read_gap_limit=32768\n# max gap between any two reads being aggregated (default 32768, 32KB) max_binlog_stmt_cache_size ', float_val=32768.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.3205222487449646
Excluding recommendation "max_active=2" for parameter "log_bin_use_v" due to low confidence (2.5169603759422898e-05)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(14, 30), match='scrub_max_active'>, value=<re.Match object; span=(0, 1), match='2'>, recommendation='2', passage='#vfs.zfs.vdev.scrub_max_active=2\n# max scrub I/Os active on each device (default 2)\n#vfs.zfs.vdev.scrub_min_active=1\n# min scrub I/Os active on each device (default 1) log_bin_use_v1_row_events ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.08836549520492554
Excluding recommendation "v1" for parameter "_row_events" due to low confidence (0.009021702222526073)
Excluding recommendation "1" for parameter "scrub_min_active" due to low confidence (0.005480045918375254)
Excluding recommendation "max_binlog_stmt_cache_size" for parameter "sync_read_min_active" due to low confidence (0.009363134391605854)
Excluding recommendation "max_binlog_stmt_cache_size" for parameter "sync_read" due to low confidence (0.011441273614764214)
Excluding recommendation "min sync_read I/O requests" for parameter "max_binlog_stmt_cache_size" due to low confidence (0.001983843743801117)
Excluding recommendation "10" for parameter "sync_read_max_active" due to low confidence (0.013999165035784245)
Excluding recommendation "10" for parameter "sync_write_min_active" due to low confidence (0.00556601956486702)
Excluding recommendation "net_write_timeout" for parameter "sync_write" due to low confidence (0.003405258757993579)
Excluding recommendation "min" for parameter "net_write_timeout" due to low confidence (0.0024694891180843115)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(14, 35), match='sync_write_max_active'>, value=<re.Match object; span=(0, 2), match='10'>, recommendation='10', passage='#vfs.zfs.vdev.sync_write_max_active=10\n# max sync_write I/O requests per device in pool (default 10)\n#vfs.zfs.vdev.sync_write_min_active=10\n# min sync_write I/O requests per device in pool (default 10) net_write_timeout ', float_val=10.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.05107292905449867
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(14, 29), match='trim_max_active'>, value=<re.Match object; span=(0, 2), match='64'>, recommendation='64', passage='#vfs.zfs.vdev.trim_max_active=64\n# max trim I/O requests per device in pool (default 64)\n#vfs.zfs.vdev.write_gap_limit=4096\n# max gap between any two writes being aggregated, 16K bittorrent, 4k nfs, 4k mysql (default 4096, 4KB) max_binlog_stmt_cache_size ', float_val=64.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.13341957330703735
Excluding recommendation "default 4096, 4KB" for parameter "max_binlog_stmt_cache_size" due to low confidence (0.007162860594689846)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(103, 118), match='write_gap_limit'>, value=<re.Match object; span=(0, 4), match='4096'>, recommendation='4096', passage='#vfs.zfs.vdev.trim_max_active=64\n# max trim I/O requests per device in pool (default 64)\n#vfs.zfs.vdev.write_gap_limit=4096\n# max gap between any two writes being aggregated, 16K bittorrent, 4k nfs, 4k mysql (default 4096, 4KB) max_binlog_stmt_cache_size ', float_val=4096.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.09579695016145706
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(208, 228), match='innodb_ft_cache_size'>, value=<re.Match object; span=(8, 9), match='1'>, recommendation='default 1', passage='# 256MB each so the L2ARC can be quickly seeded. Contrary to myth, enterprise\n# class SSDs can last for many years under constant read/write abuse of a web\n# server.\n#vfs.zfs.l2arc_noprefetch=1\n# (default 1) innodb_ft_cache_size ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.05240563675761223
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(177, 191), match='arc_noprefetch'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation='1', passage='# 256MB each so the L2ARC can be quickly seeded. Contrary to myth, enterprise\n# class SSDs can last for many years under constant read/write abuse of a web\n# server.\n#vfs.zfs.l2arc_noprefetch=1\n# (default 1) innodb_ft_cache_size ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.06949127465486526
Excluding recommendation "#hw.hn.enable_udp4cs=1" for parameter "innodb_flush_log_at_trx_commit" due to low confidence (0.0018309325678274035)
Excluding recommendation "4cs=1" for parameter "enable_udp" due to low confidence (0.016176946461200714)
Excluding recommendation "268435456" for parameter "arc_write_boost" due to low confidence (0.039528220891952515)
Excluding recommendation "#vfs.zfs.l2arc_write_boost" for parameter "arc_write_max" due to low confidence (0.0020832752343267202)
Excluding recommendation "6cs=1" for parameter "enable_udp" due to low confidence (0.000747991434764117)
Excluding recommendation "1" for parameter "enable_tx_fc_filter" due to low confidence (0.019151940941810608)
Excluding recommendation "#hw.ixl.enable_tx_fc_filter=1" for parameter "master_verify_checksum" due to low confidence (0.0009783765999600291)
Excluding recommendation "zero-copy BPF buffers, breaks dhcpd ! (default 0" for parameter "read_rnd_buffer_size" due to low confidence (0.0015261995140463114)
Excluding recommendation "0" for parameter "optimize_writers" due to low confidence (0.024305755272507668)
Excluding recommendation "0" for parameter "zerocopy_enable" due to low confidence (0.015754951164126396)
Excluding recommendation "do not log redirected ICMP packet attempts" for parameter "net_write_timeout" due to low confidence (0.0008955483208410442)
Excluding recommendation "0" for parameter "log_redirect" due to low confidence (0.0043320851400494576)
Excluding recommendation "#net.inet.ip.process_options=1" for parameter "net_write_timeout" due to low confidence (0.005415801424533129)
Excluding recommendation "0" for parameter "accept_sourceroute" due to low confidence (0.041208621114492416)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(199, 214), match='process_options'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation='1', passage='#net.inet.ip.accept_sourceroute=0\n# drop source routed packets since they can not be trusted (default 0)\n#net.inet.ip.portrange.randomized=1 # randomize outgoing upper ports (default 1)\n#net.inet.ip.process_options=1 net_write_timeout ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.17479853332042694
Excluding recommendation "incoming and outgoing connections" for parameter "explicit_defaults_for_timestamp" due to low confidence (0.0032577766105532646)
Excluding recommendation "1" for parameter "always_keepalive" due to low confidence (0.01964760571718216)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(149, 158), match='time_wait'>, value=<re.Match object; span=(1, 6), match='27767'>, recommendation='~27767', passage='#net.inet.tcp.keepintvl=75000\n# time between tcp.keepcnt keep alive probes (default 75000, 75 secs)\n#net.inet.tcp.maxtcptw=50000\n# max number of tcp time_wait states for closing connections (default ~27767) innodb_flush_log_at_timeout ', float_val=27767.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.07564153522253036
Excluding recommendation "~27767" for parameter "innodb_flush_log_at_timeout" due to low confidence (0.0012512333923950791)
Excluding recommendation "Max number of TCP Segments per Reassembly Queue" for parameter "net_write_timeout" due to low confidence (0.028122367337346077)
Excluding recommendation "30" for parameter "rexmit_min" due to low confidence (0.003727196017280221)
Excluding recommendation "min+slop (default 200ms" for parameter "net_write_timeout" due to low confidence (0.009020840749144554)
Excluding recommendation "200" for parameter "rexmit_slop" due to low confidence (0.018762456253170967)
Excluding recommendation "makeoptions WITH_EXTRA_TCP_STACKS=1" for parameter "functions_available" due to low confidence (0.0002684029168449342)
Excluding recommendation "high
# precision TCP timer" for parameter "key_buffer_size" due to low confidence (0.000632902083452791)
Excluding recommendation "bandwidth" for parameter "binlog_stmt_cache_size" due to low confidence (0.0002742534561548382)
Excluding recommendation "default 0 ; disabled" for parameter "rtt_scaling" due to low confidence (0.008112733252346516)
Excluding recommendation "default 0 ; disabled" for parameter "binlog_stmt_cache_size" due to low confidence (0.004071067553013563)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(201, 212), match='rtt_scaling'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation='1', passage='# independent of path round-trip time (RTT) leading to lower latency for\n# interactive sessions when the connection is saturated by bulk data transfers.\n# Default is 0 (disabled)\n#net.inet.tcp.cc.htcp.rtt_scaling=1\n# (default 0 ; disabled) explicit_defaults_for_timestamp ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.1597013771533966
Excluding recommendation "default 0 ; disabled" for parameter "explicit_defaults_for_timestamp" due to low confidence (0.04596448689699173)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(70, 79), match='alpha_inc'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation='1', passage='# CDG window increase factor (alpha) is increased by one(1) MSS every alpha_inc\n# RTTs during congestion avoidance mode. Setting alpha_inc to 1 results in the\n# most aggressive growth of the window increase factor over time while a higher\n# alpha_inc value results in slower growth.\n#net.inet.tcp.cc.cdg.alpha_inc=1 innodb_autoextend_increment ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.07074300199747086
Excluding recommendation "Setting alpha_inc to 1" for parameter "innodb_autoextend_increment" due to low confidence (0.0037239037919789553)
Excluding recommendation "default 0" for parameter "innodb_api_enable_binlog" due to low confidence (0.009586970321834087)
Excluding recommendation "ACKs" for parameter "explicit_defaults_for_timestamp" due to low confidence (0.022454196587204933)
Excluding recommendation "base value" for parameter "max_delayed_threads" due to low confidence (0.0009062584722414613)
Excluding recommendation "base value" for parameter "snd_una" due to low confidence (0.00018414731312077492)
Excluding recommendation "1" for parameter "max_binlog_stmt_cache_size" due to low confidence (0.0015942216850817204)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(126, 137), match='do_tcpdrain'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation='1', passage='# net.inet.tcp.rexmit_drop_options=0\n# (default 0)\n# Enable tcp_drain routine for extra help when low on mbufs\n# net.inet.tcp.do_tcpdrain=1 # (default 1) max_binlog_stmt_cache_size ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.2642229497432709
Excluding recommendation "max_binlog_stmt_cache_size" for parameter "tcp_drain" due to low confidence (0.004829442128539085)
Excluding recommendation "0" for parameter "rexmit_drop_options" due to low confidence (0.007922088727355003)
Excluding recommendation "multiple slices are enabled, the hash type" for parameter "explicit_defaults_for_timestamp" due to low confidence (0.022536393254995346)
Excluding recommendation "1" for parameter "max_slices" due to low confidence (0.02976326271891594)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(303, 336), match='mysql_native_password_proxy_users'>, value=<re.Match object; span=(2, 3), match='2'>, recommendation='="2" hashes', passage='# how incoming traffic is steered to each slice. A slice is comprised of a set\n# of receive queues and an associated interrupt thread. Hashing is disabled\n# when using a single slice (hw.mxge.max_slices=1). The options are: ="1"\n# hashes on the source and destination IPv4 addresses. ="2" hashes on the mysql_native_password_proxy_users ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.0885106772184372
Excluding recommendation "1" for parameter "max_slices" due to low confidence (0.028244320303201675)
Excluding recommendation "default 4" for parameter "delay_key_write" due to low confidence (0.003465343499556184)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(9, 22), match='rss_hash_type'>, value=<re.Match object; span=(0, 1), match='4'>, recommendation='4"\n# (default 4', passage='#hw.mxge.rss_hash_type="4"\n# (default 4)\n# Myricom mxge(4): flow control manages the rate of data transmission between\n# two nodes preventing a fast sender from overwhelming a slow receiver.\n# Ethernet "PAUSE" frames pause transmission of all traffic on a physical link, delay_key_write ', float_val=4.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.1302952915430069
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(9, 22), match='rss_hash_type'>, value=<re.Match object; span=(14, 15), match='4'>, recommendation='4"\n# (default 4', passage='#hw.mxge.rss_hash_type="4"\n# (default 4)\n# Myricom mxge(4): flow control manages the rate of data transmission between\n# two nodes preventing a fast sender from overwhelming a slow receiver.\n# Ethernet "PAUSE" frames pause transmission of all traffic on a physical link, delay_key_write ', float_val=4.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.1302952915430069
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(201, 227), match='innodb_api_disable_rowlock'>, value=<re.Match object; span=(8, 9), match='1'>, recommendation='default 1, enabled', passage='# disables ethernet flow control on the Myricom mxge(4) interface.\n# http://virtualthreads.blogspot.com/2006/02/beware-ethernet-flow-control.html\n#hw.mxge.flow_control_enabled=0\n# (default 1, enabled) innodb_api_disable_rowlock ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.07451223582029343
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(155, 175), match='flow_control_enabled'>, value=<re.Match object; span=(8, 9), match='1'>, recommendation='default 1, enabled', passage='# disables ethernet flow control on the Myricom mxge(4) interface.\n# http://virtualthreads.blogspot.com/2006/02/beware-ethernet-flow-control.html\n#hw.mxge.flow_control_enabled=0\n# (default 1, enabled) innodb_api_disable_rowlock ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.08434509485960007
Excluding recommendation "netstat -Q"" for parameter "intr_queue_drops" due to low confidence (0.009863588958978653)
Excluding recommendation "greater then zero(0)." for parameter "queue_drops" due to low confidence (0.04118802770972252)
Excluding recommendation "net.inet.ip.intr_queue_drops"" for parameter "max_binlog_stmt_cache_size" due to low confidence (0.0010008899262174964)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(66, 78), match='queue_maxlen'>, value=<re.Match object; span=(33, 34), match='0'>, recommendation='queue_drops is greater then zero(0).', passage='# net.inet.ip.intr_queue_drops" and "netstat -Q" and increase the queue_maxlen\n# if queue_drops is greater then zero(0). The real problem is the CPU or NIC is\n# not fast enough to handle the traffic, but if you are already at the limit of\n# your network then increasing these values will help. max_binlog_stmt_cache_size ', float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.08792950212955475
Excluding recommendation "256" for parameter "intr_queue_maxlen" due to low confidence (0.01802348531782627)
Excluding recommendation "256" for parameter "netisr_maxqlen" due to low confidence (0.006224246695637703)
Excluding recommendation "256" for parameter "innodb_buffer_pool_size" due to low confidence (0.00045652379048988223)
Excluding recommendation "
#" for parameter "rx_processing_limit" due to low confidence (0.008708455599844456)
Excluding recommendation "dev.igb.0.rx_processing_limit=-1
" for parameter "innodb_flush_log_at_timeout" due to low confidence (0.001729985699057579)
Excluding recommendation "dropped
" for parameter "missed_packets" due to low confidence (0.0010689321206882596)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(304, 321), match='net_write_timeout'>, value=<re.Match object; span=(0, 3), match='4.4'>, recommendation='4.4 watts', passage='# loss and latency spikes when the interface transitions from low power mode.\n# Packet loss from EEE will not show up in the missed_packets or dropped\n# counter because the packet was not dropped, but lost by the network card\n# during the transition phase. The Intel i350-T2 only requires 4.4 watts with net_write_timeout ', float_val=4.4, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.336012601852417
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(84, 96), match='eee_disabled'>, value=<re.Match object; span=(8, 9), match='0'>, recommendation='default 0, enabled', passage='# times on boot. https://en.wikipedia.org/wiki/Energy-Efficient_Ethernet\n#dev.igb.0.eee_disabled=1\n# (default 0, enabled)\n#dev.igb.1.eee_disabled=1\n# (default 0, enabled) innodb_flush_log_at_timeout ', float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.10235755890607834
Excluding recommendation "default 0, enabled" for parameter "innodb_flush_log_at_timeout" due to low confidence (0.004969432484358549)
Excluding recommendation "0" for parameter "icmplim_output" due to low confidence (0.029437469318509102)
Excluding recommendation "1" for parameter "net_write_timeout" due to low confidence (0.03863796591758728)
Excluding recommendation "20ms" for parameter "innodb_max_dirty_pages_pct_lwm" due to low confidence (0.013132530264556408)
Excluding recommendation "1
# (default 1" for parameter "delayed_ack" due to low confidence (0.03410470485687256)
Excluding recommendation "100" for parameter "skip_networking" due to low confidence (0.00026871825684793293)
Excluding recommendation "1
# (default 0" for parameter "allow_raw_sockets" due to low confidence (0.020445115864276886)
Excluding recommendation "security.jail.enforce_statfs=2" for parameter "mysql_native_password_proxy_users" due to low confidence (0.0014712272677570581)
Excluding recommendation "2" for parameter "enforce_statfs" due to low confidence (0.01757989265024662)
Excluding recommendation "security.jail.sysvipc_allowed=0" for parameter "log_statements_unsafe_for_binlog" due to low confidence (0.0010751361260190606)
Excluding recommendation "0" for parameter "set_hostname_allowed" due to low confidence (0.0014929737662896514)
Excluding recommendation "0" for parameter "sysvipc_allowed" due to low confidence (0.0017366481479257345)
Excluding recommendation "1" for parameter "socket_unixiproute_only" due to low confidence (0.02576054446399212)
Excluding recommendation "0" for parameter "chflags_allowed" due to low confidence (0.006978449411690235)
Excluding recommendation "stathz/10" for parameter "explicit_defaults_for_timestamp" due to low confidence (0.0010805859928950667)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(51, 71), match='max_threads_per_proc'>, value=<re.Match object; span=(0, 4), match='9000'>, recommendation='9000', passage='# (default 12)\n# threads per process\n#kern.threads.max_threads_per_proc=9000\n# create core dump file on "exited on signal 6"\n#kern.coredump=1\n# (default 1) log_syslog_include_pid ', float_val=9000.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.25506025552749634
Excluding recommendation "12" for parameter "log_syslog_include_pid" due to low confidence (0.011527927592396736)
Excluding recommendation "#kern.sugid_coredump=1
" for parameter "innodb_flush_log_at_timeout" due to low confidence (0.0004415573494043201)
Excluding recommendation "1
# (default 0" for parameter "sugid_coredump" due to low confidence (0.018959980458021164)
Excluding recommendation "#net.inet.tcp.always_keepalive=1" for parameter "innodb_flush_log_at_timeout" due to low confidence (0.0077176340855658054)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(112, 128), match='always_keepalive'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation='1', passage='#net.inet.tcp.keepidle=10000\n# (default 7200000 )\n#net.inet.tcp.keepintvl=5000\n# (default 75000 )\n#net.inet.tcp.always_keepalive=1 # (default 1) innodb_flush_log_at_timeout ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.6158419251441956
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(14, 28), match='per_cpu_timers'>, value=<re.Match object; span=(0, 1), match='0'>, recommendation='0', passage='#net.inet.tcp.per_cpu_timers = 0\n# seeding cryptographic random number generators is provided by the /dev/random\n# device, which provides psudo "real" randomness. The arc4random(3) library call\n# provides a pseudo-random sequence which is generally reckoned to be suitable net_write_timeout ', float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.3260023891925812
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(273, 290), match='net_write_timeout'>, value=<re.Match object; span=(3, 10), match='4random'>, recommendation='arc4random(3)', passage='#net.inet.tcp.per_cpu_timers = 0\n# seeding cryptographic random number generators is provided by the /dev/random\n# device, which provides psudo "real" randomness. The arc4random(3) library call\n# provides a pseudo-random sequence which is generally reckoned to be suitable net_write_timeout ', float_val=4.0, val_unit='random', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.07709778100252151
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(273, 290), match='net_write_timeout'>, value=<re.Match object; span=(11, 12), match='3'>, recommendation='arc4random(3)', passage='#net.inet.tcp.per_cpu_timers = 0\n# seeding cryptographic random number generators is provided by the /dev/random\n# device, which provides psudo "real" randomness. The arc4random(3) library call\n# provides a pseudo-random sequence which is generally reckoned to be suitable net_write_timeout ', float_val=3.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.07709778100252151
Excluding recommendation "RAND_bytes(3) and RAND_add(3)." for parameter "delay_key_write" due to low confidence (0.00012492579116951674)
Excluding recommendation "1_row_events" for parameter "log_bin_use_v" due to low confidence (0.00923763308674097)
Excluding recommendation "log_bin_use_v1_row_events" for parameter "point_to_point" due to low confidence (0.0036486550234258175)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(165, 176), match='_row_events'>, value=<re.Match object; span=(13, 14), match='1'>, recommendation='log_bin_use_v1', passage='# default 1\n#kern.random.sys.harvest.ethernet=1\n# default 1\n#kern.random.sys.harvest.point_to_point=1 # default 1\n#kern.random.sys.harvest.interrupt=1 log_bin_use_v1_row_events ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.07714834809303284
Excluding recommendation "YES" for parameter "clear_tmp_enable" due to low confidence (0.03554839268326759)
Excluding recommendation "clear /tmp on boot" for parameter "log_syslog_include_pid" due to low confidence (0.0013264687731862068)
Excluding recommendation "YES"" for parameter "freebsd_network_tuning" due to low confidence (0.0030374329071491957)
Excluding recommendation "YES" for parameter "gateway_enable" due to low confidence (0.0470699705183506)
Excluding recommendation "PF firewall
pf_enable="YES" for parameter "mysql_native_password_proxy_users" due to low confidence (0.0058767651207745075)
Excluding recommendation "
pflog_flags=""" for parameter "pflog_flags" due to low confidence (0.0005097590619698167)
Excluding recommendation "additional flags" for parameter "innodb_undo_log_truncate" due to low confidence (0.017248041927814484)
Excluding recommendation "
pflog_flags" for parameter "pflog_logfile" due to low confidence (0.00911027006804943)
Excluding recommendation "
ifconfig_igb0" for parameter "max_binlog_stmt_cache_size" due to low confidence (0.00010249027400277555)
Excluding recommendation "max_binlog_stmt_cache_size" for parameter "ifconfig_igb" due to low confidence (0.00018727671704255044)
Excluding recommendation "
ifconfig_igb1" for parameter "innodb_api_disable_rowlock" due to low confidence (6.787956954212859e-05)
Excluding recommendation "10.10.10.1/24" for parameter "ifconfig_igb" due to low confidence (0.0004449780099093914)
Excluding recommendation "#ifconfig_igb1_ipv6" for parameter "innodb_max_dirty_pages_pct_lwm" due to low confidence (0.00038077685167081654)
Excluding recommendation "10.10.10.1/24" for parameter "ifconfig_igb" due to low confidence (0.0028959738556295633)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(103, 121), match='show_compatibility'>, value=<re.Match object; span=(0, 2), match='56'>, recommendation='56', passage='# ipv6 lan static\n#ipv6_activate_all_interfaces="YES"\n#ifconfig_igb1_ipv6="inet6 fddd::1/64 -lro -tso" show_compatibility_56 ', float_val=56.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.2594034969806671
Excluding recommendation "show_compatibility_56" for parameter "ifconfig_igb" due to low confidence (0.0009858147241175175)
Excluding recommendation "wlanmode hostap" offline_mode" for parameter "create_args_wlan" due to low confidence (0.0007930886931717396)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(98, 107), match='wlans_ath'>, value=<re.Match object; span=(4, 5), match='0'>, recommendation='wlan0', passage='#ipv6_defaultrouter="fddd::1"\n# wireless, https://calomel.org/freebsd_wireless_access_point.html\n#wlans_ath0="wlan0"\n#create_args_wlan0="wlanmode hostap" offline_mode ', float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.0680801197886467
Excluding recommendation "#ipv6_defaultrouter="fddd::1"" for parameter "freebsd_wireless_access_point" due to low confidence (0.00014878097863402218)
Excluding recommendation "create_args_wlan0="wlanmode hostap" for parameter "offline_mode" due to low confidence (0.00019580996013246477)
Excluding recommendation "#hostapd_enable="YES"" for parameter "log_syslog_include_pid" due to low confidence (0.00043165296665392816)
Excluding recommendation "inet 10.0.100.1" for parameter "ifconfig_wlan" due to low confidence (0.0014658549334853888)
Excluding recommendation "#kern_securelevel_enable="YES"" for parameter "key_cache_block_size" due to low confidence (0.0017643205355852842)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(1, 17), match='kern_securelevel'>, value=<re.Match object; span=(0, 1), match='2'>, recommendation='2', passage='#kern_securelevel_enable="YES"\n#kern_securelevel="2"\n### EOF ###\nOPTIONAL: Rebuilding the Kernel to use Recent ACKnowledgment (RACK)\nIf you wish to use the new Netflix RACK TCP stack the kernel must be rebuilt key_cache_block_size ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.10024626553058624
Excluding recommendation "
April 2021
" for parameter "innodb_replication_delay" due to low confidence (0.0012849555350840092)
Excluding recommendation "innodb_replication_delay" for parameter "freebsd_network_tuning" due to low confidence (0.0031524584628641605)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(239, 257), match='show_compatibility'>, value=<re.Match object; span=(0, 5), match='10000'>, recommendation='10000, Search string(s', passage='calomel.org is a SSL enabled site and this time also includes the https\nnegotiation phase.\ncalomel@freebsd10:\n./calomel_http_log_distribution_performance.pl\n.:.\nCalomel Webserver Distribution Statistics\nLog lines: 10000, Search string(s): show_compatibility_56 ', float_val=10000.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.058403853327035904
Excluding recommendation "
" for parameter "calomel_http_log_distribution_performance" due to low confidence (0.00035949100856669247)
Excluding recommendation "
7142" for parameter "innodb_flushing_avg_loops" due to low confidence (0.006647044327110052)
Excluding recommendation "
6157" for parameter "innodb_flushing_avg_loops" due to low confidence (0.01149300578981638)
Excluding recommendation "
" for parameter "innodb_ft_num_word_optimize" due to low confidence (0.0038321621250361204)
Excluding recommendation "
" for parameter "innodb_purge_batch_size" due to low confidence (0.009650911204516888)
Excluding recommendation "10000, Search string(s" for parameter "explicit_defaults_for_timestamp" due to low confidence (0.030118726193904877)
Excluding recommendation "
" for parameter "web_server_distribution_performance" due to low confidence (0.0004827099328394979)
Excluding recommendation "
9669" for parameter "innodb_flushing_avg_loops" due to low confidence (0.018052801489830017)
Excluding recommendation "
6198" for parameter "log_queries_not_using_indexes" due to low confidence (0.007344244513660669)
Excluding recommendation "
3718" for parameter "innodb_flushing_avg_loops" due to low confidence (0.005751725751906633)
Excluding recommendation "
1239" for parameter "innodb_max_dirty_pages_pct_lwm" due to low confidence (0.013719897717237473)
Excluding recommendation "10000, Search string(s" for parameter "slow_query_log" due to low confidence (0.04672667011618614)
Excluding recommendation "10000, Search string(s): slow_query_log " for parameter "calomel_http_log_distribution_performance" due to low confidence (0.0003607827238738537)
Excluding recommendation "
1042" for parameter "innodb_purge_batch_size" due to low confidence (0.032541099935770035)
Excluding recommendation ".|................................................................
898" for parameter "innodb_table_locks" due to low confidence (0.008735706098377705)
Excluding recommendation "
682" for parameter "innodb_flushing_avg_loops" due to low confidence (0.005592075176537037)
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(138, 156), match='show_compatibility'>, value=<re.Match object; span=(1, 4), match='539'>, recommendation='\n539 _||||_____________________________________________________________ show_compatibility_56', passage='.||||.............................................................\n539 _||||_____________________________________________________________ show_compatibility_56 ', float_val=539.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.058340542018413544
Adding hint TuningHint(doc_id=67, param=<re.Match object; span=(138, 156), match='show_compatibility'>, value=<re.Match object; span=(91, 93), match='56'>, recommendation='\n539 _||||_____________________________________________________________ show_compatibility_56', passage='.||||.............................................................\n539 _||||_____________________________________________________________ show_compatibility_56 ', float_val=56.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.058340542018413544
Excluding recommendation "_|||||||||________________________________________________________
" for parameter "innodb_cmp_per_index_enabled" due to low confidence (0.004697223659604788)
Excluding recommendation "
179" for parameter "automatic_sp_privileges" due to low confidence (0.030618101358413696)
Creating hints for document 68
Creating hints for document 69
Creating hints for document 70
Excluding recommendation "don’t increase it" for parameter "mysql_native_password_proxy_users" due to low confidence (0.00219672336243093)
Adding hint TuningHint(doc_id=70, param=<re.Match object; span=(280, 295), match='max_connections'>, value=<re.Match object; span=(0, 3), match='100'>, recommendation='100 concurrent connections', passage='PostgreSQL supports various types of indexes such as B-Tree (default), Hash, GiST, SP-GiST, and GIN. Here are the detailed steps to create PostgreSQL index.\n5. Increase maximum connections\nBy default, PostgreSQL supports a maximum of 100 concurrent connections. This is stored in max_connections server variable. You can increase this number to support more concurrent connections and keep users from waiting. However, each connection consumes memory, so don’t increase it, unless required. mysql_native_password_proxy_users ', float_val=100.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.21977302432060242
Creating hints for document 71
Creating hints for document 72
Creating hints for document 73
Excluding recommendation "One or More Columns max_heap_table_size" for parameter "offset_list" due to low confidence (9.404756383446511e-06)
Adding hint TuningHint(doc_id=73, param=<re.Match object; span=(119, 132), match='derived_table'>, value=<re.Match object; span=(0, 2), match='24'>, recommendation='24 hours"', passage='Note: permalink here is used as an ID for each company or person. It\'s only unique in companies.\nview: company_facts {\nderived_table: {\npersist_for: "24 hours"\n# This derived table is built in MySQL\nsql: SELECT\ncompanies.permalink AS permalink,\ncompanies.name AS name, innodb_file_per_table ', float_val=24.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.09612319618463516
Excluding recommendation "
persist_for: "24 hours" for parameter "company_facts" due to low confidence (0.006465138401836157)
Excluding recommendation "
companies" for parameter "innodb_file_per_table" due to low confidence (0.001920357346534729)
Adding hint TuningHint(doc_id=73, param=<re.Match object; span=(136, 147), match='persist_for'>, value=<re.Match object; span=(0, 2), match='24'>, recommendation='24 hours', passage='Note: permalink here is used as an ID for each company or person. It\'s only unique in companies.\nview: company_facts {\nderived_table: {\npersist_for: "24 hours"\n# This derived table is built in MySQL\nsql: SELECT\ncompanies.permalink AS permalink,\ncompanies.name AS name, innodb_file_per_table ', float_val=24.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.2197965532541275
Excluding recommendation "equal to or less than 1" for parameter "query_cache_size" due to low confidence (0.0003324132994748652)
Excluding recommendation "price_amount" for parameter "acquired_permalink" due to low confidence (0.033109214156866074)
Excluding recommendation "
acquisitions.acquired_permalink,
acquisitions" for parameter "price_amount" due to low confidence (0.011967401951551437)
Excluding recommendation "
ON companies.permalink = acquired.acquired_permalink" for parameter "long_query_time" due to low confidence (6.823678995715454e-05)
Excluding recommendation "companies.permalink" for parameter "acquired_permalink" due to low confidence (0.026943571865558624)
Excluding recommendation "["permalink"] log_slow_admin_statements" for parameter "derived_table" due to low confidence (0.006532581057399511)
Excluding recommendation "158,772 * 189,108" for parameter "company_facts" due to low confidence (0.0021584893111139536)
Excluding recommendation "158,772 * 189,108" for parameter "log_slow_admin_statements" due to low confidence (0.002428973326459527)
Adding hint TuningHint(doc_id=73, param=<re.Match object; span=(0, 11), match='persist_for'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation='1 minute', passage='persist_for: "1 minute"\nsql: SELECT\netc...\nOnce I do that, I can refresh my Explore, rebuild the derived table, and run it again:\nWow. That\'s a huge jump in efficiency! What changed? query_cache_size ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.2419482171535492
Excluding recommendation "persist_for: "1 minute"" for parameter "query_cache_size" due to low confidence (0.007123298477381468)
Excluding recommendation "189,108 to 1" for parameter "company_facts" due to low confidence (0.001675478066317737)
Excluding recommendation "158,772 * 1" for parameter "innodb_default_row_format" due to low confidence (5.9035672165919095e-05)
Creating hints for document 74
Creating hints for document 75
Creating hints for document 76
Adding hint TuningHint(doc_id=76, param=<re.Match object; span=(20, 33), match='database_name'>, value=<re.Match object; span=(0, 5), match='10000'>, recommendation='10000', passage='pgbench\xa0 -i\xa0 -s 50\xa0 database_name\nAfterward, I executed the command below to test the database with 150 clients\npgbench\xa0 -c 10\xa0 -j 2\xa0 -t\xa0 10000\xa0 database_name\nAs you see, in our initial baseline test, I instructed pgbench to execute with ten different client sessions. Each client session will execute 10,000 transactions. log_syslog_include_pid ', float_val=10000.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.23858332633972168
Excluding recommendation "10,000 transactions" for parameter "log_syslog_include_pid" due to low confidence (0.00183481490239501)
Excluding recommendation "how many server connections to allow per user/database pair" for parameter "mysql_native_password_proxy_users" due to low confidence (0.000590610143262893)
Adding hint TuningHint(doc_id=76, param=<re.Match object; span=(117, 132), match='max_client_conn'>, value=<re.Match object; span=(0, 3), match='100'>, recommendation='100', passage='We will make use of the transaction pooling mode. Inside the pgbouncer.ini file, I modified the following parameter:\nmax_client_conn = 100\nThe max_client_conn parameter defines how many client connections to pgbouncer (instead of Postgres) are allowed.\ndefault_pool_size = 25\nThe default_pool_size parameter defines how many server connections to allow per user/database pair. mysql_native_password_proxy_users ', float_val=100.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.20399828255176544
Excluding recommendation "max_binlog_stmt_cache_size" for parameter "database_name" due to low confidence (0.029784005135297775)
Excluding recommendation "1000" for parameter "max_binlog_stmt_cache_size" due to low confidence (0.001947944751009345)
Excluding recommendation "
port  = 5432" for parameter "thread_cache_size" due to low confidence (0.0018197130411863327)
Excluding recommendation "
port  = 5432" for parameter "connection_cache" due to low confidence (0.034578729420900345)
Excluding recommendation "
port  = 5432" for parameter "postgres_database_name" due to low confidence (0.0037770511116832495)
Excluding recommendation "‘postgres_database_name’’" for parameter "listen_addresses" due to low confidence (0.004008015152066946)
Excluding recommendation "9999  -c  10  -C  -t 1000" for parameter "postgres_database" due to low confidence (0.03246617689728737)
Excluding recommendation "
gbench  -p 9999" for parameter "mysql_native_password_proxy_users" due to low confidence (0.0008516190573573112)
Creating hints for document 77
Excluding recommendation "Linux" for parameter "mysql_native_password_proxy_users" due to low confidence (3.3789970075304154e-06)
Adding hint TuningHint(doc_id=77, param=<re.Match object; span=(0, 18), match='max_execution_time'>, value=<re.Match object; span=(7, 9), match='30'>, recommendation='lower (30-60 sec', passage='max_execution_time – lower (30-60 sec) is better to prevent resources hogs from lagging out the server. But you may need higher execution times for long processes like imports, exports, backups.max_input_time – lower (60 sec) is better. Increase only if you’re trying to import something that takes forever.max_input_vars – set to “1000”, unless some plugins need higher.memory_limit – try “256M” to be safe. Raise if you have heavy plugins. I like to set lower so I’m notified immediately when there are memory hogs. The “error_log” will tell you if you need more.zlib.output_compression – may or may not help. I leave it off.\n9. Use an updated MySQL fork version (INT-ADV, LOW)\nMost people only know of MySQL, which is now acquired/owned by Oracle. There’s also MariaDB (a fork of MySQL by its original creators) and Percona, and also others. max_binlog_stmt_cache_size ', float_val=30.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.38505327701568604
Adding hint TuningHint(doc_id=77, param=<re.Match object; span=(0, 18), match='max_execution_time'>, value=<re.Match object; span=(10, 12), match='60'>, recommendation='lower (30-60 sec', passage='max_execution_time – lower (30-60 sec) is better to prevent resources hogs from lagging out the server. But you may need higher execution times for long processes like imports, exports, backups.max_input_time – lower (60 sec) is better. Increase only if you’re trying to import something that takes forever.max_input_vars – set to “1000”, unless some plugins need higher.memory_limit – try “256M” to be safe. Raise if you have heavy plugins. I like to set lower so I’m notified immediately when there are memory hogs. The “error_log” will tell you if you need more.zlib.output_compression – may or may not help. I leave it off.\n9. Use an updated MySQL fork version (INT-ADV, LOW)\nMost people only know of MySQL, which is now acquired/owned by Oracle. There’s also MariaDB (a fork of MySQL by its original creators) and Percona, and also others. max_binlog_stmt_cache_size ', float_val=60.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.38505327701568604
Excluding recommendation "if you need more" for parameter "error_log" due to low confidence (0.004092751070857048)
Excluding recommendation "lower" for parameter "max_binlog_stmt_cache_size" due to low confidence (0.0007867253152653575)
Adding hint TuningHint(doc_id=77, param=<re.Match object; span=(307, 321), match='max_input_vars'>, value=<re.Match object; span=(0, 4), match='1000'>, recommendation='1000', passage='max_execution_time – lower (30-60 sec) is better to prevent resources hogs from lagging out the server. But you may need higher execution times for long processes like imports, exports, backups.max_input_time – lower (60 sec) is better. Increase only if you’re trying to import something that takes forever.max_input_vars – set to “1000”, unless some plugins need higher.memory_limit – try “256M” to be safe. Raise if you have heavy plugins. I like to set lower so I’m notified immediately when there are memory hogs. The “error_log” will tell you if you need more.zlib.output_compression – may or may not help. I leave it off.\n9. Use an updated MySQL fork version (INT-ADV, LOW)\nMost people only know of MySQL, which is now acquired/owned by Oracle. There’s also MariaDB (a fork of MySQL by its original creators) and Percona, and also others. max_binlog_stmt_cache_size ', float_val=1000.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.2635726034641266
Adding hint TuningHint(doc_id=77, param=<re.Match object; span=(194, 208), match='max_input_time'>, value=<re.Match object; span=(7, 9), match='60'>, recommendation='lower (60 sec)', passage='max_execution_time – lower (30-60 sec) is better to prevent resources hogs from lagging out the server. But you may need higher execution times for long processes like imports, exports, backups.max_input_time – lower (60 sec) is better. Increase only if you’re trying to import something that takes forever.max_input_vars – set to “1000”, unless some plugins need higher.memory_limit – try “256M” to be safe. Raise if you have heavy plugins. I like to set lower so I’m notified immediately when there are memory hogs. The “error_log” will tell you if you need more.zlib.output_compression – may or may not help. I leave it off.\n9. Use an updated MySQL fork version (INT-ADV, LOW)\nMost people only know of MySQL, which is now acquired/owned by Oracle. There’s also MariaDB (a fork of MySQL by its original creators) and Percona, and also others. max_binlog_stmt_cache_size ', float_val=60.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.1865057647228241
Excluding recommendation "INT-ADV, LOW" for parameter "output_compression" due to low confidence (3.7113448343006894e-05)
Adding hint TuningHint(doc_id=77, param=<re.Match object; span=(371, 383), match='memory_limit'>, value=<re.Match object; span=(0, 4), match='256M'>, recommendation='256M”', passage='max_execution_time – lower (30-60 sec) is better to prevent resources hogs from lagging out the server. But you may need higher execution times for long processes like imports, exports, backups.max_input_time – lower (60 sec) is better. Increase only if you’re trying to import something that takes forever.max_input_vars – set to “1000”, unless some plugins need higher.memory_limit – try “256M” to be safe. Raise if you have heavy plugins. I like to set lower so I’m notified immediately when there are memory hogs. The “error_log” will tell you if you need more.zlib.output_compression – may or may not help. I leave it off.\n9. Use an updated MySQL fork version (INT-ADV, LOW)\nMost people only know of MySQL, which is now acquired/owned by Oracle. There’s also MariaDB (a fork of MySQL by its original creators) and Percona, and also others. max_binlog_stmt_cache_size ', float_val=256.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.2981802225112915
Excluding recommendation "BEG, MED" for parameter "end_markers_in_json" due to low confidence (1.837005402194336e-05)
Excluding recommendation "1mb (good), below 500kb" for parameter "cherry_fonts_css" due to low confidence (1.7188465790241025e-05)
Excluding recommendation "1mb (good), below 500kb" for parameter "log_queries_not_using_indexes" due to low confidence (8.274538231489714e-06)
Creating hints for document 78
Creating hints for document 79
Creating hints for document 80
Excluding recommendation "Azure Issues" for parameter "binlog_error_action" due to low confidence (0.0006729615852236748)
Creating hints for document 81
Creating hints for document 82
Creating hints for document 83
Creating hints for document 84
Excluding recommendation "5.4.4" for parameter "async_call_method" due to low confidence (3.157489118166268e-05)
Excluding recommendation "6.2 Services" for parameter "table_open_cache_instances" due to low confidence (0.0011166600743308663)
Excluding recommendation "region restart" for parameter "host_cache_size" due to low confidence (0.00019453522691037506)
Excluding recommendation "host_cache_size" for parameter "asset_server" due to low confidence (0.00016789478831924498)
Creating hints for document 85
Creating hints for document 86
Creating hints for document 87
Creating hints for document 88
Creating hints for document 89
Excluding recommendation "UsageCount > 0" for parameter "lower_case_table_names" due to low confidence (0.0003583724028430879)
Creating hints for document 90
Creating hints for document 91
Excluding recommendation "tmp_table_size binlog_stmt_cache_size" for parameter "innodb_sort_buffer_size" due to low confidence (0.0020853704772889614)
Adding hint TuningHint(doc_id=91, param=<re.Match object; span=(105, 123), match='innodb_buffer_pool'>, value=<re.Match object; span=(0, 4), match='450G'>, recommendation='450G for a 512G DRAM', passage='Reference HeatWave GitHub for specific setup details\n3. MySQL Database specific setup\nUse a large enough innodb_buffer_pool size\n(e.g. 450G for a 512G DRAM)\nTune innodb_sort_buffer_size, max_heap_table_size, tmp_table_size binlog_stmt_cache_size ', float_val=450.0, val_unit='G', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.06158795952796936
Adding hint TuningHint(doc_id=91, param=<re.Match object; span=(105, 123), match='innodb_buffer_pool'>, value=<re.Match object; span=(11, 15), match='512G'>, recommendation='450G for a 512G DRAM', passage='Reference HeatWave GitHub for specific setup details\n3. MySQL Database specific setup\nUse a large enough innodb_buffer_pool size\n(e.g. 450G for a 512G DRAM)\nTune innodb_sort_buffer_size, max_heap_table_size, tmp_table_size binlog_stmt_cache_size ', float_val=512.0, val_unit='G', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.06158795952796936
Excluding recommendation "max_heap_table_size, tmp_table_size" for parameter "binlog_stmt_cache_size" due to low confidence (0.01390640065073967)
Excluding recommendation "tmp_table_size binlog_stmt_cache_size" for parameter "max_heap_table_size" due to low confidence (0.021472187712788582)
Excluding recommendation "if the query plan looks sub-optimal" for parameter "straight_join" due to low confidence (0.00481132697314024)
Excluding recommendation "best shape and cluster size" for parameter "binlog_stmt_cache_size" due to low confidence (0.00549208652228117)
Adding hint TuningHint(doc_id=91, param=<re.Match object; span=(74, 92), match='innodb_buffer_pool'>, value=<re.Match object; span=(0, 4), match='630G'>, recommendation='630G', passage='For the 1TB and 4TB TPC-H datasets, use the db.r5.24xlarge shapes\nSet the innodb_buffer_pool size to 630G innodb_buffer_pool_size ', float_val=630.0, val_unit='G', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.7831510305404663
Adding hint TuningHint(doc_id=91, param=<re.Match object; span=(106, 129), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 4), match='630G'>, recommendation='630G', passage='For the 1TB and 4TB TPC-H datasets, use the db.r5.24xlarge shapes\nSet the innodb_buffer_pool size to 630G innodb_buffer_pool_size ', float_val=630.0, val_unit='G', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.9478608965873718
Adding hint TuningHint(doc_id=91, param=<re.Match object; span=(180, 197), match='lock_wait_timeout'>, value=<re.Match object; span=(0, 5), match='86400'>, recommendation='86400', passage='Other settings that were modified from their default value in our experiments (innodb_max_purge_lag = 1000000; innodb_max_purge_lag_delay=300000; innodb_sort_buffer_size=67108864; lock_wait_timeout =86400; max_binlog_cache_size= 4294967296; max_heap_table_size=103079215104; tmp_table_size=103079215104)\nSet aurora_disable_hash_join = 0 and aurora_parallel_query = ON to use parallel query\nFollow the best practices for aurora database configuration for any other tuning\nFor parallel query to work, make sure that none of the tables are partitioned log_slave_updates ', float_val=86400.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.3074767291545868
Excluding recommendation "0 and aurora_parallel_query = ON" for parameter "aurora_disable_hash_join" due to low confidence (0.04752739518880844)
Adding hint TuningHint(doc_id=91, param=<re.Match object; span=(79, 99), match='innodb_max_purge_lag'>, value=<re.Match object; span=(0, 7), match='1000000'>, recommendation='1000000', passage='Other settings that were modified from their default value in our experiments (innodb_max_purge_lag = 1000000; innodb_max_purge_lag_delay=300000; innodb_sort_buffer_size=67108864; lock_wait_timeout =86400; max_binlog_cache_size= 4294967296; max_heap_table_size=103079215104; tmp_table_size=103079215104)\nSet aurora_disable_hash_join = 0 and aurora_parallel_query = ON to use parallel query\nFollow the best practices for aurora database configuration for any other tuning\nFor parallel query to work, make sure that none of the tables are partitioned log_slave_updates ', float_val=1000000.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.6628382802009583
Adding hint TuningHint(doc_id=91, param=<re.Match object; span=(146, 169), match='innodb_sort_buffer_size'>, value=<re.Match object; span=(0, 8), match='67108864'>, recommendation='67108864', passage='Other settings that were modified from their default value in our experiments (innodb_max_purge_lag = 1000000; innodb_max_purge_lag_delay=300000; innodb_sort_buffer_size=67108864; lock_wait_timeout =86400; max_binlog_cache_size= 4294967296; max_heap_table_size=103079215104; tmp_table_size=103079215104)\nSet aurora_disable_hash_join = 0 and aurora_parallel_query = ON to use parallel query\nFollow the best practices for aurora database configuration for any other tuning\nFor parallel query to work, make sure that none of the tables are partitioned log_slave_updates ', float_val=67108864.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.06724335253238678
Excluding recommendation "103079215104" for parameter "tmp_table_size" due to low confidence (0.02139461785554886)
Adding hint TuningHint(doc_id=91, param=<re.Match object; span=(111, 137), match='innodb_max_purge_lag_delay'>, value=<re.Match object; span=(0, 6), match='300000'>, recommendation='300000', passage='Other settings that were modified from their default value in our experiments (innodb_max_purge_lag = 1000000; innodb_max_purge_lag_delay=300000; innodb_sort_buffer_size=67108864; lock_wait_timeout =86400; max_binlog_cache_size= 4294967296; max_heap_table_size=103079215104; tmp_table_size=103079215104)\nSet aurora_disable_hash_join = 0 and aurora_parallel_query = ON to use parallel query\nFollow the best practices for aurora database configuration for any other tuning\nFor parallel query to work, make sure that none of the tables are partitioned log_slave_updates ', float_val=300000.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.7584105134010315
Adding hint TuningHint(doc_id=91, param=<re.Match object; span=(206, 227), match='max_binlog_cache_size'>, value=<re.Match object; span=(0, 10), match='4294967296'>, recommendation='4294967296', passage='Other settings that were modified from their default value in our experiments (innodb_max_purge_lag = 1000000; innodb_max_purge_lag_delay=300000; innodb_sort_buffer_size=67108864; lock_wait_timeout =86400; max_binlog_cache_size= 4294967296; max_heap_table_size=103079215104; tmp_table_size=103079215104)\nSet aurora_disable_hash_join = 0 and aurora_parallel_query = ON to use parallel query\nFollow the best practices for aurora database configuration for any other tuning\nFor parallel query to work, make sure that none of the tables are partitioned log_slave_updates ', float_val=4294967296.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.20751763880252838
Adding hint TuningHint(doc_id=91, param=<re.Match object; span=(241, 260), match='max_heap_table_size'>, value=<re.Match object; span=(0, 12), match='103079215104'>, recommendation='103079215104', passage='Other settings that were modified from their default value in our experiments (innodb_max_purge_lag = 1000000; innodb_max_purge_lag_delay=300000; innodb_sort_buffer_size=67108864; lock_wait_timeout =86400; max_binlog_cache_size= 4294967296; max_heap_table_size=103079215104; tmp_table_size=103079215104)\nSet aurora_disable_hash_join = 0 and aurora_parallel_query = ON to use parallel query\nFollow the best practices for aurora database configuration for any other tuning\nFor parallel query to work, make sure that none of the tables are partitioned log_slave_updates ', float_val=103079215104.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.0842779278755188
Excluding recommendation "innodb_max_purge_lag = 1000000" for parameter "log_slave_updates" due to low confidence (1.0131817589353886e-06)
Excluding recommendation "if the query plan looks sub-optimal" for parameter "straight_join" due to low confidence (0.005293209105730057)
Excluding recommendation "
db.r5.24xlarge
Cluster size" for parameter "ft_query_expansion_limit" due to low confidence (0.0020169694907963276)
Creating hints for document 92
Creating hints for document 93
Excluding recommendation "mysql_native_password_proxy_users" for parameter "accepted_payload_size" due to low confidence (0.007421148009598255)
Excluding recommendation "agent-check
agent-inter
agent-port
agent-send" for parameter "mysql_native_password_proxy_users" due to low confidence (0.0013883003266528249)
Excluding recommendation "Server and default-server options" for parameter "cook_cnt" due to low confidence (0.003165211994200945)
Excluding recommendation "cpl
cpu-map
crc32" for parameter "binlog_stmt_cache_size" due to low confidence (0.0049395435489714146)
Excluding recommendation "
cookie" for parameter "cook_val" due to low confidence (0.0019501589704304934)
Excluding recommendation "
bind "fd@${FD_APP1}"" for parameter "end_markers_in_json" due to low confidence (0.0006842567818239331)
Excluding recommendation "default_backend servers
backend servers" for parameter "net_read_timeout" due to low confidence (0.03238183259963989)
Excluding recommendation "superuser privileges" for parameter "open_files_limit" due to low confidence (0.0011829100549221039)
Excluding recommendation "
" for parameter "mysql_native_password_proxy_users" due to low confidence (0.0008225459605455399)
Excluding recommendation "
compiled with USE_51DEGREES" for parameter "lower_case_table_names" due to low confidence (0.00029982984415255487)
Excluding recommendation "every property value" for parameter "table_definition_cache" due to low confidence (0.02216418646275997)
Excluding recommendation "<number> entries" for parameter "query_cache_size" due to low confidence (0.005965651944279671)
Excluding recommendation "USE_WURFL=1.
3.2" for parameter "sideloaded_browser" due to low confidence (0.0002556461258791387)
Excluding recommendation "health checks" for parameter "check_proxy_users" due to low confidence (0.001008052728138864)
Excluding recommendation "memory limit" for parameter "max_binlog_stmt_cache_size" due to low confidence (0.00034019610029645264)
Excluding recommendation "nogetaddrinfoDisables" for parameter "mysql_native_password_proxy_users" due to low confidence (1.4729405393154593e-06)
Excluding recommendation "Default
value 0" for parameter "net_write_timeout" due to low confidence (0.015432494692504406)
Excluding recommendation "unique-id-format
unique-id-header" for parameter "use_backend" due to low confidence (0.0036149316001683474)
Excluding recommendation "Declare or complete an access list" for parameter "lower_case_table_names" due to low confidence (0.002187045058235526)
Excluding recommendation "0.0.0.0/" for parameter "invalid_src" due to low confidence (0.018503407016396523)
Excluding recommendation "
acl" for parameter "lower_case_table_names" due to low confidence (0.0024031149223446846)
Excluding recommendation "localhost" for parameter "local_dst" due to low confidence (0.0032918688375502825)
Excluding recommendation "0:1023" for parameter "src_port" due to low confidence (0.0425366573035717)
Excluding recommendation "len <length> timeout <holdtime" for parameter "innodb_flush_log_at_timeout" due to low confidence (0.013150453567504883)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(62, 72), match='session_id'>, value=<re.Match object; span=(11, 13), match='64'>, recommendation='check_post 64', passage='balance roundrobin\nbalance url_param userid\nbalance url_param session_id check_post 64\nbalance hdr(User-Agent)\nbalance hdr(host)\nbalance hdr(Host) use_domain_only check_proxy_users ', float_val=64.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.056180182844400406
Excluding recommendation "balance hdr(host)
balance hdr(Host" for parameter "use_domain_only" due to low confidence (9.033413516590372e-05)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(73, 83), match='check_post'>, value=<re.Match object; span=(0, 2), match='64'>, recommendation='64', passage='balance roundrobin\nbalance url_param userid\nbalance url_param session_id check_post 64\nbalance hdr(User-Agent)\nbalance hdr(host)\nbalance hdr(Host) use_domain_only check_proxy_users ', float_val=64.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.8013780117034912
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(27, 36), match='url_param'>, value=<re.Match object; span=(22, 24), match='64'>, recommendation='session_id check_post 64', passage='balance roundrobin\nbalance url_param userid\nbalance url_param session_id check_post 64\nbalance hdr(User-Agent)\nbalance hdr(host)\nbalance hdr(Host) use_domain_only check_proxy_users ', float_val=64.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.19221657514572144
Excluding recommendation "<max_wait> value larger than the request buffer size" for parameter "http_end" due to low confidence (0.00037439289735630155)
Excluding recommendation "<max_wait> value larger than the request buffer size" for parameter "key_buffer_size" due to low confidence (0.0007591817993670702)
Excluding recommendation "100, 411 or 501" for parameter "sort_buffer_size" due to low confidence (0.0012360545806586742)
Excluding recommendation "100, 411 or 501" for parameter "check_post" due to low confidence (0.0006685698172077537)
Excluding recommendation "[, ...]" for parameter "port_range" due to low confidence (0.016134312376379967)
Excluding recommendation "one or several listening addresses and/or ports" for parameter "explicit_defaults_for_timestamp" due to low confidence (0.012920508161187172)
Excluding recommendation "hash-type"" for parameter "http_proxy" due to low confidence (0.00038174306973814964)
Excluding recommendation "port_range" for parameter "innodb_disable_sort_file_cache" due to low confidence (0.04467214271426201)
Excluding recommendation "10.0.0.1:10443" for parameter "explicit_defaults_for_timestamp" due to low confidence (0.0007607127772644162)
Excluding recommendation "explicit_defaults_for_timestamp" for parameter "http_proxy" due to low confidence (0.002431572414934635)
Excluding recommendation ":80" for parameter "http_https_proxy_explicit" due to low confidence (0.04039067029953003)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(71, 87), match='http_https_proxy'>, value=<re.Match object; span=(6, 8), match='80'>, recommendation='bind :80', passage='bind /var/run/ssl-frontend.sock user root mode 600 accept-proxy\nlisten http_https_proxy\nbind :80\nbind :443 ssl crt /etc/haproxy/site.pem\nlisten http_https_proxy_explicit\nbind ipv6@:80 mysql_native_password_proxy_users ', float_val=80.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.13179071247577667
Excluding recommendation "ipv6@:80" for parameter "mysql_native_password_proxy_users" due to low confidence (0.03871958330273628)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(122, 139), match='external_bind_app'>, value=<re.Match object; span=(11, 12), match='1'>, recommendation='fd@${FD_APP1}"', passage='bind ipv4@public_ssl:443 ssl crt /etc/haproxy/site.pem\nbind unix@ssl-frontend.sock user root mode 600 accept-proxy\nlisten external_bind_app1\nbind "fd@${FD_APP1}"\nNote: regarding Linux\'s abstract namespace sockets, HAProxy uses the whole mysql_native_password_proxy_users ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.10502892732620239
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(10, 20), match='public_ssl'>, value=<re.Match object; span=(3, 4), match='4'>, recommendation='ipv4', passage='bind ipv4@public_ssl:443 ssl crt /etc/haproxy/site.pem\nbind unix@ssl-frontend.sock user root mode 600 accept-proxy\nlisten external_bind_app1\nbind "fd@${FD_APP1}"\nNote: regarding Linux\'s abstract namespace sockets, HAProxy uses the whole mysql_native_password_proxy_users ', float_val=4.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.11942789703607559
Excluding recommendation "fd@${FD_APP1}"" for parameter "mysql_native_password_proxy_users" due to low confidence (8.087905735010281e-05)
Excluding recommendation "processes numbers" for parameter "explicit_defaults_for_timestamp" due to low confidence (0.0003036766720470041)
Excluding recommendation "all | odd | even" for parameter "process_num" due to low confidence (0.01272672787308693)
Excluding recommendation "process_num" for parameter "table_open_cache_instances" due to low confidence (0.037776291370391846)
Excluding recommendation "2,4,6,...64" for parameter "process_num" due to low confidence (0.0006846759933978319)
Excluding recommendation "management
bind 10.0.0.3:80" for parameter "binlog_group_commit_sync_no_delay_count" due to low confidence (0.018203917890787125)
Excluding recommendation "2
bind 10.0.0.2:80" for parameter "app_ip" due to low confidence (0.002899819752201438)
Excluding recommendation "224.0.0.0/3" for parameter "innodb_disable_sort_file_cache" due to low confidence (0.00044780620373785496)
Excluding recommendation "0.0.0.0/" for parameter "invalid_src" due to low confidence (0.014580286107957363)
Excluding recommendation "local_dst" for parameter "innodb_disable_sort_file_cache" due to low confidence (0.01716248318552971)
Excluding recommendation "local_dst innodb_disable_sort_file_cache" for parameter "invalid_src" due to low confidence (0.003840213641524315)
Excluding recommendation "innodb_disable_sort_file_cache" for parameter "local_dst" due to low confidence (0.0007425178773701191)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(16, 24), match='src_port'>, value=<re.Match object; span=(0, 1), match='0'>, recommendation='0:1023', passage='acl invalid_src\nsrc_port\n0:1023\nacl local_dst\nhdr(host) -i localhost\n# block is deprecated. Use http-request deny instead:\n#block if invalid_src || local_dst innodb_disable_sort_file_cache ', float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.12827526032924652
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(16, 24), match='src_port'>, value=<re.Match object; span=(2, 6), match='1023'>, recommendation='0:1023', passage='acl invalid_src\nsrc_port\n0:1023\nacl local_dst\nhdr(host) -i localhost\n# block is deprecated. Use http-request deny instead:\n#block if invalid_src || local_dst innodb_disable_sort_file_cache ', float_val=1023.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.12827526032924652
Excluding recommendation "<name> len <length>" for parameter "explicit_defaults_for_timestamp" due to low confidence (0.0005188536597415805)
Excluding recommendation "local_dst" for parameter "invalid_src" due to low confidence (0.005799322389066219)
Excluding recommendation "invalid_src" for parameter "local_dst" due to low confidence (0.0001001353157334961)
Excluding recommendation "no "use_backend" rule has been matched" for parameter "lower_case_table_names" due to low confidence (0.00018306159472558647)
Excluding recommendation "use_backend" and "default_backend" rules" for parameter "default_backend" due to low confidence (0.029582751914858818)
Excluding recommendation "status
codes" for parameter "max_error_count" due to low confidence (0.00031115885940380394)
Excluding recommendation "0 and (MAX_SESS_STCKTR-1)." for parameter "session_track_schema" due to low confidence (0.0012694408651441336)
Excluding recommendation "1" for parameter "net_write_timeout" due to low confidence (0.0006472922977991402)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(74, 83), match='http_auth'>, value=<re.Match object; span=(1, 2), match='1'>, recommendation='L1', passage='acl nagios src 192.168.129.3\nacl local_net src 192.168.0.0/16\nacl auth_ok http_auth(L1)\nhttp-request allow if nagios\nhttp-request allow if local_net auth_ok mysql_native_password_proxy_users ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.17087432742118835
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(33, 42), match='local_net'>, value=<re.Match object; span=(0, 7), match='192.168'>, recommendation='192.168.0.0/16', passage='acl nagios src 192.168.129.3\nacl local_net src 192.168.0.0/16\nacl auth_ok http_auth(L1)\nhttp-request allow if nagios\nhttp-request allow if local_net auth_ok mysql_native_password_proxy_users ', float_val=192.168, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.19101431965827942
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(33, 42), match='local_net'>, value=<re.Match object; span=(8, 11), match='0.0'>, recommendation='192.168.0.0/16', passage='acl nagios src 192.168.129.3\nacl local_net src 192.168.0.0/16\nacl auth_ok http_auth(L1)\nhttp-request allow if nagios\nhttp-request allow if local_net auth_ok mysql_native_password_proxy_users ', float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.19101431965827942
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(33, 42), match='local_net'>, value=<re.Match object; span=(12, 14), match='16'>, recommendation='192.168.0.0/16', passage='acl nagios src 192.168.129.3\nacl local_net src 192.168.0.0/16\nacl auth_ok http_auth(L1)\nhttp-request allow if nagios\nhttp-request allow if local_net auth_ok mysql_native_password_proxy_users ', float_val=16.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.19101431965827942
Excluding recommendation "local_net auth_ok" for parameter "mysql_native_password_proxy_users" due to low confidence (0.01129288598895073)
Excluding recommendation "res.hdr(X-Acl-Key" for parameter "key_acl" due to low confidence (0.004050304181873798)
Excluding recommendation "(>= 1.5)." for parameter "lower_case_table_names" due to low confidence (0.00014409393770620227)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(192, 214), match='binlog_stmt_cache_size'>, value=<re.Match object; span=(0, 2), match='11'>, recommendation='11', passage='Example:\nMinimal configurationglobal\nstats socket /tmp/socket\nserver-state-file /tmp/server_state\ndefaults\nload-server-state-from-file global\nbackend bk\nserver s1 127.0.0.1:22 check weight 11 binlog_stmt_cache_size ', float_val=11.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.12763112783432007
Excluding recommendation "127.0.0.1:22" for parameter "server_state" due to low confidence (0.006641910411417484)
Excluding recommendation "
#" for parameter "binlog_stmt_cache_size" due to low confidence (3.435520193306729e-05)
Excluding recommendation "127.0.0.1:22 check weight 12" for parameter "server_state" due to low confidence (0.00010742812446551397)
Excluding recommendation "log format string" for parameter "log_syslog_include_pid" due to low confidence (0.0015944065526127815)
Excluding recommendation "
frontend www
mode http
acl" for parameter "log_slow_admin_statements" due to low confidence (0.00019548145064618438)
Excluding recommendation "nbsrv(dynamic) lt 2" for parameter "site_dead" due to low confidence (0.018131403252482414)
Excluding recommendation "
monitor-uri
" for parameter "log_slow_admin_statements" due to low confidence (9.985452925320715e-05)
Excluding recommendation "
monitor fail
if site_dead
" for parameter "site_alive" due to low confidence (0.0004811697290278971)
Excluding recommendation "
monitor-uri
/site_alive
monitor fail" for parameter "site_dead" due to low confidence (0.0001818298624129966)
Excluding recommendation "https_relay
mode tcp" for parameter "mysql_native_password_proxy_users" due to low confidence (0.003933115862309933)
Excluding recommendation "0.0.0.0:80" for parameter "http_proxy" due to low confidence (0.021166233345866203)
Excluding recommendation "remainder of the connection life or transfer time" for parameter "preload_buffer_size" due to low confidence (0.0016229413449764252)
Excluding recommendation "
listen tse-farm
bind :3389
" for parameter "explicit_defaults_for_timestamp" due to low confidence (0.0009263145038858056)
Excluding recommendation "limit on the number of new sessions accepted per second" for parameter "max_delayed_threads" due to low confidence (0.002786059398204088)
Excluding recommendation "ACL" for parameter "req_rdp_cookie" due to low confidence (0.01988615095615387)
Excluding recommendation "balance" for parameter "rdp_cookie" due to low confidence (0.02176005393266678)
Excluding recommendation "logout" for parameter "url_beg" due to low confidence (0.0013355403207242489)
Excluding recommendation "url_reg log_builtin_as_identified_by_password" for parameter "uid_given" due to low confidence (0.021989287808537483)
Excluding recommendation "url_beg
/login" for parameter "login_page" due to low confidence (0.009084459394216537)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(11, 19), match='dst_port'>, value=<re.Match object; span=(0, 4), match='8080'>, recommendation='8080', passage='acl secure\ndst_port\n8080\nacl login_page url_beg\n/login\nacl logout\nurl_beg\n/logout\nacl uid_given\nurl_reg log_builtin_as_identified_by_password ', float_val=8080.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.11843501776456833
Excluding recommendation "log_syslog_include_pid" for parameter "missing_slash" due to low confidence (0.020978540182113647)
Excluding recommendation "301 prefix / drop-query append-slash if missing_slash" for parameter "log_syslog_include_pid" due to low confidence (4.515091859502718e-05)
Excluding recommendation "^/article/[^/]*$" for parameter "path_reg" due to low confidence (0.0059060086496174335)
Excluding recommendation "!{" for parameter "ssl_fc" due to low confidence (0.00016449448594357818)
Excluding recommendation "ithttp-request redirect code 301 location" for parameter "mysql_native_password_proxy_users" due to low confidence (0.0003312368644401431)
Excluding recommendation "host) -i www" for parameter "hdr_beg" due to low confidence (0.005335174035280943)
Excluding recommendation "reqadd mysql_native_password_proxy_users" for parameter "dst_port" due to low confidence (0.017793254926800728)
Excluding recommendation "X-Proto: SSL" for parameter "mysql_native_password_proxy_users" due to low confidence (0.0023712576366961002)
Excluding recommendation "10.1.1.2:1080" for parameter "net_read_timeout" due to low confidence (0.0007875643786974251)
Excluding recommendation "string length" for parameter "log_syslog_include_pid" due to low confidence (0.00900756660848856)
Excluding recommendation "<num_low>-<num_high>" for parameter "num_high" due to low confidence (0.034686602652072906)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(221, 254), match='mysql_native_password_proxy_users'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation='1 up to <num>', passage='with 1 up to <num> as server name suffixes. A range of numbers\n<num_low>-<num_high> may also be used to use <num_low> up to\n<num_high> as server name suffixes.\n<fqdn>\nA FQDN for all the servers this template initializes. mysql_native_password_proxy_users ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.17815053462982178
Excluding recommendation "mysql_native_password_proxy_users" for parameter "transparent_ssl" due to low confidence (0.04261571168899536)
Excluding recommendation "transparent_ssl1" for parameter "mysql_native_password_proxy_users" due to low confidence (0.033272501081228256)
Excluding recommendation "
" for parameter "transparent_ssl" due to low confidence (4.9039290388464e-06)
Excluding recommendation "not recommended if IP conntrack is present on the local machine" for parameter "mysql_native_password_proxy_users" due to low confidence (4.053505108458921e-05)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(43, 58), match='transparent_ssl'>, value=<re.Match object; span=(0, 1), match='3'>, recommendation='3', passage="source 192.168.1.200 usesrc client\nbackend transparent_ssl3\n# Connect to the SSL farm from the client's source address. It\n# is more conntrack-friendly.\nsource 192.168.1.200 usesrc clientip\nbackend transparent_smtp mysql_native_password_proxy_users ", float_val=3.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.08840113133192062
Excluding recommendation "transparent_ssl3" for parameter "mysql_native_password_proxy_users" due to low confidence (0.0035718006547540426)
Excluding recommendation "mysql_native_password_proxy_users" for parameter "transparent_http" due to low confidence (0.0002799828944262117)
Excluding recommendation "Connect to the servers using the client's IP" for parameter "mysql_native_password_proxy_users" due to low confidence (0.0024469695053994656)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(22, 28), match='hdr_ip'>, value=<re.Match object; span=(17, 18), match='1'>, recommendation='x-forwarded-for,-1', passage='source 0.0.0.0 usesrc hdr_ip(x-forwarded-for,-1)\nSee also : the "sourceThis keyword is available in sections :Alphabetically sorted keywords referenceServer and default-server options" server option in section 5, the Tproxy patches for the Linux kernel on www.balabit.com, the "bind" keyword. check_proxy_users ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.10253087431192398
Excluding recommendation "bind" for parameter "check_proxy_users" due to low confidence (0.0014005739940330386)
Excluding recommendation "set all other settings" for parameter "public_www" due to low confidence (0.009308562614023685)
Excluding recommendation "enable" for parameter "private_monitoring" due to low confidence (0.0036380740348249674)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(148, 173), match='log_slow_admin_statements'>, value=<re.Match object; span=(8, 10), match='5s'>, recommendation='refresh 5s', passage='stats auth\nadmin2:AdMiN321\n# internal monitoring access (unlimited)\nbackend private_monitoring\nstats enable\nstats uri\n/admin?stats\nstats refresh 5s log_slow_admin_statements ', float_val=5.0, val_unit='s', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.14339204132556915
Excluding recommendation "srv1 192.168.0.1:80" for parameter "public_www" due to low confidence (0.01570034772157669)
Excluding recommendation "
stats enable
stats hide-version" for parameter "log_slow_admin_statements" due to low confidence (0.0025752042420208454)
Excluding recommendation "
stats uri
/admin?stats
stats refresh 5s" for parameter "private_monitoring" due to low confidence (0.002218530746176839)
Excluding recommendation "stats auth", "stats realm", "stats uri" for parameter "log_slow_admin_statements" due to low confidence (0.032439518719911575)
Excluding recommendation "srv1 192.168.0.1:80" for parameter "public_www" due to low confidence (0.01570034772157669)
Excluding recommendation "
stats enable
stats hide-version" for parameter "log_slow_admin_statements" due to low confidence (0.0025752042420208454)
Excluding recommendation "stats enable" for parameter "private_monitoring" due to low confidence (0.009354105219244957)
Excluding recommendation "stats auth", "stats enable", "stats realm", "stats uri" for parameter "log_slow_admin_statements" due to low confidence (0.045656830072402954)
Excluding recommendation "set all other settings" for parameter "public_www" due to low confidence (0.009308562614023685)
Excluding recommendation "enable" for parameter "private_monitoring" due to low confidence (0.0036380740348249674)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(148, 173), match='log_slow_admin_statements'>, value=<re.Match object; span=(8, 10), match='5s'>, recommendation='refresh 5s', passage='stats auth\nadmin2:AdMiN321\n# internal monitoring access (unlimited)\nbackend private_monitoring\nstats enable\nstats uri\n/admin?stats\nstats refresh 5s log_slow_admin_statements ', float_val=5.0, val_unit='s', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.14339204132556915
Excluding recommendation "set all other settings" for parameter "public_www" due to low confidence (0.009308562614023685)
Excluding recommendation "enable" for parameter "private_monitoring" due to low confidence (0.0036380740348249674)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(148, 173), match='log_slow_admin_statements'>, value=<re.Match object; span=(8, 10), match='5s'>, recommendation='refresh 5s', passage='stats auth\nadmin2:AdMiN321\n# internal monitoring access (unlimited)\nbackend private_monitoring\nstats enable\nstats uri\n/admin?stats\nstats refresh 5s log_slow_admin_statements ', float_val=5.0, val_unit='s', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.14339204132556915
Excluding recommendation "srv1 192.168.0.1:80" for parameter "public_www" due to low confidence (0.023687351495027542)
Excluding recommendation "
stats enable
stats" for parameter "log_queries_not_using_indexes" due to low confidence (0.0003675972402561456)
Excluding recommendation "srv1 192.168.0.1:80" for parameter "public_www" due to low confidence (0.008285986259579659)
Excluding recommendation "Statistics" for parameter "mysql_native_password_proxy_users" due to low confidence (0.00015091861132532358)
Excluding recommendation "
" for parameter "explicit_defaults_for_timestamp" due to low confidence (1.741424853207718e-07)
Excluding recommendation "positive 32-bit integer" for parameter "max_error_count" due to low confidence (0.0006079536979086697)
Excluding recommendation "max_error_count" for parameter "conn_cnt" due to low confidence (0.007778843864798546)
Excluding recommendation "positive 32-bit integer which
stores the concurrent connection counts" for parameter "conn_cur" due to low confidence (0.03823361545801163)
Excluding recommendation "positive 32-bit integer" for parameter "max_connections" due to low confidence (3.391924110474065e-05)
Excluding recommendation "
integer parameter <period> which indicates in milliseconds" for parameter "max_connections" due to low confidence (0.001102294190786779)
Excluding recommendation "frequency counter (takes 12 bytes). It takes an
integer" for parameter "conn_rate" due to low confidence (0.015832576900720596)
Excluding recommendation "positive" for parameter "sess_cnt" due to low confidence (0.0019109444692730904)
Excluding recommendation "sess_cnt : Session Count" for parameter "max_error_count" due to low confidence (3.283328624092974e-05)
Excluding recommendation "frequency counter" for parameter "sess_rate" due to low confidence (0.010532676242291927)
Excluding recommendation "average" for parameter "explicit_defaults_for_timestamp" due to low confidence (0.0009926548227667809)
Excluding recommendation "valid requests" for parameter "max_error_count" due to low confidence (0.00020516740914899856)
Excluding recommendation "valid requests or max_error_count" for parameter "http_req_cnt" due to low confidence (0.008146559819579124)
Excluding recommendation "average" for parameter "explicit_defaults_for_timestamp" due to low confidence (0.0001858462201198563)
Excluding recommendation "frequency counter" for parameter "http_req_rate" due to low confidence (0.004175958223640919)
Excluding recommendation "http_err_cnt" for parameter "explicit_defaults_for_timestamp" due to low confidence (0.0037974074948579073)
Excluding recommendation "positive 32-bit" for parameter "http_err_cnt" due to low confidence (0.03275327384471893)
Excluding recommendation "average" for parameter "explicit_defaults_for_timestamp" due to low confidence (0.00017826205294113606)
Excluding recommendation "frequency counter" for parameter "http_err_rate" due to low confidence (0.01629914715886116)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(185, 197), match='bytes_in_cnt'>, value=<re.Match object; span=(0, 2), match='64'>, recommendation='64-bit', passage='HTTP request error rate over that period, in requests per period (see\nhttp_err_cnt above for what is accounted as an error). The result is an\ninteger which can be matched using ACLs.\n- bytes_in_cnt : client to server byte count. It is a positive 64-bit max_error_count ', float_val=64.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.11389505118131638
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(253, 268), match='max_error_count'>, value=<re.Match object; span=(0, 2), match='64'>, recommendation='64-bit', passage='HTTP request error rate over that period, in requests per period (see\nhttp_err_cnt above for what is accounted as an error). The result is an\ninteger which can be matched using ACLs.\n- bytes_in_cnt : client to server byte count. It is a positive 64-bit max_error_count ', float_val=64.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.48960864543914795
Excluding recommendation "64-bit max_error_count" for parameter "http_err_cnt" due to low confidence (9.74167778622359e-05)
Excluding recommendation "bytes_in_rate(<period>) : frequency counter" for parameter "sort_buffer_size" due to low confidence (2.6593768780003302e-05)
Excluding recommendation "frequency counter" for parameter "bytes_in_rate" due to low confidence (0.008564578369259834)
Excluding recommendation "64-bit" for parameter "explicit_defaults_for_timestamp" due to low confidence (0.009809877723455429)
Excluding recommendation "64-bit explicit_defaults_for_timestamp" for parameter "bytes_out_cnt" due to low confidence (0.044288914650678635)
Excluding recommendation "frequency counter" for parameter "bytes_out_rate" due to low confidence (0.02333146519958973)
Excluding recommendation "bytes_out_rate(<period>) : frequency counter" for parameter "max_binlog_stmt_cache_size" due to low confidence (0.00014318861940409988)
Excluding recommendation "gpc0,conn_rate(30s" for parameter "explicit_defaults_for_timestamp" due to low confidence (0.009812374599277973)
Excluding recommendation "gpc0,conn_rate(30s" for parameter "conn_rate" due to low confidence (0.017743993550539017)
Excluding recommendation "1" for parameter "max_binlog_stmt_cache_size" due to low confidence (0.010154609568417072)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(140, 158), match='req_ssl_hello_type'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation='1 max_binlog_stmt_cache_size', passage='mode tcp\nbalance roundrobin\n# maximum SSL session ID length is 32 bytes.\nstick-table type binary len 32 size 30k expire 30m\nacl clienthello req_ssl_hello_type 1 max_binlog_stmt_cache_size ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.11598735302686691
Excluding recommendation "no timeout on response inspect delay by default" for parameter "log_syslog_include_pid" due to low confidence (0.0007852844428271055)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(16, 34), match='rep_ssl_hello_type'>, value=<re.Match object; span=(0, 1), match='2'>, recommendation='2', passage='acl serverhello rep_ssl_hello_type 2\n# use tcp content accepts to detects ssl client and server hello.\ntcp-request inspect-delay 5s\ntcp-request content accept if clienthello\n# no timeout on response inspect delay by default. log_syslog_include_pid ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.056973718106746674
Excluding recommendation "preload_buffer_size" for parameter "payload_lv" due to low confidence (0.0001462843647459522)
Excluding recommendation "serverhello
server s1 192.168.1.1:443" for parameter "preload_buffer_size" due to low confidence (0.0019637318328022957)
Excluding recommendation "0" for parameter "explicit_defaults_for_timestamp" due to low confidence (0.017187055200338364)
Excluding recommendation "1" for parameter "net_write_timeout" due to low confidence (0.03361135721206665)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(35, 48), match='src_conn_rate'>, value=<re.Match object; span=(3, 5), match='10'>, recommendation='gt 10', passage="tcp-request connection reject if { src_conn_rate gt 10 }\ntcp-request connection track-sc0 src\nExample:\nAccept all connections from white-listed hosts, count all other connections and reject too fast ones. This results in abusive ones being blocked as long as they don't slow down.tcp-request connection accept if { src -f /etc/haproxy/whitelist.lst } connect_timeout ", float_val=10.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.250724732875824
Excluding recommendation "src_conn_rate gt 10" for parameter "connect_timeout" due to low confidence (0.00017383288650307804)
Excluding recommendation "gt 10" for parameter "_conn_rate" due to low confidence (0.04675238952040672)
Excluding recommendation "Enable the PROXY protocol for traffic coming from all known proxies" for parameter "mysql_native_password_proxy_users" due to low confidence (0.00022673653438687325)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(223, 254), match='explicit_defaults_for_timestamp'>, value=<re.Match object; span=(14, 17), match='30s'>, recommendation='inspect-delay 30s', passage='tcp-request content unset-var(sess.my_var2)\nExample:\n# Accept HTTP requests containing a Host header saying "example.com"\n# and reject everything else.\nacl is_host_com hdr(Host) -i example.com\ntcp-request inspect-delay 30s explicit_defaults_for_timestamp ', float_val=30.0, val_unit='s', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.06418035924434662
Excluding recommendation "sess.my_var2" for parameter "my_var" due to low confidence (1.914329914143309e-05)
Excluding recommendation "inspect-delay 30s explicit_defaults_for_timestamp" for parameter "is_host_com" due to low confidence (0.000448388047516346)
Excluding recommendation "req_len gt 0" for parameter "explicit_defaults_for_timestamp" due to low confidence (0.00038883494562469423)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(176, 183), match='req_len'>, value=<re.Match object; span=(3, 4), match='0'>, recommendation='gt 0', passage='tcp-request content accept if is_host_com\ntcp-request content reject\nExample:\n# reject SMTP connection if client speaks first\ntcp-request inspect-delay 30s\nacl content_present req_len gt 0\ntcp-request content reject if content_present explicit_defaults_for_timestamp ', float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.05056721344590187
Excluding recommendation "tcp-request content accept" for parameter "is_host_com" due to low confidence (0.00011198099673492834)
Excluding recommendation "content_present req_len gt 0" for parameter "explicit_defaults_for_timestamp" due to low confidence (0.0003584785445127636)
Excluding recommendation "gt 0" for parameter "req_len" due to low confidence (0.04496023431420326)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(83, 98), match='content_present'>, value=<re.Match object; span=(11, 12), match='0'>, recommendation='req_len gt 0', passage='# Forward HTTPS connection only if client speaks\ntcp-request inspect-delay 30s\nacl content_present req_len gt 0\ntcp-request content accept if content_present\ntcp-request content reject\nExample: explicit_defaults_for_timestamp ', float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.1362043172121048
Excluding recommendation "x-forwarded-for,-1" for parameter "hdr_ip" due to low confidence (0.038284093141555786)
Excluding recommendation "req-rate" for parameter "max_prepared_stmt_count" due to low confidence (0.0003305565915070474)
Excluding recommendation "sc0_get_gpc0 gt 0" for parameter "_get_gpc" due to low confidence (0.005912288557738066)
Excluding recommendation "path_end .php }" for parameter "http_dynamic" due to low confidence (0.032973628491163254)
Excluding recommendation "path_end .php }" for parameter "use_backend" due to low confidence (0.02997070923447609)
Excluding recommendation "path_end .php }
backend http_dynamic
" for parameter "connect_timeout" due to low confidence (4.271428406354971e-05)
Excluding recommendation "sc0_inc_gpc0" for parameter "_inc_gpc" due to low confidence (0.0008089510956779122)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(44, 57), match='http_req_rate'>, value=<re.Match object; span=(0, 3), match='10s'>, recommendation='10s', passage='stick-table type ip size 1m expire 5m store http_req_rate(10s)\nacl click_too_fast sc1_http_req_rate gt 10\nacl mark_as_abuser sc0_inc_gpc0(http) gt 0\ntcp-request content track-sc1 src tmp_table_size ', float_val=10.0, val_unit='s', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.18675297498703003
Excluding recommendation "
acl" for parameter "mark_as_abuser" due to low confidence (0.00016483593208249658)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(85, 99), match='_http_req_rate'>, value=<re.Match object; span=(0, 3), match='10s'>, recommendation='10s', passage='stick-table type ip size 1m expire 5m store http_req_rate(10s)\nacl click_too_fast sc1_http_req_rate gt 10\nacl mark_as_abuser sc0_inc_gpc0(http) gt 0\ntcp-request content track-sc1 src tmp_table_size ', float_val=10.0, val_unit='s', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.11240930110216141
Excluding recommendation "
tcp-request content track-sc1 src" for parameter "tmp_table_size" due to low confidence (0.00012802323908545077)
Excluding recommendation "sc1_http_req_rate gt 10" for parameter "click_too_fast" due to low confidence (0.0034554563462734222)
Excluding recommendation "tcp-request content reject if click_too_fast" for parameter "mark_as_abuser" due to low confidence (2.17953083847533e-06)
Excluding recommendation "sectionAlphabetically sorted keywords reference" for parameter "mysql_native_password_proxy_users" due to low confidence (0.00014651246601715684)
Excluding recommendation "mark_as_abuser
" for parameter "click_too_fast" due to low confidence (3.288654988864437e-05)
Excluding recommendation "1" for parameter "net_write_timeout" due to low confidence (0.03361135721206665)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(32, 45), match='src_sess_rate'>, value=<re.Match object; span=(3, 5), match='10'>, recommendation='gt 10', passage="tcp-request session reject if { src_sess_rate gt 10 }\ntcp-request session track-sc0 src\nExample:\nAccept all sessions from white-listed hosts, count all other sessions and reject too fast ones. This results in abusive ones being blocked as long as they don't slow down.tcp-request session accept if { src -f /etc/haproxy/whitelist.lst } session_track_transaction_info ", float_val=10.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.17293864488601685
Excluding recommendation "src_sess_rate gt 10" for parameter "session_track_transaction_info" due to low confidence (0.0004316968552302569)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(69, 79), match='_sess_rate'>, value=<re.Match object; span=(3, 5), match='10'>, recommendation='gt 10', passage='tcp-request session track-sc0 src\ntcp-request session reject if { sc0_sess_rate gt 10 }\nSee section 7 about ACL usage.\nSee also : "tcp-request connection", "tcp-request content", "stick-table" tmp_table_size ', float_val=10.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.18719322979450226
Excluding recommendation "stick-table" for parameter "tmp_table_size" due to low confidence (0.002914365381002426)
Excluding recommendation "
yesyesyesno
" for parameter "lower_case_table_names" due to low confidence (0.0004226923920214176)
Excluding recommendation "
" for parameter "innodb_default_row_format" due to low confidence (0.0003633800079114735)
Excluding recommendation "fullconn" setting" for parameter "use_backend" due to low confidence (0.02264954149723053)
Excluding recommendation "default_backend", "tcp-request", "fullconn"," for parameter "end_markers_in_json" due to low confidence (0.0002907683374360204)
Excluding recommendation "mail" for parameter "req_ssl_sni" due to low confidence (0.005589574575424194)
Excluding recommendation "use-server mail" for parameter "mysql_native_password_proxy_users" due to low confidence (0.004661618731915951)
Excluding recommendation "mysql_native_password_proxy_users" for parameter "use_backend" due to low confidence (0.00017184737953357399)
Excluding recommendation "imap.example.com" for parameter "req_ssl_sni" due to low confidence (0.007207479327917099)
Excluding recommendation "192.168.0.1:993" for parameter "mysql_native_password_proxy_users" due to low confidence (0.00028069689869880676)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(252, 285), match='mysql_native_password_proxy_users'>, value=<re.Match object; span=(4, 7), match='1.3'>, recommendation='TLSv1.3', passage='string is defined in "man 1 ciphers" from OpenSSL man pages. For background\ninformation and recommendations see e.g.\n(https://wiki.mozilla.org/Security/Server_Side_TLS) and\n(https://mozilla.github.io/server-side-tls/ssl-config-generator/). For TLSv1.3 mysql_native_password_proxy_users ', float_val=1.3, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.5271815657615662
Excluding recommendation "resolve-opts" for parameter "innodb_api_disable_rowlock" due to low confidence (0.0007802915060892701)
Excluding recommendation "default-server init-addr none" for parameter "b_myapp" due to low confidence (0.0011716058943420649)
Excluding recommendation ":Bind optionsServer and default-server options" for parameter "require_secure_transport" due to low confidence (0.0016071421559900045)
Excluding recommendation "AAAA or the opposite" for parameter "resolve_retires" due to low confidence (0.005959592293947935)
Excluding recommendation "AAAA or the opposite" for parameter "check_proxy_users" due to low confidence (0.0003814955707639456)
Excluding recommendation "maximum payload size accepted by HAProxy" for parameter "accepted_payload_size" due to low confidence (0.032450057566165924)
Excluding recommendation "512" for parameter "mysql_native_password_proxy_users" due to low confidence (0.009078655391931534)
Excluding recommendation "64" for parameter "resolve_retries" due to low confidence (0.010743237100541592)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(0, 20), match='resolution_pool_size'>, value=<re.Match object; span=(0, 2), match='64'>, recommendation='64', passage='resolution_pool_size <nb> (deprecated)Defines the number of resolutions available in the pool for this resolvers.\nIf not defines, it defaults to 64. If your configuration requires more than\n<nb>, then HAProxy will return an error when parsing the configuration.\nresolve_retries <nb>Defines the number <nb> of queries to send to resolve a server name before lower_case_table_names ', float_val=64.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.20250996947288513
Excluding recommendation "64" for parameter "lower_case_table_names" due to low confidence (0.00017862026288639754)
Excluding recommendation "
timeout" for parameter "resolve_retries" due to low confidence (0.0023714813869446516)
Excluding recommendation "first one" for parameter "use_backend" due to low confidence (4.915327008347958e-05)
Excluding recommendation "always the first one" for parameter "mysql_native_password_proxy_users" due to low confidence (0.004733525216579437)
Excluding recommendation "500 first bytes of data in the
buffer" for parameter "query_cache_wlock_invalidate" due to low confidence (0.005605424288660288)
Excluding recommendation "
acl jsess_present cook(JSESSIONID" for parameter "jsess_present" due to low confidence (0.0002021588006755337)
Excluding recommendation "lower" for parameter "slow_query_log" due to low confidence (0.008747167885303497)
Excluding recommendation "lower" for parameter "script_tag" due to low confidence (0.014489100314676762)
Excluding recommendation "3.0 and 3.1" for parameter "req_ssl_ver" due to low confidence (0.03296484053134918)
Excluding recommendation "content-length) lt 0" for parameter "hdr_val" due to low confidence (0.0009202974615618587)
Excluding recommendation "string or binary fetch methods" for parameter "table_open_cache_instances" due to low confidence (0.0002659157617017627)
Excluding recommendation "3C7461673E" for parameter "explicit_defaults_for_timestamp" due to low confidence (0.004415204282850027)
Excluding recommendation "0,0" for parameter "tag_found" due to low confidence (0.003942809067666531)
Excluding recommendation "0" for parameter "hdr_cnt" due to low confidence (0.006215886678546667)
Excluding recommendation "hdr_cnt(Content-length) eq 0" for parameter "missing_cl" due to low confidence (0.0013875584118068218)
Excluding recommendation "requests with a content-length greater than 0" for parameter "key_cache_block_size" due to low confidence (0.00016434812278021127)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(93, 100), match='hdr_cnt'>, value=<re.Match object; span=(19, 20), match='0'>, recommendation='Content-length) eq 0', passage='the braces must be seen as independent words). Example :\nThe following rule :\nacl missing_cl hdr_cnt(Content-length) eq 0\nhttp-request deny if METH_POST missing_cl\nCan also be written that way : table_open_cache_instances ', float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.06523299217224121
Excluding recommendation "hdr_cnt(Content-length) eq 0" for parameter "missing_cl" due to low confidence (0.016095301136374474)
Excluding recommendation "
http-request deny if METH_POST missing_cl
" for parameter "table_open_cache_instances" due to low confidence (0.00020854221656918526)
Excluding recommendation "Content-length) eq 0" for parameter "hdr_cnt" due to low confidence (0.039998386055231094)
Excluding recommendation "random names" for parameter "explicit_defaults_for_timestamp" due to low confidence (0.00021075464610476047)
Excluding recommendation "anonymous ACLs" for parameter "innodb_flush_sync" due to low confidence (0.016131116077303886)
Excluding recommendation "
acl" for parameter "site_dead" due to low confidence (0.01699376106262207)
Excluding recommendation "nbsrv(dynamic) lt 2" for parameter "slow_query_log" due to low confidence (0.00010052556172013283)
Excluding recommendation "http-request deny" and "use_backend"
keywords" for parameter "use_backend" due to low confidence (0.01634826324880123)
Excluding recommendation "X-51D-DeviceTypeMobileTablet" for parameter "default_backend" due to low confidence (0.0026214267127215862)
Excluding recommendation "three" for parameter "end_markers_in_json" due to low confidence (0.0016020697075873613)
Excluding recommendation "12 different properties" for parameter "explicit_defaults_for_timestamp" due to low confidence (0.0025474424473941326)
Excluding recommendation "4 terabytes" for parameter "tmp_table_size" due to low confidence (0.025885319337248802)
Excluding recommendation "4 terabytes" for parameter "sc_kbytes_in" due to low confidence (0.0094860615208745)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(404, 418), match='tmp_table_size'>, value=<re.Match object; span=(0, 2), match='32'>, recommendation='32-bit integers', passage='table_kbytes_out(<table>)Uses the string representation of the input sample to perform a look up in\nthe specified table. If the key is not found in the table, integer value zero\nis returned. Otherwise the converter returns the cumulative number of server-\nto-client data associated with the input sample in the designated table,\nmeasured in kilobytes. The test is currently performed on 32-bit integers, tmp_table_size ', float_val=32.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.05514010041952133
Excluding recommendation "integer value zero" for parameter "table_kbytes_out" due to low confidence (0.015613970346748829)
Excluding recommendation "4 terabytes" for parameter "table_server_id" due to low confidence (0.02504104934632778)
Excluding recommendation "4 terabytes" for parameter "key_buffer_size" due to low confidence (0.0004981639795005322)
Excluding recommendation "4 terabytes" for parameter "sc_kbytes_out" due to low confidence (0.023451823741197586)
Excluding recommendation "any date format" for parameter "explicit_defaults_for_timestamp" due to low confidence (0.002179657807573676)
Excluding recommendation "32-bit" for parameter "lower_case_table_names" due to low confidence (0.0005504590808413923)
Excluding recommendation "100" for parameter "be_sess_rate" due to low confidence (0.021675297990441322)
Excluding recommendation "being_scanned be_sess_rate gt 100" for parameter "max_error_count" due to low confidence (0.0003166351525578648)
Excluding recommendation "max_error_count" for parameter "being_scanned" due to low confidence (0.04992599040269852)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(247, 266), match='end_markers_in_json'>, value=<re.Match object; span=(21, 22), match='1'>, recommendation='Occurrences start at 1, and when unspecified', passage='http-response set-header Expires %[date(3600),http_date]\ndistcc_body(<token>[,<occ>]) : binaryParses a distcc message and returns the body associated to occurrence #<occ>\nof the token <token>. Occurrences start at 1, and when unspecified, any may end_markers_in_json ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.05639738589525223
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(46, 55), match='http_date'>, value=<re.Match object; span=(5, 9), match='3600'>, recommendation='date(3600', passage='http-response set-header Expires %[date(3600),http_date]\ndistcc_body(<token>[,<occ>]) : binaryParses a distcc message and returns the body associated to occurrence #<occ>\nof the token <token>. Occurrences start at 1, and when unspecified, any may end_markers_in_json ', float_val=3600.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.1964130848646164
Excluding recommendation "distcc_param(DOTI) gt 1000000" for parameter "use_backend" due to low confidence (0.03906404599547386)
Excluding recommendation "environment variable <name>." for parameter "tmp_table_size" due to low confidence (0.00015362763951998204)
Excluding recommendation "distcc_param(DOTI) gt 1000000" for parameter "big_farm" due to low confidence (0.03707912936806679)
Excluding recommendation "gt 1000000" for parameter "distcc_param" due to low confidence (0.03094159997999668)
Excluding recommendation "integerReturns" for parameter "fe_conn" due to low confidence (0.014308028854429722)
Excluding recommendation "the number of currently established connections" for parameter "table_open_cache_instances" due to low confidence (0.009228401817381382)
Excluding recommendation "too_fast" for parameter "net_read_timeout" due to low confidence (0.0011613896349444985)
Excluding recommendation "100
acl too_fast" for parameter "fe_sess_rate" due to low confidence (0.005391804035753012)
Excluding recommendation "net_read_timeout" for parameter "too_fast" due to low confidence (0.017129817977547646)
Excluding recommendation "zero" for parameter "be_sess_rate" due to low confidence (0.00019538699416443706)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(236, 267), match='explicit_defaults_for_timestamp'>, value=<re.Match object; span=(0, 1), match='2'>, recommendation='2^32', passage='also the "avg_queue", "be_conn", and "be_sess_rate" fetches.\nrand([<range>]) : integerReturns a random integer value within a range of <range> possible values,\nstarting at zero. If the range is not specified, it defaults to 2^32, which explicit_defaults_for_timestamp ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.18148769438266754
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(236, 267), match='explicit_defaults_for_timestamp'>, value=<re.Match object; span=(2, 4), match='32'>, recommendation='2^32', passage='also the "avg_queue", "be_conn", and "be_sess_rate" fetches.\nrand([<range>]) : integerReturns a random integer value within a range of <range> possible values,\nstarting at zero. If the range is not specified, it defaults to 2^32, which explicit_defaults_for_timestamp ', float_val=32.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.18148769438266754
Excluding recommendation "be_conn", and "be_sess_rate" for parameter "avg_queue" due to low confidence (0.0029535952489823103)
Excluding recommendation ""be_conn", and "be_sess_rate" for parameter "be_conn" due to low confidence (9.895768016576767e-05)
Excluding recommendation "between 0 and 4294967295" for parameter "explicit_defaults_for_timestamp" due to low confidence (0.013536578975617886)
Excluding recommendation "between 0 and 4294967295" for parameter "srv_conn" due to low confidence (0.031198052689433098)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(254, 273), match='preload_buffer_size'>, value=<re.Match object; span=(0, 2), match='50'>, recommendation='50', passage='alternate backend when an expensive or fragile one reaches too high a session\nrate, or to limit abuse of service (e.g. prevent latent requests from\noverloading servers).\nExample :\n# Redirect to a separate back\nacl srv1_full srv_sess_rate(be1/srv1) gt 50 preload_buffer_size ', float_val=50.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.06874722242355347
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(224, 237), match='srv_sess_rate'>, value=<re.Match object; span=(2, 3), match='1'>, recommendation='be1/srv1', passage='alternate backend when an expensive or fragile one reaches too high a session\nrate, or to limit abuse of service (e.g. prevent latent requests from\noverloading servers).\nExample :\n# Redirect to a separate back\nacl srv1_full srv_sess_rate(be1/srv1) gt 50 preload_buffer_size ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.3593866229057312
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(224, 237), match='srv_sess_rate'>, value=<re.Match object; span=(7, 8), match='1'>, recommendation='be1/srv1', passage='alternate backend when an expensive or fragile one reaches too high a session\nrate, or to limit abuse of service (e.g. prevent latent requests from\noverloading servers).\nExample :\n# Redirect to a separate back\nacl srv1_full srv_sess_rate(be1/srv1) gt 50 preload_buffer_size ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.3593866229057312
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(44, 55), match='use_backend'>, value=<re.Match object; span=(3, 9), match='1_full'>, recommendation='srv1_full or srv2_full', passage='acl srv2_full srv_sess_rate(be1/srv2) gt 50\nuse_backend be2 if srv1_full or srv2_full\nstopping : booleanReturns TRUE if the process calling the function is currently stopping. This\ncan be useful for logging, or for relaxing certain checks or helping close innodb_flush_log_at_timeout ', float_val=1.0, val_unit='_full', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.069915771484375
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(44, 55), match='use_backend'>, value=<re.Match object; span=(16, 22), match='2_full'>, recommendation='srv1_full or srv2_full', passage='acl srv2_full srv_sess_rate(be1/srv2) gt 50\nuse_backend be2 if srv1_full or srv2_full\nstopping : booleanReturns TRUE if the process calling the function is currently stopping. This\ncan be useful for logging, or for relaxing certain checks or helping close innodb_flush_log_at_timeout ', float_val=2.0, val_unit='_full', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.069915771484375
Excluding recommendation "booleanReturns TRUE" for parameter "innodb_flush_log_at_timeout" due to low confidence (0.007336365524679422)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(14, 27), match='srv_sess_rate'>, value=<re.Match object; span=(3, 9), match='1_full'>, recommendation='srv1_full or srv2_full', passage='acl srv2_full srv_sess_rate(be1/srv2) gt 50\nuse_backend be2 if srv1_full or srv2_full\nstopping : booleanReturns TRUE if the process calling the function is currently stopping. This\ncan be useful for logging, or for relaxing certain checks or helping close innodb_flush_log_at_timeout ', float_val=1.0, val_unit='_full', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.07778698951005936
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(14, 27), match='srv_sess_rate'>, value=<re.Match object; span=(16, 22), match='2_full'>, recommendation='srv1_full or srv2_full', passage='acl srv2_full srv_sess_rate(be1/srv2) gt 50\nuse_backend be2 if srv1_full or srv2_full\nstopping : booleanReturns TRUE if the process calling the function is currently stopping. This\ncan be useful for logging, or for relaxing certain checks or helping close innodb_flush_log_at_timeout ', float_val=2.0, val_unit='_full', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.07778698951005936
Excluding recommendation "'a-z', 'A-Z', '0-9'," for parameter "lower_case_table_names" due to low confidence (0.00016237043018918484)
Excluding recommendation "three pre-defined prefixes" for parameter "explicit_defaults_for_timestamp" due to low confidence (0.00047466359683312476)
Excluding recommendation "MAX_SESS_STKCTR value does not exceed 3" for parameter "max_binlog_stmt_cache_size" due to low confidence (8.486722072120756e-05)
Excluding recommendation "HTTP/1.1 or 2 for HTTP/2" for parameter "explicit_defaults_for_timestamp" due to low confidence (0.0013918139738962054)
Excluding recommendation "HTTP/1.1 or 2 for HTTP/2" for parameter "fc_http_major" due to low confidence (0.012075386941432953)
Excluding recommendation "integerReturns" for parameter "fc_unacked" due to low confidence (0.028466546908020973)
Excluding recommendation "
fc_sacked : integerReturns" for parameter "log_syslog_include_pid" due to low confidence (0.0003522453480400145)
Excluding recommendation "
fc_retrans" for parameter "net_write_timeout" due to low confidence (0.004336439073085785)
Excluding recommendation "
fc_fackets" for parameter "log_syslog_include_pid" due to low confidence (0.0009943493641912937)
Excluding recommendation "
fc_lost : integerReturns" for parameter "net_write_timeout" due to low confidence (0.0005720797344110906)
Excluding recommendation "
fc_reordering : integerReturns" for parameter "binlog_error_action" due to low confidence (0.00127015623729676)
Excluding recommendation "
fe_id : integerReturns" for parameter "log_syslog_include_pid" due to low confidence (0.007045847829431295)
Excluding recommendation "
acl" for parameter "slow_query_log" due to low confidence (0.0004299403226468712)
Excluding recommendation "
acl abuse sc0_http_req_rate gt 10" for parameter "_http_req_rate" due to low confidence (0.005217027384787798)
Excluding recommendation "
tcp-request connection accept if !abuse" for parameter "innodb_flush_log_at_trx_commit" due to low confidence (7.318157440749928e-05)
Excluding recommendation "5
acl save" for parameter "_inc_gpc" due to low confidence (0.01663443259894848)
Excluding recommendation "ge 0" for parameter "_clr_gpc" due to low confidence (0.03386511281132698)
Excluding recommendation "request errors and 4xx error responses" for parameter "src_http_err_cnt" due to low confidence (0.0022493957076221704)
Excluding recommendation "request errors and 4xx error responses" for parameter "max_error_count" due to low confidence (0.0009025385370478034)
Excluding recommendation "request errors and 4xx error responses" for parameter "src_http_err_rate" due to low confidence (0.00653014425188303)
Excluding recommendation "request errors and 4xx error responses" for parameter "max_error_count" due to low confidence (0.010471684858202934)
Excluding recommendation "integersc0_inc_gpc0" for parameter "sc_inc_gpc" due to low confidence (0.02562783658504486)
Excluding recommendation "integersc" for parameter "_inc_gpc" due to low confidence (0.04997338727116585)
Excluding recommendation "integersc" for parameter "bulk_insert_buffer_size" due to low confidence (0.00018773970077745616)
Excluding recommendation "
acl kill
sc0_inc_gpc0 gt 0" for parameter "_inc_gpc" due to low confidence (0.00521407276391983)
Excluding recommendation "
acl" for parameter "check_proxy_users" due to low confidence (0.0012514928821474314)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(22, 36), match='_http_req_rate'>, value=<re.Match object; span=(0, 2), match='10'>, recommendation='10', passage='Example:\nacl abuse sc0_http_req_rate gt 10\nacl kill\nsc0_inc_gpc0 gt 0\ntcp-request connection reject if abuse kill check_proxy_users ', float_val=10.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.1686376929283142
Excluding recommendation "4 terabytes" for parameter "key_buffer_size" due to low confidence (0.005892915651202202)
Excluding recommendation "integersc" for parameter "_kbytes_in" due to low confidence (0.04377509653568268)
Excluding recommendation "integersc" for parameter "sc_kbytes_in" due to low confidence (0.016137246042490005)
Excluding recommendation "4 terabytes" for parameter "src_kbytes_in" due to low confidence (0.0011502807028591633)
Excluding recommendation "4 terabytes" for parameter "read_rnd_buffer_size" due to low confidence (0.0026297871954739094)
Excluding recommendation "4 terabytes" for parameter "src_kbytes_out" due to low confidence (0.0017672056565061212)
Excluding recommendation "integersc" for parameter "sc_kbytes_out" due to low confidence (0.019057096913456917)
Excluding recommendation "integerClears" for parameter "src_clr_gpc" due to low confidence (0.01636498048901558)
Excluding recommendation "0" for parameter "log_builtin_as_identified_by_password" due to low confidence (0.0301192756742239)
Excluding recommendation "10 max_user_connections" for parameter "src_http_req_rate" due to low confidence (0.021797779947519302)
Excluding recommendation "10" for parameter "max_user_connections" due to low confidence (0.022192012518644333)
Excluding recommendation "save
src_clr_gpc0 ge 0" for parameter "src_clr_gpc" due to low confidence (0.005108615383505821)
Excluding recommendation "!abuse save
tcp-request connection reject if abuse" for parameter "innodb_flush_log_at_trx_commit" due to low confidence (0.00030395571957342327)
Excluding recommendation "5" for parameter "src_inc_gpc" due to low confidence (0.0018387633608654141)
Excluding recommendation "request errors and 4xx error responses" for parameter "_http_err_cnt" due to low confidence (0.004320676904171705)
Excluding recommendation "request errors and 4xx error responses" for parameter "check_proxy_users" due to low confidence (0.0007719095447100699)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(0, 17), match='src_http_err_rate'>, value=<re.Match object; span=(19, 22), match='4xx'>, recommendation='request errors and 4xx error responses', passage="src_http_err_rate([<table>]) : integerReturns the average rate of HTTP errors from the incoming connection's source\naddress in the current proxy's stick-table or in the designated stick-table,\nmeasured in amount of errors over the period configured in the table. This\nincludes the both request errors and 4xx error responses. If the address is max_error_count ", float_val=4.0, val_unit='xx', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.06897660344839096
Excluding recommendation "request errors and 4xx error responses" for parameter "max_error_count" due to low confidence (0.019535578787326813)
Excluding recommendation "
designated stick-table" for parameter "_inc_gpc" due to low confidence (0.0006033590761944652)
Excluding recommendation "integerIncrements" for parameter "src_inc_gpc" due to low confidence (0.0038144805002957582)
Excluding recommendation "1" for parameter "innodb_cmp_per_index_enabled" due to low confidence (0.0016880732728168368)
Excluding recommendation "gt 10" for parameter "src_http_req_rate" due to low confidence (0.016070948913693428)
Excluding recommendation "
acl" for parameter "innodb_api_bk_commit_interval" due to low confidence (0.0007525549735873938)
Excluding recommendation "0 gt 0" for parameter "src_inc_gpc" due to low confidence (0.019947616383433342)
Excluding recommendation "4 terabytes" for parameter "_kbytes_in" due to low confidence (0.0021167804952710867)
Excluding recommendation "4 terabytes" for parameter "tmp_table_size" due to low confidence (0.003104626899585128)
Excluding recommendation "4" for parameter "tmp_table_size" due to low confidence (0.03615763783454895)
Excluding recommendation "4 tmp_table_size" for parameter "src_kbytes_out" due to low confidence (0.0011515782680362463)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(32, 49), match='src_updt_conn_cnt'>, value=<re.Match object; span=(3, 4), match='3'>, recommendation='gt 3', passage="tcp-request content reject if { src_updt_conn_cnt gt 3 }\nserver local 127.0.0.1:22\nsrv_id : integerReturns an integer containing the server's id when processing the response.\nWhile it's almost only used with ACLs, it may be used for logging or\ndebugging. mysql_native_password_proxy_users ", float_val=3.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.07009582221508026
Excluding recommendation "
srv_id : integerReturns" for parameter "mysql_native_password_proxy_users" due to low confidence (0.001319586532190442)
Excluding recommendation "X-51D-DeviceTypeMobileTablet" for parameter "default_backend" due to low confidence (0.017028696835041046)
Excluding recommendation "X-51D-DeviceTypeMobileTablet" for parameter "end_markers_in_json" due to low confidence (0.005479961168020964)
Excluding recommendation "mysql_native_password_proxy_users" for parameter "ssl_bc_session_id" due to low confidence (0.011155525222420692)
Excluding recommendation "base64" for parameter "ssl_bc_unique_id" due to low confidence (0.0003098433662671596)
Excluding recommendation "SSL ID" for parameter "mysql_native_password_proxy_users" due to low confidence (9.481043525738642e-05)
Excluding recommendation "depth > 0, or 0" for parameter "ssl_c_ca_err" due to low confidence (0.022674571722745895)
Excluding recommendation "0, or 0" for parameter "binlog_error_action" due to low confidence (4.0119313780451193e-05)
Excluding recommendation "binaryReturns" for parameter "ssl_c_der" due to low confidence (0.0046857139095664024)
Excluding recommendation "0" for parameter "binlog_error_action" due to low confidence (0.0001207210952998139)
Excluding recommendation "integerWhen" for parameter "ssl_c_err" due to low confidence (0.0019812430255115032)
Excluding recommendation "returns the ID of the first error detected during verification at depth 0" for parameter "mysql_native_password_proxy_users" due to low confidence (7.182653644122183e-05)
Excluding recommendation "([<entry>[,<occ>]])" for parameter "ssl_c_i_dn" due to low confidence (0.029876062646508217)
Excluding recommendation "0" for parameter "binlog_error_action" due to low confidence (0.00037368841003626585)
Excluding recommendation "ssl_c_i_dn(OU,2)"" for parameter "innodb_disable_sort_file_cache" due to low confidence (0.0005455116624943912)
Excluding recommendation ""ssl_c_i_dn(OU,2" for parameter "ssl_c_key_alg" due to low confidence (0.0006033270037733018)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(15, 25), match='ssl_c_i_dn'>, value=<re.Match object; span=(3, 4), match='2'>, recommendation='OU,2', passage='For instance, "ssl_c_i_dn(OU,2)" the second organization unit, and\n"ssl_c_i_dn(CN)" retrieves the common name.\nssl_c_key_alg : stringReturns the name of the algorithm used to generate the key of the certificate innodb_disable_sort_file_cache ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.14804920554161072
Excluding recommendation "serial of the certificate" for parameter "ssl_c_serial" due to low confidence (0.020169487223029137)
Excluding recommendation "ssl_c_s_dn(OU,2)"" for parameter "mysql_native_password_proxy_users" due to low confidence (0.0002791376318782568)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(15, 25), match='ssl_c_s_dn'>, value=<re.Match object; span=(3, 4), match='2'>, recommendation='OU,2', passage='For instance, "ssl_c_s_dn(OU,2)" the second organization unit, and\n"ssl_c_s_dn(CN)" retrieves the common name.\nssl_c_serial : binaryReturns the serial of the certificate presented by the client when the\nincoming connection was made over an SSL/TLS transport layer. When used for mysql_native_password_proxy_users ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.09262830764055252
Excluding recommendation "the name of the algorithm used to generate the key of the certificate" for parameter "ssl_f_key_alg" due to low confidence (0.001782723586075008)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(15, 25), match='ssl_f_i_dn'>, value=<re.Match object; span=(3, 4), match='2'>, recommendation='OU,2', passage='For instance, "ssl_f_i_dn(OU,2)" the second organization unit, and\n"ssl_f_i_dn(CN)" retrieves the common name.\nssl_f_key_alg : stringReturns the name of the algorithm used to generate the key of the certificate\npresented by the frontend when the incoming connection was made over an mysql_native_password_proxy_users ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.1255548894405365
Excluding recommendation "ssl_f_i_dn(OU,2)"" for parameter "mysql_native_password_proxy_users" due to low confidence (0.00018861798162106425)
Excluding recommendation "serial of the certificate" for parameter "ssl_f_serial" due to low confidence (0.01818152889609337)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(15, 25), match='ssl_f_s_dn'>, value=<re.Match object; span=(3, 4), match='2'>, recommendation='OU,2', passage='For instance, "ssl_f_s_dn(OU,2)" the second organization unit, and\n"ssl_f_s_dn(CN)" retrieves the common name.\nssl_f_serial : binaryReturns the serial of the certificate presented by the frontend when the\nincoming connection was made over an SSL/TLS transport layer. When used for mysql_native_password_proxy_users ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.11918141692876816
Excluding recommendation "ssl_f_s_dn(OU,2)"" for parameter "mysql_native_password_proxy_users" due to low confidence (0.00037840812001377344)
Excluding recommendation "key_cache_block_size" for parameter "ssl_fc_cipherlist_xxh" due to low confidence (0.0005525551969185472)
Excluding recommendation "ssl_fc_cipherlist_xxh" for parameter "key_cache_block_size" due to low confidence (0.00021894309611525387)
Excluding recommendation "greater than 0" for parameter "ssl_fc_cipherlist_xxh" due to low confidence (0.021884452551603317)
Excluding recommendation "booleanReturns" for parameter "ssl_fc_has_crt" due to low confidence (0.0007161525427363813)
Excluding recommendation "0" for parameter "key_cache_block_size" due to low confidence (0.0001128326912294142)
Excluding recommendation "TLS unique ID" for parameter "require_secure_transport" due to low confidence (0.0038433449808508158)
Excluding recommendation "binaryWhen" for parameter "ssl_fc_unique_id" due to low confidence (0.0035428402479737997)
Excluding recommendation "mysql_native_password_proxy_users" for parameter "req_ssl_sni" due to low confidence (0.0003436313709244132)
Excluding recommendation "SSL contents" for parameter "mysql_native_password_proxy_users" due to low confidence (0.011691880412399769)
Excluding recommendation "ephemeral" for parameter "key_buffer_size" due to low confidence (0.0006926830392330885)
Excluding recommendation "apply RDP cookie persistence
persist rdp-cookie" for parameter "explicit_defaults_for_timestamp" due to low confidence (0.0016801721649244428)
Excluding recommendation "srv1 1.1.1.1:3389" for parameter "binlog_stmt_cache_size" due to low confidence (0.015434873290359974)
Excluding recommendation "
stick-table type string size 204800" for parameter "rdp_cookie" due to low confidence (0.00030159021844156086)
Excluding recommendation "check_proxy_users" for parameter "req_rdp_cookie" due to low confidence (0.00012640058412216604)
Excluding recommendation "req_rdp_cookie" ACL" for parameter "check_proxy_users" due to low confidence (6.943126936675981e-05)
Excluding recommendation "Supported Elliptic Curves
Extension" for parameter "ssl_ec_ext" due to low confidence (0.01486602146178484)
Excluding recommendation "EC
certificate and to use RSA" for parameter "mysql_native_password_proxy_users" due to low confidence (0.001010336447507143)
Excluding recommendation "
req_ssl_sni : exact string match
Examples" for parameter "check_proxy_users" due to low confidence (0.0002764916280284524)
Excluding recommendation "exact string match" for parameter "ssl_fc_sni" due to low confidence (0.009114580228924751)
Excluding recommendation "explicit_defaults_for_timestamp" for parameter "use_backend" due to low confidence (0.04045170918107033)
Excluding recommendation "req_ssl_sni -f allowed_sites" for parameter "explicit_defaults_for_timestamp" due to low confidence (0.002254330087453127)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(109, 127), match='req_ssl_hello_type'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation='1', passage='# Wait for a client hello for at most 5 seconds\ntcp-request inspect-delay 5s\ntcp-request content accept if { req_ssl_hello_type 1 }\nuse_backend bk_allow if { req_ssl_sni -f allowed_sites } explicit_defaults_for_timestamp ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.4217473566532135
Excluding recommendation "allowed_sites" for parameter "req_ssl_sni" due to low confidence (0.013743928633630276)
Excluding recommendation "integerReturns" for parameter "ssl_st_ext" due to low confidence (0.03750580921769142)
Excluding recommendation "integerReturns" for parameter "default_backend" due to low confidence (0.036945074796676636)
Excluding recommendation "integerReturns 0" for parameter "end_markers_in_json" due to low confidence (0.004867574665695429)
Excluding recommendation "integerReturns" for parameter "bk_sorry_page" due to low confidence (0.019183063879609108)
Excluding recommendation "
" for parameter "explicit_defaults_for_timestamp" due to low confidence (0.00033089579665102065)
Excluding recommendation "goodguys src 10.0.0.0/24" for parameter "innodb_disable_sort_file_cache" due to low confidence (0.0014063426060602069)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(0, 8), match='base_sub'>, value=<re.Match object; span=(20, 22), match='32'>, recommendation='substring match\nbase32 : integerThis', passage='base_sub : substring match\nbase32 : integerThis returns a 32-bit hash of the value returned by the "base" fetch method\nabove. This is useful to track per-URL activity on high traffic sites without\nhaving to store all URLs. Instead a shorter hash is stored, saving a lot of binlog_stmt_cache_size ', float_val=32.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.08275187015533447
Excluding recommendation "base_sub : substring match
base32 : integerThis" for parameter "binlog_stmt_cache_size" due to low confidence (0.0003482149913907051)
Excluding recommendation "Positive values" for parameter "explicit_defaults_for_timestamp" due to low confidence (0.004678171128034592)
Excluding recommendation "Positive values" for parameter "http_auth" due to low confidence (0.0076181949116289616)
Excluding recommendation "1.1"." for parameter "query_cache_wlock_invalidate" due to low confidence (0.0015983557095751166)
Excluding recommendation ""1.1"." for parameter "stringreq_ver" due to low confidence (0.003498222678899765)
Excluding recommendation "exact string match
res.comp : booleanReturns" for parameter "req_ver" due to low confidence (0.005431484431028366)
Excluding recommendation "boolean "true" value" for parameter "log_statements_unsafe_for_binlog" due to low confidence (0.002107352949678898)
Excluding recommendation "Positive values" for parameter "ipshdr_ip" due to low confidence (0.007172266021370888)
Excluding recommendation "Positive values" for parameter "hdr_ip" due to low confidence (0.003624861128628254)
Excluding recommendation ""1.1"." for parameter "stringresp_ver" due to low confidence (0.006505140569061041)
Excluding recommendation ""1.1"." for parameter "resp_ver" due to low confidence (0.009121335111558437)
Excluding recommendation "res.ver" for parameter "table_open_cache_instances" due to low confidence (8.761181379668415e-05)
Excluding recommendation "port 80" for parameter "http_proxy" due to low confidence (0.000702056335285306)
Excluding recommendation "port 80" for parameter "mysql_native_password_proxy_users" due to low confidence (0.0013801902532577515)
Excluding recommendation "HTTP_1.0req_ver 1.0" for parameter "read_rnd_buffer_size" due to low confidence (0.007402119226753712)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(8, 15), match='req_ver'>, value=<re.Match object; span=(5, 8), match='1.1'>, recommendation='HTTP_1.1', passage='HTTP_1.0req_ver 1.0match HTTP version 1.0\nHTTP_1.1req_ver 1.1match HTTP version 1.1\nHTTP_CONTENThdr_val(content-length) gt 0match an existing content-length read_rnd_buffer_size ', float_val=1.1, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.06517302989959717
Excluding recommendation "HTTP_CONTENThdr_val(content-length" for parameter "hdr_val" due to low confidence (0.0013880861224606633)
Excluding recommendation "^[^/:]*://match absolute URL with scheme" for parameter "url_reg" due to low confidence (0.00794730894267559)
Excluding recommendation "HTTP_URL_STARurl
*match URL equal to "*"" for parameter "mysql_native_password_proxy_users" due to low confidence (2.0027147911605425e-05)
Excluding recommendation "/match URL beginning with "/"" for parameter "url_beg" due to low confidence (0.002617219230160117)
Excluding recommendation "METH_PUTmethod
PUTmatch HTTP PUT method" for parameter "explicit_defaults_for_timestamp" due to low confidence (0.0001893683074740693)
Excluding recommendation "explicit_defaults_for_timestamp" for parameter "req_rdp_cookie_cnt" due to low confidence (0.009954449720680714)
Excluding recommendation "TRUEalways_truealways" for parameter "wait_endwait" due to low confidence (0.031948819756507874)
Excluding recommendation "
WAIT_ENDwait_endwait" for parameter "always_truealways" due to low confidence (0.04224948212504387)
Excluding recommendation "precise logs" for parameter "check_proxy_users" due to low confidence (0.018547145649790764)
Excluding recommendation "0" for parameter "req_len" due to low confidence (0.01049029640853405)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(39, 55), match='destination_port'>, value=<re.Match object; span=(0, 4), match='10.0'>, recommendation='10.0.3.31:8012\n', passage="10.0.1.2:33312\n'to'\ndestination_ip ':' destination_port\n10.0.3.31:8012\n'(' frontend_name '/' mode ')'\n(www/HTTP)\nDetailed fields description : mysql_native_password_proxy_users ", float_val=10.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.058128856122493744
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(39, 55), match='destination_port'>, value=<re.Match object; span=(5, 9), match='3.31'>, recommendation='10.0.3.31:8012\n', passage="10.0.1.2:33312\n'to'\ndestination_ip ':' destination_port\n10.0.3.31:8012\n'(' frontend_name '/' mode ')'\n(www/HTTP)\nDetailed fields description : mysql_native_password_proxy_users ", float_val=3.31, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.058128856122493744
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(39, 55), match='destination_port'>, value=<re.Match object; span=(10, 14), match='8012'>, recommendation='10.0.3.31:8012\n', passage="10.0.1.2:33312\n'to'\ndestination_ip ':' destination_port\n10.0.3.31:8012\n'(' frontend_name '/' mode ')'\n(www/HTTP)\nDetailed fields description : mysql_native_password_proxy_users ", float_val=8012.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.058128856122493744
Excluding recommendation "10.0.1.2:33312
'to" for parameter "destination_ip" due to low confidence (0.0332285575568676)
Excluding recommendation "mode" for parameter "frontend_name" due to low confidence (0.0002280039043398574)
Excluding recommendation "10.0.1.2:33312
'to" for parameter "mysql_native_password_proxy_users" due to low confidence (0.012631791643798351)
Excluding recommendation "client_port
10.0.1.2:33313" for parameter "client_ip" due to low confidence (0.007985591888427734)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(139, 150), match='client_port'>, value=<re.Match object; span=(0, 4), match='10.0'>, recommendation='10.0.1.2:33313', passage="bck/srv1 0/0/5007 212 -- 0/0/0/0/3 0/0\nField\nFormat\nExtract from the example above\nprocess_name '[' pid ']:'\nhaproxy[14387]:\nclient_ip ':' client_port\n10.0.1.2:33313 innodb_file_per_table ", float_val=10.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.1146135926246643
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(139, 150), match='client_port'>, value=<re.Match object; span=(5, 8), match='1.2'>, recommendation='10.0.1.2:33313', passage="bck/srv1 0/0/5007 212 -- 0/0/0/0/3 0/0\nField\nFormat\nExtract from the example above\nprocess_name '[' pid ']:'\nhaproxy[14387]:\nclient_ip ':' client_port\n10.0.1.2:33313 innodb_file_per_table ", float_val=1.2, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.1146135926246643
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(139, 150), match='client_port'>, value=<re.Match object; span=(9, 14), match='33313'>, recommendation='10.0.1.2:33313', passage="bck/srv1 0/0/5007 212 -- 0/0/0/0/3 0/0\nField\nFormat\nExtract from the example above\nprocess_name '[' pid ']:'\nhaproxy[14387]:\nclient_ip ':' client_port\n10.0.1.2:33313 innodb_file_per_table ", float_val=33313.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.1146135926246643
Excluding recommendation "0/0/0/0/3 0/0" for parameter "innodb_file_per_table" due to low confidence (0.004679773934185505)
Excluding recommendation "pid" for parameter "process_name" due to low confidence (0.0005848459550179541)
Excluding recommendation "
bck/srv1
Tw" for parameter "server_name" due to low confidence (0.005104505456984043)
Excluding recommendation "
fnt" for parameter "backend_name" due to low confidence (0.00460472609847784)
Excluding recommendation "
fnt
backend_name '/'" for parameter "frontend_name" due to low confidence (0.00301866652444005)
Excluding recommendation "end_markers_in_json" for parameter "accept_date" due to low confidence (0.0009534420096315444)
Excluding recommendation "Tt*" for parameter "end_markers_in_json" due to low confidence (0.019989093765616417)
Excluding recommendation "0/0/5007
bytes_read*
212" for parameter "bytes_read" due to low confidence (0.009218571707606316)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(109, 125), match='net_read_timeout'>, value=<re.Match object; span=(0, 1), match='0'>, recommendation='0/0/0/0/3', passage="0/0/5007\nbytes_read*\n212\ntermination_state\nactconn '/' feconn '/' beconn '/' srv_conn '/' retries*\n0/0/0/0/3 net_read_timeout ", float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.25201964378356934
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(109, 125), match='net_read_timeout'>, value=<re.Match object; span=(2, 3), match='0'>, recommendation='0/0/0/0/3', passage="0/0/5007\nbytes_read*\n212\ntermination_state\nactconn '/' feconn '/' beconn '/' srv_conn '/' retries*\n0/0/0/0/3 net_read_timeout ", float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.25201964378356934
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(109, 125), match='net_read_timeout'>, value=<re.Match object; span=(4, 5), match='0'>, recommendation='0/0/0/0/3', passage="0/0/5007\nbytes_read*\n212\ntermination_state\nactconn '/' feconn '/' beconn '/' srv_conn '/' retries*\n0/0/0/0/3 net_read_timeout ", float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.25201964378356934
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(109, 125), match='net_read_timeout'>, value=<re.Match object; span=(6, 7), match='0'>, recommendation='0/0/0/0/3', passage="0/0/5007\nbytes_read*\n212\ntermination_state\nactconn '/' feconn '/' beconn '/' srv_conn '/' retries*\n0/0/0/0/3 net_read_timeout ", float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.25201964378356934
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(109, 125), match='net_read_timeout'>, value=<re.Match object; span=(8, 9), match='3'>, recommendation='0/0/0/0/3', passage="0/0/5007\nbytes_read*\n212\ntermination_state\nactconn '/' feconn '/' beconn '/' srv_conn '/' retries*\n0/0/0/0/3 net_read_timeout ", float_val=3.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.25201964378356934
Excluding recommendation "0/0/5007
bytes_read*
212" for parameter "termination_state" due to low confidence (0.010618330910801888)
Excluding recommendation "0/0/0/0/3 net_read_timeout" for parameter "srv_conn" due to low confidence (0.02794686146080494)
Excluding recommendation "If the connection was accepted on a UNIX socket" for parameter "client_ip" due to low confidence (0.0002694875583983958)
Excluding recommendation "backend_queue
0/0" for parameter "srv_queue" due to low confidence (0.0028147087432444096)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(14, 27), match='backend_queue'>, value=<re.Match object; span=(0, 1), match='0'>, recommendation='0/0', passage='srv_queue \'/\' backend_queue\n0/0\nDetailed fields description :\n- "client_ip" is the IP address of the client which initiated the TCP\nconnection to haproxy. If the connection was accepted on a UNIX socket\ninstead, the IP address would be replaced with the word "unix". Note that mysql_native_password_proxy_users ', float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.2770087420940399
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(14, 27), match='backend_queue'>, value=<re.Match object; span=(2, 3), match='0'>, recommendation='0/0', passage='srv_queue \'/\' backend_queue\n0/0\nDetailed fields description :\n- "client_ip" is the IP address of the client which initiated the TCP\nconnection to haproxy. If the connection was accepted on a UNIX socket\ninstead, the IP address would be replaced with the word "unix". Note that mysql_native_password_proxy_users ', float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.2770087420940399
Excluding recommendation "
0/0
" for parameter "mysql_native_password_proxy_users" due to low confidence (0.00010675629164325073)
Excluding recommendation "64-bit counter" for parameter "termination_state" due to low confidence (0.000964064325671643)
Excluding recommendation "final one
may be larger" for parameter "max_error_count" due to low confidence (0.00011006938439095393)
Excluding recommendation "bck
backend" for parameter "default_backend" due to low confidence (0.04381243884563446)
Excluding recommendation "srv1 127.0.0.1:8000" for parameter "innodb_flush_log_at_timeout" due to low confidence (0.0010268093319609761)
Excluding recommendation "default_week_format" for parameter "client_ip" due to low confidence (0.04668336361646652)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(100, 111), match='client_port'>, value=<re.Match object; span=(0, 4), match='10.0'>, recommendation='10.0.1.2:33317', passage="Field\nFormat\nExtract from the example above\nprocess_name '[' pid ']:'\nhaproxy[14389]:\nclient_ip ':' client_port\n10.0.1.2:33317 default_week_format ", float_val=10.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.21267521381378174
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(100, 111), match='client_port'>, value=<re.Match object; span=(5, 8), match='1.2'>, recommendation='10.0.1.2:33317', passage="Field\nFormat\nExtract from the example above\nprocess_name '[' pid ']:'\nhaproxy[14389]:\nclient_ip ':' client_port\n10.0.1.2:33317 default_week_format ", float_val=1.2, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.21267521381378174
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(100, 111), match='client_port'>, value=<re.Match object; span=(9, 14), match='33317'>, recommendation='10.0.1.2:33317', passage="Field\nFormat\nExtract from the example above\nprocess_name '[' pid ']:'\nhaproxy[14389]:\nclient_ip ':' client_port\n10.0.1.2:33317 default_week_format ", float_val=33317.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.21267521381378174
Excluding recommendation "client_port
10.0.1.2:33317" for parameter "default_week_format" due to low confidence (0.010354134254157543)
Excluding recommendation "default_week_format" for parameter "process_name" due to low confidence (0.020034682005643845)
Excluding recommendation "srv1
TR" for parameter "server_name" due to low confidence (0.003322112839668989)
Excluding recommendation "mysql_native_password_proxy_users" for parameter "backend_name" due to low confidence (0.002325585810467601)
Excluding recommendation "mysql_native_password_proxy_users" for parameter "frontend_name" due to low confidence (0.0020933987107127905)
Excluding recommendation "mysql_native_password_proxy_users" for parameter "request_date" due to low confidence (0.0017102923011407256)
Excluding recommendation "200
bytes_read*" for parameter "status_code" due to low confidence (0.0035510039888322353)
Excluding recommendation "termination" for parameter "captured_response_cookie" due to low confidence (0.01610841602087021)
Excluding recommendation "retries* end_markers_in_json" for parameter "srv_conn" due to low confidence (0.011688651517033577)
Excluding recommendation "----" for parameter "termination_state" due to low confidence (0.0033153232652693987)
Excluding recommendation "200" for parameter "bytes_read" due to low confidence (0.015439310111105442)
Excluding recommendation "retries" for parameter "end_markers_in_json" due to low confidence (0.002972779329866171)
Excluding recommendation "
2750" for parameter "captured_request_cookie" due to low confidence (0.004421133082360029)
Excluding recommendation "1/1/1/1/0" for parameter "captured_request_headers" due to low confidence (0.0010406402871012688)
Excluding recommendation "1/1/1/1/0" for parameter "preload_buffer_size" due to low confidence (0.0254514142870903)
Excluding recommendation "1/1/1/1/0" for parameter "srv_queue" due to low confidence (0.011753672733902931)
Excluding recommendation "preload_buffer_size" for parameter "captured_response_headers" due to low confidence (0.018674079328775406)
Excluding recommendation "0/0" for parameter "backend_queue" due to low confidence (0.040720660239458084)
Excluding recommendation "the server" for parameter "status_code" due to low confidence (0.02654910646378994)
Excluding recommendation "status_code" for parameter "check_proxy_users" due to low confidence (2.6416382752358913e-05)
Excluding recommendation "HTTP headers. If "option logasap" for parameter "bytes_read" due to low confidence (0.013050095178186893)
Excluding recommendation "64-bit" for parameter "query_alloc_block_size" due to low confidence (0.005962683819234371)
Excluding recommendation "CLF" for parameter "captured_response_headers" due to low confidence (0.012569583021104336)
Excluding recommendation "client_port
127.0.0.1:56059" for parameter "explicit_defaults_for_timestamp" due to low confidence (0.0073838019743561745)
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(137, 148), match='client_port'>, value=<re.Match object; span=(0, 5), match='127.0'>, recommendation='127.0.0.1:56059', passage="Connection error during SSL handshake\nField\nFormat\nExtract from the example above\nprocess_name '[' pid ']:'\nhaproxy[6103]:\nclient_ip ':' client_port\n127.0.0.1:56059 explicit_defaults_for_timestamp ", float_val=127.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.09861558675765991
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(137, 148), match='client_port'>, value=<re.Match object; span=(6, 9), match='0.1'>, recommendation='127.0.0.1:56059', passage="Connection error during SSL handshake\nField\nFormat\nExtract from the example above\nprocess_name '[' pid ']:'\nhaproxy[6103]:\nclient_ip ':' client_port\n127.0.0.1:56059 explicit_defaults_for_timestamp ", float_val=0.1, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.09861558675765991
Adding hint TuningHint(doc_id=93, param=<re.Match object; span=(137, 148), match='client_port'>, value=<re.Match object; span=(10, 15), match='56059'>, recommendation='127.0.0.1:56059', passage="Connection error during SSL handshake\nField\nFormat\nExtract from the example above\nprocess_name '[' pid ']:'\nhaproxy[6103]:\nclient_ip ':' client_port\n127.0.0.1:56059 explicit_defaults_for_timestamp ", float_val=56059.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.09861558675765991
Excluding recommendation "explicit_defaults_for_timestamp" for parameter "process_name" due to low confidence (0.005451104138046503)
Excluding recommendation "
message
Connection error during SSL handshake
These fields just provide minimal information" for parameter "explicit_defaults_for_timestamp" due to low confidence (7.936036854516715e-05)
Excluding recommendation "
frt/f1:
message" for parameter "bind_name" due to low confidence (0.001209887326695025)
Excluding recommendation "
frt/f1:
message" for parameter "frontend_name" due to low confidence (0.00025286656455136836)
Excluding recommendation "
[03/Dec/2012:17:35:10.380" for parameter "accept_date" due to low confidence (0.0002581525477580726)
Excluding recommendation "number of active connections" for parameter "termination_state" due to low confidence (0.00401252182200551)
Excluding recommendation "4 characters" for parameter "explicit_defaults_for_timestamp" due to low confidence (0.00042734024464152753)
Excluding recommendation "captured_request_cookie" and "captured_response_cookie" for parameter "explicit_defaults_for_timestamp" due to low confidence (5.054243592894636e-05)
Excluding recommendation "
locations" for parameter "captured_request_cookie" due to low confidence (0.0015343036502599716)
Excluding recommendation "
locations" for parameter "captured_response_cookie" due to low confidence (0.0010035093873739243)
Creating hints for document 94
Creating hints for document 95
Creating hints for document 96
Creating hints for document 97
Excluding recommendation "it is the funnel that feeds all of the different application pools" for parameter "connect_timeout" due to low confidence (0.03406696766614914)
Adding hint TuningHint(doc_id=97, param=<re.Match object; span=(1185, 1200), match='max_connections'>, value=<re.Match object; span=(0, 1), match='4'>, recommendation='4,294,967,295', passage='Get-NetTCPConnection -LocalPort 443 | Measure-ObjectSo, obviously bigger servers will need more threads, but how many? The old school logic when doing IIS tuning for Connectwise Automate is to have half as many worker processes as you have CPU cores (so a server with 8 cores/vCPUs would have 4 worker threads). The idea behind this is to prevent resource starvation. However, there are settings inside of IIS for controlling CPU usage by the worker threads, and they provide much more granular control over the resource utilization.For most partners starting with the old school method is advisable, but if performance is still lacking (or the threads/connections ratio is still disproportionate) it would be worth gradually adding more worker processes (with the IIS resource controls) until an optimal balance is reached. As with other concepts in resource allocation, it’s worth noting that more is not always better, and there is a point of diminishing returns (the tipping point is normally when worker processes exceed core count). It’s also worth noting that additional worker processes will open additional database connections, so care should be taken to prevent hitting the max_connections threshold.Queue LengthIIS application pools also have a property known as queue length. This is simply the number of pending web requests the server will queue before returning the HTTP 503 status code (service not available). All requests pass through this queue first as they are processed by the webserver (there are also other queues, but they are out of scope for our discussion here). The queue length plays a role in determining the total number of concurrent connections; as any request that a worker process can’t accept immediately remains in the queue.In an ideal world, the webserver always can process incoming requests rapidly, and this queue never contains a large volume of requests. However, as discussed in our blog post here, there are inherent performance issues with the Automate database — and that can result in web requests waiting for the database, and thus the queue filling up. Because of this tendency, the Automate installer sets the queue length to 11,000 each on the “Labtech” and “CwaRestApi” application pools — a full 11x greater than the default.It’s important to note cause and effect bidirectionally as we look at tuning this setting. In most cases, a high queue length is caused by contention in MySQL. This makes IIS unable to process requests, and the queue fills. However, once MySQL recovers, the queued requests begin to flood in and the application response will still be poor until the server catches up. It’s during these times that the Control Center will lock up and be unresponsive.The million-dollar question of course is: when doing IIS tuning for Connectwise Automate, what should the queue length be? In the spirit of the proper use of the queue, we’d suggest setting it to a count that could hold ~60 seconds worth of requests (normally this is ~30% of the agent count). If it takes longer than 60 seconds to process a web request that indicates that there is a real issue, and it would make sense to start returning the 503 status code.As a simple test to gauge this, set Performance Monitor to watch the queue size and recycle the application pool. This is normally lower than the 30% of agents count, but it’s representative of what a short processing delay on the server should look like. If your queue length is comfortably larger than this amount then all is well. For smaller Automate instances where 30% of the agent count would be less than the default of 1000 sticking with the default setting is the best course of action.Connection LimitIIS also has a connection limit for all requests to a website on the server. The default value for this is 4,294,967,295, and it’s a setting that normally doesn’t get much attention, but it did get the spotlight during the 2020.7 Automate patch. This setting is defined on the website level, and it is the funnel that feeds all of the different application pools.So, why does this setting default to the number of IPv4 addresses in existence? This value is set to the upper limit by default to prevent connections from being denied by default (the developers are hedging a bet that the whole internet won’t be accessing an IIS server simultaneously). However, the idea is that this value could be set to make sure that the sum of all connections to the server doesn’t exceed the available resources.If this setting is left to the default, the connection limits at the application pool layer are the controlling factor. The danger here is that it’s possible for the sum of the application pool connections to be greater than the number of connections the server can accommodate. This appears to be the issue with the 2020.7 patch, where the queue length on the application pool was too large, and thus the website connection limit was used to prevent overloading of the server. Obviously, the conditions of the patch were a rather special case, but in general, it is of benefit to partners to configure their servers to be tolerant against connection spikes.When doing IIS tuning for Connectwise Automate this value should be set to the max number of connections the server can process — however, there are a lot of variables in that calculation. As a starting point, it’s advisable to set this to the sum of the application pool queues once they are properly scaled, and work down from there. Please keep in mind that this value will be the cap of agent communications, web interface users, and API calls — and the normal count of those will be different depending on user count, integrations, and how Automate is used in your particular environment.We hope that this has been helpful for you. Here at Automation Theory, we’re certified MySQL DBAs dedicated exclusively to the Connectwise Automate software stack. Be sure to check out our\xa0integrations\xa0and\xa0services.\nPlease leave this field emptyWant to get the latest from our blog delivered to your inbox?Check your inbox or spam folder to confirm your email! Posted on\nAugust 22, 2020August 31, 2020\nTags\nAutomate Performance\nCategories connect_timeout ', float_val=4.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.24411597847938538
Adding hint TuningHint(doc_id=97, param=<re.Match object; span=(1185, 1200), match='max_connections'>, value=<re.Match object; span=(2, 5), match='294'>, recommendation='4,294,967,295', passage='Get-NetTCPConnection -LocalPort 443 | Measure-ObjectSo, obviously bigger servers will need more threads, but how many? The old school logic when doing IIS tuning for Connectwise Automate is to have half as many worker processes as you have CPU cores (so a server with 8 cores/vCPUs would have 4 worker threads). The idea behind this is to prevent resource starvation. However, there are settings inside of IIS for controlling CPU usage by the worker threads, and they provide much more granular control over the resource utilization.For most partners starting with the old school method is advisable, but if performance is still lacking (or the threads/connections ratio is still disproportionate) it would be worth gradually adding more worker processes (with the IIS resource controls) until an optimal balance is reached. As with other concepts in resource allocation, it’s worth noting that more is not always better, and there is a point of diminishing returns (the tipping point is normally when worker processes exceed core count). It’s also worth noting that additional worker processes will open additional database connections, so care should be taken to prevent hitting the max_connections threshold.Queue LengthIIS application pools also have a property known as queue length. This is simply the number of pending web requests the server will queue before returning the HTTP 503 status code (service not available). All requests pass through this queue first as they are processed by the webserver (there are also other queues, but they are out of scope for our discussion here). The queue length plays a role in determining the total number of concurrent connections; as any request that a worker process can’t accept immediately remains in the queue.In an ideal world, the webserver always can process incoming requests rapidly, and this queue never contains a large volume of requests. However, as discussed in our blog post here, there are inherent performance issues with the Automate database — and that can result in web requests waiting for the database, and thus the queue filling up. Because of this tendency, the Automate installer sets the queue length to 11,000 each on the “Labtech” and “CwaRestApi” application pools — a full 11x greater than the default.It’s important to note cause and effect bidirectionally as we look at tuning this setting. In most cases, a high queue length is caused by contention in MySQL. This makes IIS unable to process requests, and the queue fills. However, once MySQL recovers, the queued requests begin to flood in and the application response will still be poor until the server catches up. It’s during these times that the Control Center will lock up and be unresponsive.The million-dollar question of course is: when doing IIS tuning for Connectwise Automate, what should the queue length be? In the spirit of the proper use of the queue, we’d suggest setting it to a count that could hold ~60 seconds worth of requests (normally this is ~30% of the agent count). If it takes longer than 60 seconds to process a web request that indicates that there is a real issue, and it would make sense to start returning the 503 status code.As a simple test to gauge this, set Performance Monitor to watch the queue size and recycle the application pool. This is normally lower than the 30% of agents count, but it’s representative of what a short processing delay on the server should look like. If your queue length is comfortably larger than this amount then all is well. For smaller Automate instances where 30% of the agent count would be less than the default of 1000 sticking with the default setting is the best course of action.Connection LimitIIS also has a connection limit for all requests to a website on the server. The default value for this is 4,294,967,295, and it’s a setting that normally doesn’t get much attention, but it did get the spotlight during the 2020.7 Automate patch. This setting is defined on the website level, and it is the funnel that feeds all of the different application pools.So, why does this setting default to the number of IPv4 addresses in existence? This value is set to the upper limit by default to prevent connections from being denied by default (the developers are hedging a bet that the whole internet won’t be accessing an IIS server simultaneously). However, the idea is that this value could be set to make sure that the sum of all connections to the server doesn’t exceed the available resources.If this setting is left to the default, the connection limits at the application pool layer are the controlling factor. The danger here is that it’s possible for the sum of the application pool connections to be greater than the number of connections the server can accommodate. This appears to be the issue with the 2020.7 patch, where the queue length on the application pool was too large, and thus the website connection limit was used to prevent overloading of the server. Obviously, the conditions of the patch were a rather special case, but in general, it is of benefit to partners to configure their servers to be tolerant against connection spikes.When doing IIS tuning for Connectwise Automate this value should be set to the max number of connections the server can process — however, there are a lot of variables in that calculation. As a starting point, it’s advisable to set this to the sum of the application pool queues once they are properly scaled, and work down from there. Please keep in mind that this value will be the cap of agent communications, web interface users, and API calls — and the normal count of those will be different depending on user count, integrations, and how Automate is used in your particular environment.We hope that this has been helpful for you. Here at Automation Theory, we’re certified MySQL DBAs dedicated exclusively to the Connectwise Automate software stack. Be sure to check out our\xa0integrations\xa0and\xa0services.\nPlease leave this field emptyWant to get the latest from our blog delivered to your inbox?Check your inbox or spam folder to confirm your email! Posted on\nAugust 22, 2020August 31, 2020\nTags\nAutomate Performance\nCategories connect_timeout ', float_val=294.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.24411597847938538
Adding hint TuningHint(doc_id=97, param=<re.Match object; span=(1185, 1200), match='max_connections'>, value=<re.Match object; span=(6, 9), match='967'>, recommendation='4,294,967,295', passage='Get-NetTCPConnection -LocalPort 443 | Measure-ObjectSo, obviously bigger servers will need more threads, but how many? The old school logic when doing IIS tuning for Connectwise Automate is to have half as many worker processes as you have CPU cores (so a server with 8 cores/vCPUs would have 4 worker threads). The idea behind this is to prevent resource starvation. However, there are settings inside of IIS for controlling CPU usage by the worker threads, and they provide much more granular control over the resource utilization.For most partners starting with the old school method is advisable, but if performance is still lacking (or the threads/connections ratio is still disproportionate) it would be worth gradually adding more worker processes (with the IIS resource controls) until an optimal balance is reached. As with other concepts in resource allocation, it’s worth noting that more is not always better, and there is a point of diminishing returns (the tipping point is normally when worker processes exceed core count). It’s also worth noting that additional worker processes will open additional database connections, so care should be taken to prevent hitting the max_connections threshold.Queue LengthIIS application pools also have a property known as queue length. This is simply the number of pending web requests the server will queue before returning the HTTP 503 status code (service not available). All requests pass through this queue first as they are processed by the webserver (there are also other queues, but they are out of scope for our discussion here). The queue length plays a role in determining the total number of concurrent connections; as any request that a worker process can’t accept immediately remains in the queue.In an ideal world, the webserver always can process incoming requests rapidly, and this queue never contains a large volume of requests. However, as discussed in our blog post here, there are inherent performance issues with the Automate database — and that can result in web requests waiting for the database, and thus the queue filling up. Because of this tendency, the Automate installer sets the queue length to 11,000 each on the “Labtech” and “CwaRestApi” application pools — a full 11x greater than the default.It’s important to note cause and effect bidirectionally as we look at tuning this setting. In most cases, a high queue length is caused by contention in MySQL. This makes IIS unable to process requests, and the queue fills. However, once MySQL recovers, the queued requests begin to flood in and the application response will still be poor until the server catches up. It’s during these times that the Control Center will lock up and be unresponsive.The million-dollar question of course is: when doing IIS tuning for Connectwise Automate, what should the queue length be? In the spirit of the proper use of the queue, we’d suggest setting it to a count that could hold ~60 seconds worth of requests (normally this is ~30% of the agent count). If it takes longer than 60 seconds to process a web request that indicates that there is a real issue, and it would make sense to start returning the 503 status code.As a simple test to gauge this, set Performance Monitor to watch the queue size and recycle the application pool. This is normally lower than the 30% of agents count, but it’s representative of what a short processing delay on the server should look like. If your queue length is comfortably larger than this amount then all is well. For smaller Automate instances where 30% of the agent count would be less than the default of 1000 sticking with the default setting is the best course of action.Connection LimitIIS also has a connection limit for all requests to a website on the server. The default value for this is 4,294,967,295, and it’s a setting that normally doesn’t get much attention, but it did get the spotlight during the 2020.7 Automate patch. This setting is defined on the website level, and it is the funnel that feeds all of the different application pools.So, why does this setting default to the number of IPv4 addresses in existence? This value is set to the upper limit by default to prevent connections from being denied by default (the developers are hedging a bet that the whole internet won’t be accessing an IIS server simultaneously). However, the idea is that this value could be set to make sure that the sum of all connections to the server doesn’t exceed the available resources.If this setting is left to the default, the connection limits at the application pool layer are the controlling factor. The danger here is that it’s possible for the sum of the application pool connections to be greater than the number of connections the server can accommodate. This appears to be the issue with the 2020.7 patch, where the queue length on the application pool was too large, and thus the website connection limit was used to prevent overloading of the server. Obviously, the conditions of the patch were a rather special case, but in general, it is of benefit to partners to configure their servers to be tolerant against connection spikes.When doing IIS tuning for Connectwise Automate this value should be set to the max number of connections the server can process — however, there are a lot of variables in that calculation. As a starting point, it’s advisable to set this to the sum of the application pool queues once they are properly scaled, and work down from there. Please keep in mind that this value will be the cap of agent communications, web interface users, and API calls — and the normal count of those will be different depending on user count, integrations, and how Automate is used in your particular environment.We hope that this has been helpful for you. Here at Automation Theory, we’re certified MySQL DBAs dedicated exclusively to the Connectwise Automate software stack. Be sure to check out our\xa0integrations\xa0and\xa0services.\nPlease leave this field emptyWant to get the latest from our blog delivered to your inbox?Check your inbox or spam folder to confirm your email! Posted on\nAugust 22, 2020August 31, 2020\nTags\nAutomate Performance\nCategories connect_timeout ', float_val=967.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.24411597847938538
Adding hint TuningHint(doc_id=97, param=<re.Match object; span=(1185, 1200), match='max_connections'>, value=<re.Match object; span=(10, 13), match='295'>, recommendation='4,294,967,295', passage='Get-NetTCPConnection -LocalPort 443 | Measure-ObjectSo, obviously bigger servers will need more threads, but how many? The old school logic when doing IIS tuning for Connectwise Automate is to have half as many worker processes as you have CPU cores (so a server with 8 cores/vCPUs would have 4 worker threads). The idea behind this is to prevent resource starvation. However, there are settings inside of IIS for controlling CPU usage by the worker threads, and they provide much more granular control over the resource utilization.For most partners starting with the old school method is advisable, but if performance is still lacking (or the threads/connections ratio is still disproportionate) it would be worth gradually adding more worker processes (with the IIS resource controls) until an optimal balance is reached. As with other concepts in resource allocation, it’s worth noting that more is not always better, and there is a point of diminishing returns (the tipping point is normally when worker processes exceed core count). It’s also worth noting that additional worker processes will open additional database connections, so care should be taken to prevent hitting the max_connections threshold.Queue LengthIIS application pools also have a property known as queue length. This is simply the number of pending web requests the server will queue before returning the HTTP 503 status code (service not available). All requests pass through this queue first as they are processed by the webserver (there are also other queues, but they are out of scope for our discussion here). The queue length plays a role in determining the total number of concurrent connections; as any request that a worker process can’t accept immediately remains in the queue.In an ideal world, the webserver always can process incoming requests rapidly, and this queue never contains a large volume of requests. However, as discussed in our blog post here, there are inherent performance issues with the Automate database — and that can result in web requests waiting for the database, and thus the queue filling up. Because of this tendency, the Automate installer sets the queue length to 11,000 each on the “Labtech” and “CwaRestApi” application pools — a full 11x greater than the default.It’s important to note cause and effect bidirectionally as we look at tuning this setting. In most cases, a high queue length is caused by contention in MySQL. This makes IIS unable to process requests, and the queue fills. However, once MySQL recovers, the queued requests begin to flood in and the application response will still be poor until the server catches up. It’s during these times that the Control Center will lock up and be unresponsive.The million-dollar question of course is: when doing IIS tuning for Connectwise Automate, what should the queue length be? In the spirit of the proper use of the queue, we’d suggest setting it to a count that could hold ~60 seconds worth of requests (normally this is ~30% of the agent count). If it takes longer than 60 seconds to process a web request that indicates that there is a real issue, and it would make sense to start returning the 503 status code.As a simple test to gauge this, set Performance Monitor to watch the queue size and recycle the application pool. This is normally lower than the 30% of agents count, but it’s representative of what a short processing delay on the server should look like. If your queue length is comfortably larger than this amount then all is well. For smaller Automate instances where 30% of the agent count would be less than the default of 1000 sticking with the default setting is the best course of action.Connection LimitIIS also has a connection limit for all requests to a website on the server. The default value for this is 4,294,967,295, and it’s a setting that normally doesn’t get much attention, but it did get the spotlight during the 2020.7 Automate patch. This setting is defined on the website level, and it is the funnel that feeds all of the different application pools.So, why does this setting default to the number of IPv4 addresses in existence? This value is set to the upper limit by default to prevent connections from being denied by default (the developers are hedging a bet that the whole internet won’t be accessing an IIS server simultaneously). However, the idea is that this value could be set to make sure that the sum of all connections to the server doesn’t exceed the available resources.If this setting is left to the default, the connection limits at the application pool layer are the controlling factor. The danger here is that it’s possible for the sum of the application pool connections to be greater than the number of connections the server can accommodate. This appears to be the issue with the 2020.7 patch, where the queue length on the application pool was too large, and thus the website connection limit was used to prevent overloading of the server. Obviously, the conditions of the patch were a rather special case, but in general, it is of benefit to partners to configure their servers to be tolerant against connection spikes.When doing IIS tuning for Connectwise Automate this value should be set to the max number of connections the server can process — however, there are a lot of variables in that calculation. As a starting point, it’s advisable to set this to the sum of the application pool queues once they are properly scaled, and work down from there. Please keep in mind that this value will be the cap of agent communications, web interface users, and API calls — and the normal count of those will be different depending on user count, integrations, and how Automate is used in your particular environment.We hope that this has been helpful for you. Here at Automation Theory, we’re certified MySQL DBAs dedicated exclusively to the Connectwise Automate software stack. Be sure to check out our\xa0integrations\xa0and\xa0services.\nPlease leave this field emptyWant to get the latest from our blog delivered to your inbox?Check your inbox or spam folder to confirm your email! Posted on\nAugust 22, 2020August 31, 2020\nTags\nAutomate Performance\nCategories connect_timeout ', float_val=295.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>) with confidence 0.24411597847938538
Creating hints for document 98
Initializing documents from file tuning_docs/mysql100 ...
Sample of tuning hints:
      filenr                  sentence
9605      48  N-able Backup & Recovery
Nr. documents read: 99
Nr. passages by doc: [0, 0, 2, 0, 10, 2, 0, 6, 7, 0, 0, 2, 2, 11, 0, 5, 24, 0, 5, 2, 1, 23, 6, 0, 10, 2, 0, 4, 0, 0, 0, 1, 9, 2, 0, 1, 3, 0, 0, 5, 0, 0, 1, 0, 0, 0, 6, 1, 3, 3, 0, 75, 0, 0, 0, 0, 8, 4, 0, 1, 2, 0, 0, 0, 0, 0, 3, 158, 0, 0, 1, 0, 0, 7, 0, 0, 5, 5, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 5, 0, 228, 0, 0, 0, 1, 0]
Nr. mentions per assignment: [(('query_cache_type', '0'), 3), (('innodb_buffer_pool_instances', '8'), 3), (('innodb_buffer_pool_size', '1GB'), 2), (('innodb_log_file_size', '2G'), 2), (('innodb_buffer_pool_size', '8'), 2), (('innodb_buffer_pool_size', '1'), 2), (('max_delayed_threads', '2'), 2), (('max_input_vars', '1000'), 2), (('memory_limit', '256M'), 2), (('max_input_time', '60'), 2), (('world_x', '5000'), 1), (('innodb_read_io_threads', '4'), 1), (('check_proxy_users', '8'), 1), (('mysql_native_password_proxy_users', '3'), 1), (('innodb_buffer_pool_instances', '32'), 1), (('innodb_buffer_pool_size', '70%'), 1), (('innodb_read_io_threads', '16'), 1), (('innodb_log_file_size', '128M'), 1), (('innodb_buffer_pool_size', '50%'), 1), (('auto_distinct_key', '1'), 1), (('auto_distinct_key', '2'), 1), (('max_accelerated_files', '10000'), 1), (('binlog_cache_size', '10000'), 1), (('interned_strings_buffer', '8'), 1), (('revalidate_freq', '1'), 1), (('memory_consumption', '128'), 1), (('save_comments', '1'), 1), (('shm_size', '64'), 1), (('prefetch_disable', '1'), 1), (('innodb_flush_log_at_trx_commit', '2'), 1), (('zfs_nocacheflush', '1'), 1), (('query_cache_size', '0'), 1), (('innodb_log_file_size', '1GB'), 1), (('innodb_log_file_size', '512M'), 1), (('innodb_buffer_pool_size', '5G'), 1), (('min_spare_servers', '6'), 1), (('max_spare_servers', '18'), 1), (('max_children', '120'), 1), (('start_servers', '12'), 1), (('tidb_enable_index_merge', '10'), 1), (('tidb_enable_index_merge', '000'), 1), (('key_buffer_size', '768MB'), 1), (('innodb_buffer_pool_size', '4'), 1), (('max_heap_table_size', '16M'), 1), (('innodb_buffer_pool_instances', '64'), 1), (('hreads_connected', '98'), 1), (('max_delayed_threads', '1'), 1), (('innodb_buffer_pool_instances', '1'), 1), (('innodb_buffer_pool_size', '3'), 1), (('innodb_buffer_pool_size', '70'), 1), (('innodb_buffer_pool_instances', '4'), 1), (('innodb_buffer_pool_size', '6GB'), 1), (('innodb_buffer_pool_instances', '1GB'), 1), (('hreads_connected', '76'), 1), (('thread_cache_size', '20'), 1), (('innodb_buffer_pool_size', '1GBMySQL'), 1), (('innodb_buffer_pool_size', '80%'), 1), (('hreads_running', '2'), 1), (('innodb_buffer_pool_size', '2'), 1), (('innodb_buffer_pool_size', '8GB'), 1), (('thread_cache_size', '40'), 1), (('innodb_write_io_threads', '8'), 1), (('tmp_table_size', '16M'), 1), (('last_modified', '1'), 1), (('last_modified', '4'), 1), (('sort_buffer_size', '16M'), 1), (('innodb_buffer_pool_size', '2048M'), 1), (('table_open_cache', '400'), 1), (('join_buffer_size', '256M'), 1), (('emp_dept', '3300000'), 1), (('emp_id', '3300000'), 1), (('max_concurrency_scaling_clusters', '10'), 1), (('ext_spectrum', '5'), 1), (('max_concurrency_scaling_clusters', '1'), 1), (('query_prealloc_size', '3690'), 1), (('total_sales', '1'), 1), (('total_sales', '3000'), 1), (('cpu_dma_latency', '0'), 1), (('lower_case_table_names', '1'), 1), (('range_join', '0.5'), 1), (('innodb_flush_log_at_timeout', '2'), 1), (('mechanisminnodb_flush_log_at_trx_commit', '1'), 1), (('innodb_buffer_pool_size', '50GB'), 1), (('innodb_flush_log_at_trx_commit', '1'), 1), (('innodb_data_file_path', '1G'), 1), (('innodb_thread_concurrency', '0'), 1), (('threads_cached', '103'), 1), (('table_definition_cache', '400'), 1), (('max_heap_table_size', '64'), 1), (('innodb_thread_concurrency', '16'), 1), (('threads_connected', '24'), 1), (('innodb_data_file_path', '1'), 1), (('innodb_autoinc_lock_mode', '2'), 1), (('sort_buffer_size', '2'), 1), (('read_rnd_buffer_size', '256K'), 1), (('innodb_buffer_pool_size', '24.00'), 1), (('open_files_limit', '2x'), 1), (('query_cache_limit', '4M'), 1), (('srv_active', '4897'), 1), (('innodb_lock_wait_timeout', '120'), 1), (('max_write_lock_count', '1'), 1), (('max_connections', '800'), 1), (('peak_time', '256'), 1), (('max_used_connections', '120'), 1), (('log_timestamps', '54'), 1), (('listen_addr', '0.0'), 1), (('log_timestamps', '3'), 1), (('innodb_buffer_pool_instances', '6'), 1), (('listen_addr', '4567'), 1), (('sort_buffer_size', '2M'), 1), (('srv_shutdown', '0'), 1), (('open_files_limit', '3x'), 1), (('nnodb_write_io_threads', '8'), 1), (('open_files_limit', '9031'), 1), (('innodb_max_dirty_pages_pct', '80'), 1), (('table_open_cache', '4096'), 1), (('long_query_time', '5.000000'), 1), (('innodb_buffer_pool_size', '24G'), 1), (('key_buffer_size', '512M'), 1), (('read_rnd_buffer_size', '256'), 1), (('innodb_autoextend_increment', '128M'), 1), (('thread_cache_size', '256'), 1), (('wait_timeout', '100s'), 1), (('log_timestamps', '46'), 1), (('threads_cached', '109'), 1), (('max_used_connections', '156'), 1), (('threads_cache', '92'), 1), (('low_priority_updates', '1'), 1), (('threads_connected', '17'), 1), (('innodb_log_buffer_size', '16M'), 1), (('max_allowed_packet', '512M'), 1), (('threads_per_sec', '0'), 1), (('read_rnd_buffer_size', '256M'), 1), (('key_buffer_size', '512'), 1), (('open_files_limit', '8192'), 1), (('wsrep_provider_options', '10G'), 1), (('log_timestamps', '2'), 1), (('tmp_table_size', '1'), 1), (('srv_idle', '371'), 1), (('join_buffer_size', '256K'), 1), (('tmp_table_size', '383'), 1), (('max_allowed_packet', '8M'), 1), (('key_buffer', '48M'), 1), (('net_buffer_length', '1M'), 1), (('query_cache_type', '1'), 1), (('max_allowed_packet', '128'), 1), (('thread_cache_size', '4'), 1), (('table_cache', '128'), 1), (('binlog_rows_query_log_events', '120'), 1), (('skip_external_locking', '1'), 1), (('max_delayed_threads', '0'), 1), (('def_queue_depth', '128'), 1), (('dirty_data_max_max', '10%'), 1), (('write_gap_limit', '4096'), 1), (('nopwrite_enabled', '1'), 1), (('show_compatibility', '539'), 1), (('skip_external_locking', '80'), 1), (('net_write_timeout', '4.4'), 1), (('net_write_timeout', '1000'), 1), (('write_gap_limit', '0'), 1), (('always_keepalive', '1'), 1), (('enable_aim', '1'), 1), (('flow_control_enabled', '1'), 1), (('_row_events', '1'), 1), (('arc_noprefetch', '1'), 1), (('wlans_ath', '0'), 1), (('do_tcpdrain', '1'), 1), (('max_binlog_stmt_cache_size', '2Gbit'), 1), (('def_queue_depth', '32'), 1), (('net_write_timeout', '4random'), 1), (('max_interrupt_rate', '16000'), 1), (('num_queues', '2'), 1), (('num_queues', '0'), 1), (('scrub_max_active', '2'), 1), (('queue_maxlen', '0'), 1), (('alpha_inc', '1'), 1), (('sync_write_max_active', '10'), 1), (('dirty_data_max_percent', '10'), 1), (('mysql_native_password_proxy_users', '2'), 1), (('per_cpu_timers', '0'), 1), (('autoboot_delay', '60'), 1), (('trim_max_active', '64'), 1), (('process_options', '1'), 1), (('eee_disabled', '0'), 1), (('kern_securelevel', '2'), 1), (('show_compatibility', '10000'), 1), (('abc_l_var', '1460'), 1), (('recvbuf_max', '4194304'), 1), (('delay_scale', '500000'), 1), (('isn_reseed_interval', '0'), 1), (('dirty_data_sync_pct', '14.16'), 1), (('max_active', '1000'), 1), (('resilver_delay', '2'), 1), (('async_write_max_active', '10'), 1), (('unprivileged_proc_debug', '0'), 1), (('rss_hash_type', '4'), 1), (('show_compatibility', '56'), 1), (('rx_process_limit', '1'), 1), (('min_auto_ashift', '13'), 1), (('intr_storm_threshold', '9000'), 1), (('scrub_delay', '4'), 1), (('txg_batch', '128'), 1), (('min_auto_ashift', '4K'), 1), (('async_read_max_active', '3'), 1), (('read_gap_limit', '32768'), 1), (('min_auto_ashift', '8k'), 1), (('hyperthreading_allowed', '1'), 1), (('dirty_data_max_max', '4GB'), 1), (('abc_l_var', '44'), 1), (('rtt_scaling', '1'), 1), (('rx_processing_limit', '1'), 1), (('random_id', '1'), 1), (('net_write_timeout', '3'), 1), (('time_wait', '27767'), 1), (('dirty_data_max_max', '4294967296'), 1), (('innodb_ft_cache_size', '1'), 1), (('innodb_api_disable_rowlock', '1'), 1), (('max_threads_per_proc', '9000'), 1), (('enable_msix', '1'), 1), (('max_connections', '100'), 1), (('persist_for', '1'), 1), (('persist_for', '24'), 1), (('derived_table', '24'), 1), (('database_name', '10000'), 1), (('max_client_conn', '100'), 1), (('max_execution_time', '60'), 1), (('max_execution_time', '30'), 1), (('innodb_sort_buffer_size', '67108864'), 1), (('innodb_buffer_pool', '512G'), 1), (('max_binlog_cache_size', '4294967296'), 1), (('lock_wait_timeout', '86400'), 1), (('innodb_buffer_pool', '630G'), 1), (('innodb_buffer_pool', '450G'), 1), (('innodb_max_purge_lag', '1000000'), 1), (('innodb_max_purge_lag_delay', '300000'), 1), (('max_heap_table_size', '103079215104'), 1), (('innodb_buffer_pool_size', '630G'), 1), (('src_sess_rate', '10'), 1), (('net_read_timeout', '3'), 1), (('destination_port', '10.0'), 1), (('client_port', '1.2'), 1), (('client_port', '10.0'), 1), (('srv_sess_rate', '2_full'), 1), (('_sess_rate', '10'), 1), (('hdr_cnt', '0'), 1), (('end_markers_in_json', '1'), 1), (('url_param', '64'), 1), (('transparent_ssl', '3'), 1), (('session_id', '64'), 1), (('local_net', '0.0'), 1), (('dst_port', '8080'), 1), (('_http_req_rate', '10s'), 1), (('explicit_defaults_for_timestamp', '2'), 1), (('_http_req_rate', '10'), 1), (('ssl_f_s_dn', '2'), 1), (('destination_port', '3.31'), 1), (('client_port', '127.0'), 1), (('req_ssl_hello_type', '1'), 1), (('public_ssl', '4'), 1), (('preload_buffer_size', '50'), 1), (('src_http_err_rate', '4xx'), 1), (('http_auth', '1'), 1), (('use_backend', '2_full'), 1), (('http_req_rate', '10s'), 1), (('content_present', '0'), 1), (('base_sub', '32'), 1), (('srv_sess_rate', '1'), 1), (('tmp_table_size', '32'), 1), (('max_error_count', '64'), 1), (('ssl_f_i_dn', '2'), 1), (('net_read_timeout', '0'), 1), (('req_ver', '1.1'), 1), (('http_https_proxy', '80'), 1), (('ssl_c_i_dn', '2'), 1), (('external_bind_app', '1'), 1), (('local_net', '192.168'), 1), (('src_port', '1023'), 1), (('mysql_native_password_proxy_users', '1'), 1), (('log_slow_admin_statements', '5s'), 1), (('backend_queue', '0'), 1), (('ssl_c_s_dn', '2'), 1), (('src_conn_rate', '10'), 1), (('http_date', '3600'), 1), (('src_updt_conn_cnt', '3'), 1), (('hdr_ip', '1'), 1), (('client_port', '56059'), 1), (('local_net', '16'), 1), (('mysql_native_password_proxy_users', '1.3'), 1), (('req_len', '0'), 1), (('resolution_pool_size', '64'), 1), (('check_post', '64'), 1), (('use_backend', '1_full'), 1), (('client_port', '33313'), 1), (('src_port', '0'), 1), (('rep_ssl_hello_type', '2'), 1), (('explicit_defaults_for_timestamp', '30s'), 1), (('destination_port', '8012'), 1), (('client_port', '33317'), 1), (('srv_sess_rate', '1_full'), 1), (('explicit_defaults_for_timestamp', '32'), 1), (('bytes_in_cnt', '64'), 1), (('client_port', '0.1'), 1), (('binlog_stmt_cache_size', '11'), 1), (('max_connections', '295'), 1), (('max_connections', '967'), 1), (('max_connections', '294'), 1), (('max_connections', '4'), 1)]
Nr. documents per parameter: [('innodb_buffer_pool_size', 8), ('innodb_buffer_pool_instances', 4), ('query_cache_type', 4), ('mysql_native_password_proxy_users', 3), ('innodb_log_file_size', 3), ('max_heap_table_size', 3), ('tmp_table_size', 3), ('thread_cache_size', 3), ('max_connections', 3), ('innodb_flush_log_at_trx_commit', 2), ('key_buffer_size', 2), ('max_delayed_threads', 2), ('sort_buffer_size', 2), ('join_buffer_size', 2), ('table_open_cache', 2), ('max_input_vars', 2), ('max_input_time', 2), ('memory_limit', 2), ('max_allowed_packet', 2), ('world_x', 1), ('check_proxy_users', 1), ('innodb_read_io_threads', 1), ('auto_distinct_key', 1), ('save_comments', 1), ('interned_strings_buffer', 1), ('binlog_cache_size', 1), ('max_accelerated_files', 1), ('memory_consumption', 1), ('revalidate_freq', 1), ('shm_size', 1), ('zfs_nocacheflush', 1), ('prefetch_disable', 1), ('query_cache_size', 1), ('min_spare_servers', 1), ('start_servers', 1), ('max_children', 1), ('max_spare_servers', 1), ('tidb_enable_index_merge', 1), ('innodb_write_io_threads', 1), ('hreads_connected', 1), ('hreads_running', 1), ('last_modified', 1), ('emp_id', 1), ('emp_dept', 1), ('max_concurrency_scaling_clusters', 1), ('ext_spectrum', 1), ('total_sales', 1), ('query_prealloc_size', 1), ('cpu_dma_latency', 1), ('lower_case_table_names', 1), ('range_join', 1), ('innodb_flush_log_at_timeout', 1), ('mechanisminnodb_flush_log_at_trx_commit', 1), ('threads_connected', 1), ('innodb_lock_wait_timeout', 1), ('innodb_max_dirty_pages_pct', 1), ('innodb_autoinc_lock_mode', 1), ('max_write_lock_count', 1), ('peak_time', 1), ('open_files_limit', 1), ('srv_idle', 1), ('query_cache_limit', 1), ('low_priority_updates', 1), ('threads_cache', 1), ('innodb_log_buffer_size', 1), ('log_timestamps', 1), ('table_definition_cache', 1), ('srv_active', 1), ('innodb_autoextend_increment', 1), ('innodb_data_file_path', 1), ('wsrep_provider_options', 1), ('srv_shutdown', 1), ('threads_per_sec', 1), ('innodb_thread_concurrency', 1), ('listen_addr', 1), ('read_rnd_buffer_size', 1), ('threads_cached', 1), ('max_used_connections', 1), ('wait_timeout', 1), ('long_query_time', 1), ('nnodb_write_io_threads', 1), ('table_cache', 1), ('net_buffer_length', 1), ('key_buffer', 1), ('binlog_rows_query_log_events', 1), ('show_compatibility', 1), ('min_auto_ashift', 1), ('do_tcpdrain', 1), ('max_binlog_stmt_cache_size', 1), ('max_threads_per_proc', 1), ('net_write_timeout', 1), ('rx_process_limit', 1), ('dirty_data_sync_pct', 1), ('trim_max_active', 1), ('dirty_data_max_percent', 1), ('async_write_max_active', 1), ('flow_control_enabled', 1), ('unprivileged_proc_debug', 1), ('txg_batch', 1), ('resilver_delay', 1), ('kern_securelevel', 1), ('time_wait', 1), ('per_cpu_timers', 1), ('async_read_max_active', 1), ('random_id', 1), ('arc_noprefetch', 1), ('process_options', 1), ('isn_reseed_interval', 1), ('max_active', 1), ('always_keepalive', 1), ('max_interrupt_rate', 1), ('scrub_delay', 1), ('alpha_inc', 1), ('sync_write_max_active', 1), ('write_gap_limit', 1), ('rss_hash_type', 1), ('num_queues', 1), ('rtt_scaling', 1), ('nopwrite_enabled', 1), ('def_queue_depth', 1), ('innodb_ft_cache_size', 1), ('innodb_api_disable_rowlock', 1), ('eee_disabled', 1), ('wlans_ath', 1), ('delay_scale', 1), ('queue_maxlen', 1), ('dirty_data_max_max', 1), ('autoboot_delay', 1), ('recvbuf_max', 1), ('_row_events', 1), ('skip_external_locking', 1), ('hyperthreading_allowed', 1), ('enable_msix', 1), ('abc_l_var', 1), ('rx_processing_limit', 1), ('enable_aim', 1), ('scrub_max_active', 1), ('intr_storm_threshold', 1), ('read_gap_limit', 1), ('derived_table', 1), ('persist_for', 1), ('database_name', 1), ('max_client_conn', 1), ('max_execution_time', 1), ('lock_wait_timeout', 1), ('innodb_max_purge_lag', 1), ('innodb_sort_buffer_size', 1), ('innodb_max_purge_lag_delay', 1), ('innodb_buffer_pool', 1), ('max_binlog_cache_size', 1), ('log_slow_admin_statements', 1), ('hdr_ip', 1), ('_sess_rate', 1), ('explicit_defaults_for_timestamp', 1), ('use_backend', 1), ('preload_buffer_size', 1), ('net_read_timeout', 1), ('local_net', 1), ('src_port', 1), ('req_len', 1), ('binlog_stmt_cache_size', 1), ('end_markers_in_json', 1), ('base_sub', 1), ('http_req_rate', 1), ('destination_port', 1), ('_http_req_rate', 1), ('src_sess_rate', 1), ('check_post', 1), ('url_param', 1), ('ssl_f_s_dn', 1), ('backend_queue', 1), ('rep_ssl_hello_type', 1), ('external_bind_app', 1), ('ssl_c_i_dn', 1), ('srv_sess_rate', 1), ('max_error_count', 1), ('req_ssl_hello_type', 1), ('http_date', 1), ('src_updt_conn_cnt', 1), ('resolution_pool_size', 1), ('bytes_in_cnt', 1), ('transparent_ssl', 1), ('hdr_cnt', 1), ('req_ver', 1), ('client_port', 1), ('session_id', 1), ('content_present', 1), ('ssl_c_s_dn', 1), ('ssl_f_i_dn', 1), ('src_http_err_rate', 1), ('http_https_proxy', 1), ('http_auth', 1), ('src_conn_rate', 1), ('dst_port', 1), ('public_ssl', 1)]
Pre-processing of input text is finished.
All hints considered for multi-doc tuning:
Hint 0: innodb_buffer_pool_size -> 50%
Hint 1: innodb_buffer_pool_size -> 70%
Hint 2: innodb_buffer_pool_size -> 1GB
Hint 3: innodb_buffer_pool_size -> 8
Hint 4: innodb_buffer_pool_size -> 5G
Hint 5: innodb_buffer_pool_size -> 1
Hint 6: innodb_buffer_pool_size -> 2
Hint 7: innodb_buffer_pool_size -> 3
Hint 8: innodb_buffer_pool_size -> 4
Hint 9: innodb_buffer_pool_size -> 8
Hint 10: innodb_buffer_pool_instances -> 8
Hint 11: innodb_buffer_pool_instances -> 8
Hint 12: innodb_buffer_pool_instances -> 32
Hint 13: innodb_buffer_pool_instances -> 8
Hint 14: innodb_buffer_pool_instances -> 8
Hint 15: innodb_buffer_pool_instances -> 8
Hint 16: innodb_buffer_pool_instances -> 8
Hint 17: innodb_buffer_pool_instances -> 1
Hint 18: innodb_buffer_pool_instances -> 64
Hint 19: innodb_buffer_pool_instances -> 4
Hint 20: query_cache_type -> 0
Hint 21: query_cache_type -> 0
Hint 22: query_cache_type -> 0
Hint 23: query_cache_type -> 0
Hint 24: query_cache_type -> 1
Hint 25: mysql_native_password_proxy_users -> 3
Hint 26: mysql_native_password_proxy_users -> 2
Hint 27: mysql_native_password_proxy_users -> 1
Hint 28: mysql_native_password_proxy_users -> 1.3
Hint 29: innodb_log_file_size -> 128M
Hint 30: innodb_log_file_size -> 2G
Hint 31: innodb_log_file_size -> 1GB
Hint 32: innodb_log_file_size -> 512M
Hint 33: innodb_log_file_size -> 2G
Hint 34: max_heap_table_size -> 16M
Hint 35: max_heap_table_size -> 64
Hint 36: max_heap_table_size -> 64
Hint 37: max_heap_table_size -> 103079215104
Hint 38: tmp_table_size -> 16M
Hint 39: tmp_table_size -> 1
Hint 40: tmp_table_size -> 383
Hint 41: tmp_table_size -> 32
Hint 42: thread_cache_size -> 20
Hint 43: thread_cache_size -> 40
Hint 44: thread_cache_size -> 256
Hint 45: thread_cache_size -> 256
Hint 46: thread_cache_size -> 4
Hint 47: max_connections -> 800
Hint 48: max_connections -> 800
Hint 49: max_connections -> 800
Hint 50: max_connections -> 100
Hint 51: max_connections -> 4
Hint 52: max_connections -> 294
Hint 53: max_connections -> 967
Hint 54: max_connections -> 295
Hint 55: innodb_flush_log_at_trx_commit -> 2
Hint 56: innodb_flush_log_at_trx_commit -> 1
Hint 57: key_buffer_size -> 768MB
Hint 58: key_buffer_size -> 512M
Hint 59: key_buffer_size -> 512
Hint 60: max_delayed_threads -> 2
Hint 61: max_delayed_threads -> 1
Hint 62: max_delayed_threads -> 2
Hint 63: max_delayed_threads -> 0
Hint 64: sort_buffer_size -> 16M
Hint 65: sort_buffer_size -> 2M
Hint 66: sort_buffer_size -> 2
Hint 67: sort_buffer_size -> 2
Hint 68: join_buffer_size -> 256M
Hint 69: join_buffer_size -> 256K
Hint 70: table_open_cache -> 400
Hint 71: table_open_cache -> 4096
Hint 72: max_input_vars -> 1000
Hint 73: max_input_vars -> 1000
Hint 74: max_input_time -> 60
Hint 75: max_input_time -> 60
Hint 76: memory_limit -> 256M
Hint 77: memory_limit -> 256M
Hint 78: max_allowed_packet -> 512M
Hint 79: max_allowed_packet -> 8M
Hint 80: max_allowed_packet -> 128
Hint 81: world_x -> 5000
Hint 82: check_proxy_users -> 8
Hint 83: innodb_read_io_threads -> 4
Hint 84: innodb_read_io_threads -> 16
Hint 85: auto_distinct_key -> 1
Hint 86: auto_distinct_key -> 2
Hint 87: auto_distinct_key -> 1
Hint 88: save_comments -> 1
Hint 89: interned_strings_buffer -> 8
Hint 90: binlog_cache_size -> 10000
Hint 91: max_accelerated_files -> 10000
Hint 92: memory_consumption -> 128
Hint 93: revalidate_freq -> 1
Hint 94: shm_size -> 64
Hint 95: zfs_nocacheflush -> 1
Hint 96: prefetch_disable -> 1
Hint 97: query_cache_size -> 0
Hint 98: query_cache_size -> 0
Hint 99: min_spare_servers -> 6
Hint 100: start_servers -> 12
Hint 101: max_children -> 120
Hint 102: max_spare_servers -> 18
Hint 103: tidb_enable_index_merge -> 10
Hint 104: tidb_enable_index_merge -> 000
Hint 105: innodb_write_io_threads -> 8
Hint 106: hreads_connected -> 76
Hint 107: hreads_connected -> 98
Hint 108: hreads_running -> 2
Hint 109: last_modified -> 1
Hint 110: last_modified -> 4
Hint 111: emp_id -> 3300000
Hint 112: emp_id -> 3300000
Hint 113: emp_id -> 3300000
Hint 114: emp_dept -> 3300000
Hint 115: max_concurrency_scaling_clusters -> 1
Hint 116: max_concurrency_scaling_clusters -> 10
Hint 117: ext_spectrum -> 5
Hint 118: total_sales -> 1
Hint 119: total_sales -> 1
Hint 120: total_sales -> 3000
Hint 121: query_prealloc_size -> 3690
Hint 122: cpu_dma_latency -> 0
Hint 123: lower_case_table_names -> 1
Hint 124: range_join -> 0.5
Hint 125: innodb_flush_log_at_timeout -> 2
Hint 126: mechanisminnodb_flush_log_at_trx_commit -> 1
Hint 127: threads_connected -> 17
Hint 128: threads_connected -> 24
Hint 129: innodb_lock_wait_timeout -> 120
Hint 130: innodb_max_dirty_pages_pct -> 80
Hint 131: innodb_autoinc_lock_mode -> 2
Hint 132: max_write_lock_count -> 1
Hint 133: peak_time -> 256
Hint 134: open_files_limit -> 8192
Hint 135: open_files_limit -> 9031
Hint 136: open_files_limit -> 2x
Hint 137: open_files_limit -> 3x
Hint 138: open_files_limit -> 2x
Hint 139: open_files_limit -> 3x
Hint 140: srv_idle -> 371
Hint 141: query_cache_limit -> 4M
Hint 142: low_priority_updates -> 1
Hint 143: threads_cache -> 92
Hint 144: innodb_log_buffer_size -> 16M
Hint 145: log_timestamps -> 2
Hint 146: log_timestamps -> 3
Hint 147: log_timestamps -> 54
Hint 148: log_timestamps -> 46
Hint 149: table_definition_cache -> 400
Hint 150: table_definition_cache -> 400
Hint 151: srv_active -> 4897
Hint 152: innodb_autoextend_increment -> 128M
Hint 153: innodb_data_file_path -> 1
Hint 154: innodb_data_file_path -> 1G
Hint 155: wsrep_provider_options -> 10G
Hint 156: srv_shutdown -> 0
Hint 157: threads_per_sec -> 0
Hint 158: threads_per_sec -> 0
Hint 159: innodb_thread_concurrency -> 16
Hint 160: innodb_thread_concurrency -> 0
Hint 161: innodb_thread_concurrency -> 0
Hint 162: listen_addr -> 0.0
Hint 163: listen_addr -> 0.0
Hint 164: listen_addr -> 4567
Hint 165: read_rnd_buffer_size -> 256M
Hint 166: read_rnd_buffer_size -> 256
Hint 167: read_rnd_buffer_size -> 256K
Hint 168: read_rnd_buffer_size -> 256K
Hint 169: threads_cached -> 103
Hint 170: threads_cached -> 109
Hint 171: max_used_connections -> 120
Hint 172: max_used_connections -> 156
Hint 173: wait_timeout -> 100s
Hint 174: long_query_time -> 5.000000
Hint 175: nnodb_write_io_threads -> 8
Hint 176: table_cache -> 128
Hint 177: net_buffer_length -> 1M
Hint 178: key_buffer -> 48M
Hint 179: binlog_rows_query_log_events -> 120
Hint 180: show_compatibility -> 56
Hint 181: show_compatibility -> 10000
Hint 182: show_compatibility -> 539
Hint 183: show_compatibility -> 56
Hint 184: min_auto_ashift -> 4K
Hint 185: min_auto_ashift -> 13
Hint 186: min_auto_ashift -> 8k
Hint 187: do_tcpdrain -> 1
Hint 188: max_binlog_stmt_cache_size -> 2Gbit
Hint 189: max_threads_per_proc -> 9000
Hint 190: net_write_timeout -> 1000
Hint 191: net_write_timeout -> 4.4
Hint 192: net_write_timeout -> 4random
Hint 193: net_write_timeout -> 3
Hint 194: rx_process_limit -> 1
Hint 195: dirty_data_sync_pct -> 14.16
Hint 196: trim_max_active -> 64
Hint 197: dirty_data_max_percent -> 10
Hint 198: async_write_max_active -> 10
Hint 199: flow_control_enabled -> 1
Hint 200: unprivileged_proc_debug -> 0
Hint 201: txg_batch -> 128
Hint 202: resilver_delay -> 2
Hint 203: kern_securelevel -> 2
Hint 204: time_wait -> 27767
Hint 205: per_cpu_timers -> 0
Hint 206: async_read_max_active -> 3
Hint 207: random_id -> 1
Hint 208: arc_noprefetch -> 1
Hint 209: process_options -> 1
Hint 210: isn_reseed_interval -> 0
Hint 211: max_active -> 1000
Hint 212: always_keepalive -> 1
Hint 213: max_interrupt_rate -> 16000
Hint 214: scrub_delay -> 4
Hint 215: alpha_inc -> 1
Hint 216: sync_write_max_active -> 10
Hint 217: write_gap_limit -> 0
Hint 218: write_gap_limit -> 4096
Hint 219: rss_hash_type -> 4
Hint 220: rss_hash_type -> 4
Hint 221: num_queues -> 0
Hint 222: num_queues -> 2
Hint 223: rtt_scaling -> 1
Hint 224: nopwrite_enabled -> 1
Hint 225: def_queue_depth -> 128
Hint 226: def_queue_depth -> 32
Hint 227: def_queue_depth -> 32
Hint 228: innodb_ft_cache_size -> 1
Hint 229: innodb_api_disable_rowlock -> 1
Hint 230: eee_disabled -> 0
Hint 231: wlans_ath -> 0
Hint 232: delay_scale -> 500000
Hint 233: queue_maxlen -> 0
Hint 234: dirty_data_max_max -> 4294967296
Hint 235: dirty_data_max_max -> 4GB
Hint 236: dirty_data_max_max -> 10%
Hint 237: dirty_data_max_max -> 4GB
Hint 238: autoboot_delay -> 60
Hint 239: recvbuf_max -> 4194304
Hint 240: _row_events -> 1
Hint 241: skip_external_locking -> 1
Hint 242: skip_external_locking -> 80
Hint 243: hyperthreading_allowed -> 1
Hint 244: enable_msix -> 1
Hint 245: enable_msix -> 1
Hint 246: abc_l_var -> 44
Hint 247: abc_l_var -> 1460
Hint 248: abc_l_var -> 44
Hint 249: rx_processing_limit -> 1
Hint 250: enable_aim -> 1
Hint 251: scrub_max_active -> 2
Hint 252: intr_storm_threshold -> 9000
Hint 253: read_gap_limit -> 32768
Hint 254: derived_table -> 24
Hint 255: persist_for -> 24
Hint 256: persist_for -> 1
Hint 257: database_name -> 10000
Hint 258: max_client_conn -> 100
Hint 259: max_execution_time -> 30
Hint 260: max_execution_time -> 60
Hint 261: lock_wait_timeout -> 86400
Hint 262: innodb_max_purge_lag -> 1000000
Hint 263: innodb_sort_buffer_size -> 67108864
Hint 264: innodb_max_purge_lag_delay -> 300000
Hint 265: innodb_buffer_pool -> 450G
Hint 266: innodb_buffer_pool -> 512G
Hint 267: innodb_buffer_pool -> 630G
Hint 268: max_binlog_cache_size -> 4294967296
Hint 269: log_slow_admin_statements -> 5s
Hint 270: log_slow_admin_statements -> 5s
Hint 271: log_slow_admin_statements -> 5s
Hint 272: hdr_ip -> 1
Hint 273: _sess_rate -> 10
Hint 274: explicit_defaults_for_timestamp -> 30s
Hint 275: explicit_defaults_for_timestamp -> 2
Hint 276: explicit_defaults_for_timestamp -> 32
Hint 277: use_backend -> 1_full
Hint 278: use_backend -> 2_full
Hint 279: preload_buffer_size -> 50
Hint 280: net_read_timeout -> 0
Hint 281: net_read_timeout -> 0
Hint 282: net_read_timeout -> 0
Hint 283: net_read_timeout -> 0
Hint 284: net_read_timeout -> 3
Hint 285: local_net -> 192.168
Hint 286: local_net -> 0.0
Hint 287: local_net -> 16
Hint 288: src_port -> 0
Hint 289: src_port -> 1023
Hint 290: req_len -> 0
Hint 291: binlog_stmt_cache_size -> 11
Hint 292: end_markers_in_json -> 1
Hint 293: base_sub -> 32
Hint 294: http_req_rate -> 10s
Hint 295: destination_port -> 10.0
Hint 296: destination_port -> 3.31
Hint 297: destination_port -> 8012
Hint 298: _http_req_rate -> 10s
Hint 299: _http_req_rate -> 10
Hint 300: src_sess_rate -> 10
Hint 301: check_post -> 64
Hint 302: url_param -> 64
Hint 303: ssl_f_s_dn -> 2
Hint 304: backend_queue -> 0
Hint 305: backend_queue -> 0
Hint 306: rep_ssl_hello_type -> 2
Hint 307: external_bind_app -> 1
Hint 308: ssl_c_i_dn -> 2
Hint 309: srv_sess_rate -> 1
Hint 310: srv_sess_rate -> 1
Hint 311: srv_sess_rate -> 1_full
Hint 312: srv_sess_rate -> 2_full
Hint 313: max_error_count -> 64
Hint 314: req_ssl_hello_type -> 1
Hint 315: req_ssl_hello_type -> 1
Hint 316: http_date -> 3600
Hint 317: src_updt_conn_cnt -> 3
Hint 318: resolution_pool_size -> 64
Hint 319: bytes_in_cnt -> 64
Hint 320: transparent_ssl -> 3
Hint 321: hdr_cnt -> 0
Hint 322: req_ver -> 1.1
Hint 323: client_port -> 10.0
Hint 324: client_port -> 1.2
Hint 325: client_port -> 33313
Hint 326: client_port -> 10.0
Hint 327: client_port -> 1.2
Hint 328: client_port -> 33317
Hint 329: client_port -> 127.0
Hint 330: client_port -> 0.1
Hint 331: client_port -> 56059
Hint 332: session_id -> 64
Hint 333: content_present -> 0
Hint 334: ssl_c_s_dn -> 2
Hint 335: ssl_f_i_dn -> 2
Hint 336: src_http_err_rate -> 4xx
Hint 337: http_https_proxy -> 80
Hint 338: http_auth -> 1
Hint 339: src_conn_rate -> 10
Hint 340: dst_port -> 8080
Hint 341: public_ssl -> 4
Hint 342: innodb_buffer_pool_size -> 6GB
Hint 343: innodb_buffer_pool_size -> 4
Hint 344: innodb_buffer_pool_size -> 1GB
Hint 345: innodb_buffer_pool_size -> 70
Hint 346: innodb_buffer_pool_size -> 80%
Hint 347: innodb_buffer_pool_size -> 1GBMySQL
Hint 348: innodb_buffer_pool_size -> 8GB
Hint 349: innodb_buffer_pool_size -> 2048M
Hint 350: innodb_buffer_pool_size -> 50GB
Hint 351: innodb_buffer_pool_size -> 24G
Hint 352: innodb_buffer_pool_instances -> 1GB
Hint 353: innodb_buffer_pool_instances -> 8
Hint 354: innodb_buffer_pool_instances -> 6
Hint 355: innodb_buffer_pool_size -> 24.00
Hint 356: innodb_buffer_pool_size -> 24.00
Hint 357: innodb_buffer_pool_size -> 1
Hint 358: innodb_buffer_pool_size -> 630G
--- Tuning Updates ---
Minimal time (ms): inf
Achieved with configuration: {}
Maximal time (ms): 0
Achieved with configuration: {}
No warmup - hint counter: 0
{'sequence': '50% – 70% of your total RAM', 'labels': ['Use recommendation', 'Increase recommendation', 'Increase recommendation strongly', 'Decrease recommendation', 'Decrease recommendation strongly'], 'scores': [0.39574071764945984, 0.23159174621105194, 0.17225755751132965, 0.12725797295570374, 0.07315202802419662]}
Decision: Deciding adaption of TuningHint(doc_id=4, param=<re.Match object; span=(0, 23), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 3), match='50%'>, recommendation='50% – 70% of your total RAM', passage='innodb_buffer_pool_size\nGenerally, set to 50% – 70% of your total RAM as a starting point.\nIt does not need to be set any larger than the total database size.\nPercona Monitoring and Management (PMM) can offer additional insight, showing your buffer pool usage and allowing you to tune accordingly. innodb_buffer_pool_size ', float_val=0.5, val_unit='', hint_type=<HintType.RAM_RATIO: 1>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.07315202802419662, 0.12725797295570374, 0.39574071764945984, 0.23159174621105194, 0.17225755751132965]
Using cpu device
Wrapping the env with a `Monitor` wrapper
Wrapping the env in a DummyVecEnv.
Running for up to 60.0 seconds, 1000000 frames
--- Tuning Updates ---
Minimal time (ms): inf
Achieved with configuration: {}
Maximal time (ms): 0
Achieved with configuration: {}
Decision: Deciding adaption of TuningHint(doc_id=4, param=<re.Match object; span=(0, 23), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 3), match='50%'>, recommendation='50% – 70% of your total RAM', passage='innodb_buffer_pool_size\nGenerally, set to 50% – 70% of your total RAM as a starting point.\nIt does not need to be set any larger than the total database size.\nPercona Monitoring and Management (PMM) can offer additional insight, showing your buffer pool usage and allowing you to tune accordingly. innodb_buffer_pool_size ', float_val=0.5, val_unit='', hint_type=<HintType.RAM_RATIO: 1>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.07315202802419662, 0.12725797295570374, 0.39574071764945984, 0.23159174621105194, 0.17225755751132965]
Choice: 2
type: 1, value: 0.5, unit: 
Done flag: False
No warmup - hint counter: 0
{'sequence': '50% – 70% of your total RAM', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.5314092040061951, 0.1867820918560028, 0.14756043255329132, 0.12012757360935211, 0.014120634645223618]}
Decision: Deciding weight of TuningHint(doc_id=4, param=<re.Match object; span=(0, 23), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 3), match='50%'>, recommendation='50% – 70% of your total RAM', passage='innodb_buffer_pool_size\nGenerally, set to 50% – 70% of your total RAM as a starting point.\nIt does not need to be set any larger than the total database size.\nPercona Monitoring and Management (PMM) can offer additional insight, showing your buffer pool usage and allowing you to tune accordingly. innodb_buffer_pool_size ', float_val=0.5, val_unit='', hint_type=<HintType.RAM_RATIO: 1>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.014120634645223618, 0.5314092040061951, 0.1867820918560028, 0.14756043255329132, 0.12012757360935211]
Choice: 1
Trying assigning innodb_buffer_pool_size to 4000000
Adding assignment ('innodb_buffer_pool_size', '4000000') with weight 2
Assignment ('innodb_buffer_pool_size', '4000000') extracted from "innodb_buffer_pool_size
Generally, set to 50% – 70% of your total RAM as a starting point.
It does not need to be set any larger than the total database size.
Percona Monitoring and Management (PMM) can offer additional insight, showing your buffer pool usage and allowing you to tune accordingly. innodb_buffer_pool_size "
Hint counter: 1
Episode hint counter before: 0
Episode hint counter: 1
Hints per episode: 5
Done flag: False
No warmup - hint counter: 1
{'sequence': '50% – 70% of your total RAM', 'labels': ['Use recommendation', 'Increase recommendation', 'Increase recommendation strongly', 'Decrease recommendation', 'Decrease recommendation strongly'], 'scores': [0.39574071764945984, 0.23159174621105194, 0.17225755751132965, 0.12725797295570374, 0.07315202802419662]}
Decision: Deciding adaption of TuningHint(doc_id=4, param=<re.Match object; span=(0, 23), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(6, 9), match='70%'>, recommendation='50% – 70% of your total RAM', passage='innodb_buffer_pool_size\nGenerally, set to 50% – 70% of your total RAM as a starting point.\nIt does not need to be set any larger than the total database size.\nPercona Monitoring and Management (PMM) can offer additional insight, showing your buffer pool usage and allowing you to tune accordingly. innodb_buffer_pool_size ', float_val=0.7, val_unit='', hint_type=<HintType.RAM_RATIO: 1>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.07315202802419662, 0.12725797295570374, 0.39574071764945984, 0.23159174621105194, 0.17225755751132965]
Choice: 4
type: 1, value: 0.7, unit: 
Done flag: False
No warmup - hint counter: 1
{'sequence': '50% – 70% of your total RAM', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.5314092040061951, 0.1867820918560028, 0.14756043255329132, 0.12012757360935211, 0.014120634645223618]}
Decision: Deciding weight of TuningHint(doc_id=4, param=<re.Match object; span=(0, 23), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(6, 9), match='70%'>, recommendation='50% – 70% of your total RAM', passage='innodb_buffer_pool_size\nGenerally, set to 50% – 70% of your total RAM as a starting point.\nIt does not need to be set any larger than the total database size.\nPercona Monitoring and Management (PMM) can offer additional insight, showing your buffer pool usage and allowing you to tune accordingly. innodb_buffer_pool_size ', float_val=0.7, val_unit='', hint_type=<HintType.RAM_RATIO: 1>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.014120634645223618, 0.5314092040061951, 0.1867820918560028, 0.14756043255329132, 0.12012757360935211]
Choice: 4
Trying assigning innodb_buffer_pool_size to 22400000
Adding assignment ('innodb_buffer_pool_size', '22400000') with weight 16
Assignment ('innodb_buffer_pool_size', '22400000') extracted from "innodb_buffer_pool_size
Generally, set to 50% – 70% of your total RAM as a starting point.
It does not need to be set any larger than the total database size.
Percona Monitoring and Management (PMM) can offer additional insight, showing your buffer pool usage and allowing you to tune accordingly. innodb_buffer_pool_size "
Hint counter: 2
Episode hint counter before: 1
Episode hint counter: 2
Hints per episode: 5
Done flag: False
No warmup - hint counter: 2
{'sequence': '1GB or more', 'labels': ['Use recommendation', 'Increase recommendation strongly', 'Increase recommendation', 'Decrease recommendation strongly', 'Decrease recommendation'], 'scores': [0.29170164465904236, 0.2564612030982971, 0.19368036091327667, 0.13815999031066895, 0.11999675631523132]}
Decision: Deciding adaption of TuningHint(doc_id=4, param=<re.Match object; span=(241, 264), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 3), match='1GB'>, recommendation='1GB or more', passage="Hi Jie Zhou. The MySQL default is to set innodb_buffer_pool_instances to 8 (in MySQL version 5.7 and up) as this is a good starting point for most general use cases. As per the MySQL documentation, this option takes effect only when you set innodb_buffer_pool_size to a size of 1GB or more. The total size you specify is divided among all the buffer pools. For best efficiency, specify a combination of innodb_buffer_pool_instances and innodb_buffer_pool_size so that each buffer pool instance is at least 1GB.\nJuly 8, 2020 at 1:11 pm\nLeave a Reply\t\t\t\t\tCancel reply\nHow Can We Help?\nPercona's experts can maximize your application performance with our open source database support, managed services or consulting.\nContact us innodb_buffer_pool_size ", float_val=1.0, val_unit='GB', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.13815999031066895, 0.11999675631523132, 0.29170164465904236, 0.19368036091327667, 0.2564612030982971]
Choice: 2
type: 3, value: 1.0, unit: GB
Done flag: False
No warmup - hint counter: 2
{'sequence': '1GB or more', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.47241002321243286, 0.2022891342639923, 0.15908806025981903, 0.14357300102710724, 0.022639784961938858]}
Decision: Deciding weight of TuningHint(doc_id=4, param=<re.Match object; span=(241, 264), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 3), match='1GB'>, recommendation='1GB or more', passage="Hi Jie Zhou. The MySQL default is to set innodb_buffer_pool_instances to 8 (in MySQL version 5.7 and up) as this is a good starting point for most general use cases. As per the MySQL documentation, this option takes effect only when you set innodb_buffer_pool_size to a size of 1GB or more. The total size you specify is divided among all the buffer pools. For best efficiency, specify a combination of innodb_buffer_pool_instances and innodb_buffer_pool_size so that each buffer pool instance is at least 1GB.\nJuly 8, 2020 at 1:11 pm\nLeave a Reply\t\t\t\t\tCancel reply\nHow Can We Help?\nPercona's experts can maximize your application performance with our open source database support, managed services or consulting.\nContact us innodb_buffer_pool_size ", float_val=1.0, val_unit='GB', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.022639784961938858, 0.47241002321243286, 0.2022891342639923, 0.15908806025981903, 0.14357300102710724]
Choice: 0
Trying assigning innodb_buffer_pool_size to 1GB
Adding assignment ('innodb_buffer_pool_size', '1GB') with weight 1
Assignment ('innodb_buffer_pool_size', '1GB') extracted from "Hi Jie Zhou. The MySQL default is to set innodb_buffer_pool_instances to 8 (in MySQL version 5.7 and up) as this is a good starting point for most general use cases. As per the MySQL documentation, this option takes effect only when you set innodb_buffer_pool_size to a size of 1GB or more. The total size you specify is divided among all the buffer pools. For best efficiency, specify a combination of innodb_buffer_pool_instances and innodb_buffer_pool_size so that each buffer pool instance is at least 1GB.
July 8, 2020 at 1:11 pm
Leave a Reply					Cancel reply
How Can We Help?
Percona's experts can maximize your application performance with our open source database support, managed services or consulting.
Contact us innodb_buffer_pool_size "
Hint counter: 3
Episode hint counter before: 2
Episode hint counter: 3
Hints per episode: 5
Done flag: False
No warmup - hint counter: 3
{'sequence': '8', 'labels': ['Use recommendation', 'Increase recommendation strongly', 'Decrease recommendation strongly', 'Increase recommendation', 'Decrease recommendation'], 'scores': [0.26618632674217224, 0.21739822626113892, 0.18449042737483978, 0.1797831505537033, 0.15214183926582336]}
Decision: Deciding adaption of TuningHint(doc_id=15, param=<re.Match object; span=(84, 107), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 1), match='8'>, recommendation='8', passage='query_cache_size = 0\nquery_cache_type = 0\ninnodb_buffer_pool_instances = 8 (or 1 if innodb_buffer_pool_size < 1GB)\ninnodb_file_per_table=ON\ninnodb_stats_on_metadata = OFF innodb_disable_sort_file_cache ', float_val=8.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.18449042737483978, 0.15214183926582336, 0.26618632674217224, 0.1797831505537033, 0.21739822626113892]
Choice: 0
type: 3, value: 8.0, unit: 
Done flag: False
No warmup - hint counter: 3
{'sequence': '8', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.4621095061302185, 0.20298480987548828, 0.16258886456489563, 0.14552511274814606, 0.02679176814854145]}
Decision: Deciding weight of TuningHint(doc_id=15, param=<re.Match object; span=(84, 107), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 1), match='8'>, recommendation='8', passage='query_cache_size = 0\nquery_cache_type = 0\ninnodb_buffer_pool_instances = 8 (or 1 if innodb_buffer_pool_size < 1GB)\ninnodb_file_per_table=ON\ninnodb_stats_on_metadata = OFF innodb_disable_sort_file_cache ', float_val=8.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.02679176814854145, 0.4621095061302185, 0.20298480987548828, 0.16258886456489563, 0.14552511274814606]
Choice: 4
Trying assigning innodb_buffer_pool_size to 2
Assignment ('innodb_buffer_pool_size', '2') was rejected
Hint counter: 4
Episode hint counter before: 3
Episode hint counter: 4
Hints per episode: 5
Done flag: False
No warmup - hint counter: 4
{'sequence': '5G', 'labels': ['Increase recommendation', 'Use recommendation', 'Increase recommendation strongly', 'Decrease recommendation strongly', 'Decrease recommendation'], 'scores': [0.3685888648033142, 0.24387234449386597, 0.20301872491836548, 0.09539247304201126, 0.08912758529186249]}
Decision: Deciding adaption of TuningHint(doc_id=15, param=<re.Match object; span=(54, 77), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 2), match='5G'>, recommendation='5G', passage='query_cache_type = 0\ninnodb_buffer_pool_instances = 8\ninnodb_buffer_pool_size = 5G\ninnodb_file_per_table = ON\ninnodb_log_file_size = 512M\ninnodb_stats_on_metadata = OFF innodb_disable_sort_file_cache ', float_val=5.0, val_unit='G', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.09539247304201126, 0.08912758529186249, 0.24387234449386597, 0.3685888648033142, 0.20301872491836548]
Choice: 0
type: 3, value: 5.0, unit: G
Done flag: False
No warmup - hint counter: 4
{'sequence': '5G', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.45308181643486023, 0.21331508457660675, 0.17258615791797638, 0.14304116368293762, 0.017975887283682823]}
Decision: Deciding weight of TuningHint(doc_id=15, param=<re.Match object; span=(54, 77), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 2), match='5G'>, recommendation='5G', passage='query_cache_type = 0\ninnodb_buffer_pool_instances = 8\ninnodb_buffer_pool_size = 5G\ninnodb_file_per_table = ON\ninnodb_log_file_size = 512M\ninnodb_stats_on_metadata = OFF innodb_disable_sort_file_cache ', float_val=5.0, val_unit='G', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.017975887283682823, 0.45308181643486023, 0.21331508457660675, 0.17258615791797638, 0.14304116368293762]
Choice: 4
Trying assigning innodb_buffer_pool_size to 1G
Assignment ('innodb_buffer_pool_size', '1G') was rejected
Hint counter: 5
Episode hint counter before: 4
Episode hint counter: 5
Hints per episode: 5
Episode finished!
Done flag: True
Finalizing episode!
Weighted hints: defaultdict(<function NlpTuningEnv.__init__.<locals>.<lambda> at 0x7f86e2977b00>, {('innodb_buffer_pool_size', '4000000'): 2, ('innodb_buffer_pool_size', '22400000'): 16, ('innodb_buffer_pool_size', '1GB'): 1})
Selected configurations: [{'innodb_buffer_pool_size': '22400000'}, {'innodb_buffer_pool_size': '1GB'}]
Trying configuration: {'innodb_buffer_pool_size': '22400000'}
--- Tuning Updates ---
Minimal time (ms): 0.06414749634878436
Achieved with configuration: {'innodb_buffer_pool_size': '22400000'}
Maximal time (ms): 0.06414749634878436
Achieved with configuration: {'innodb_buffer_pool_size': '22400000'}
Reward -0.13455050941265478 with {'innodb_buffer_pool_size': '22400000'}
Trying configuration: {'innodb_buffer_pool_size': '1GB'}
--- Tuning Updates ---
Minimal time (ms): 0.06414749634878436
Achieved with configuration: {'innodb_buffer_pool_size': '22400000'}
Maximal time (ms): 0.45354268267806885
Achieved with configuration: {'innodb_buffer_pool_size': '1GB'}
Reward 0.1486152692172389 with {'innodb_buffer_pool_size': '1GB'}
Obtained 0.1486152692172389 by configuration {'innodb_buffer_pool_size': '1GB'}
Achieved unscaled reward of 0.1486152692172389 using {'innodb_buffer_pool_size': '1GB'}.
No warmup - hint counter: 5
{'sequence': '1 gigabyte or more', 'labels': ['Use recommendation', 'Increase recommendation', 'Increase recommendation strongly', 'Decrease recommendation', 'Decrease recommendation strongly'], 'scores': [0.3387148380279541, 0.26025304198265076, 0.22168223559856415, 0.10525333136320114, 0.07409653067588806]}
Decision: Deciding adaption of TuningHint(doc_id=21, param=<re.Match object; span=(632, 655), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation='1 gigabyte or more', passage='The number of regions that the InnoDB buffer pool is divided into. For systems with buffer pools in the multi-gigabyte range, dividing the buffer pool into separate instances can improve concurrency, by reducing contention as different threads read and write to cached pages. Each page that is stored in or read from the buffer pool is assigned to one of the buffer pool instances randomly, using a hashing function. Each buffer pool manages its own free lists, flush lists, LRUs, and all other data structures connected to a buffer pool, and is protected by its own buffer pool mutex.This option takes effect only when you set the innodb_buffer_pool_size to a size of 1 gigabyte or more. The total size you specify is divided among all the buffer pools. For best efficiency, specify a combination of innodb_buffer_pool_instances and innodb_buffer_pool_size so that each buffer pool instance is at least 1 gigabyte.\nIn MySQL versions prior to 5.5.4 this was not configurable and thus set to just one instance. Now join_buffer_size ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.07409653067588806, 0.10525333136320114, 0.3387148380279541, 0.26025304198265076, 0.22168223559856415]
--- Tuning Updates ---
Minimal time (ms): 0.06414749634878436
Achieved with configuration: {'innodb_buffer_pool_size': '22400000'}
Maximal time (ms): 0.45354268267806885
Achieved with configuration: {'innodb_buffer_pool_size': '1GB'}
Decision: Deciding adaption of TuningHint(doc_id=21, param=<re.Match object; span=(632, 655), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation='1 gigabyte or more', passage='The number of regions that the InnoDB buffer pool is divided into. For systems with buffer pools in the multi-gigabyte range, dividing the buffer pool into separate instances can improve concurrency, by reducing contention as different threads read and write to cached pages. Each page that is stored in or read from the buffer pool is assigned to one of the buffer pool instances randomly, using a hashing function. Each buffer pool manages its own free lists, flush lists, LRUs, and all other data structures connected to a buffer pool, and is protected by its own buffer pool mutex.This option takes effect only when you set the innodb_buffer_pool_size to a size of 1 gigabyte or more. The total size you specify is divided among all the buffer pools. For best efficiency, specify a combination of innodb_buffer_pool_instances and innodb_buffer_pool_size so that each buffer pool instance is at least 1 gigabyte.\nIn MySQL versions prior to 5.5.4 this was not configurable and thus set to just one instance. Now join_buffer_size ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.07409653067588806, 0.10525333136320114, 0.3387148380279541, 0.26025304198265076, 0.22168223559856415]
Choice: 3
type: 3, value: 1.0, unit: 
Done flag: False
No warmup - hint counter: 5
{'sequence': '1 gigabyte or more', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.48790881037712097, 0.19656172394752502, 0.15962107479572296, 0.1371586173772812, 0.018749788403511047]}
Decision: Deciding weight of TuningHint(doc_id=21, param=<re.Match object; span=(632, 655), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation='1 gigabyte or more', passage='The number of regions that the InnoDB buffer pool is divided into. For systems with buffer pools in the multi-gigabyte range, dividing the buffer pool into separate instances can improve concurrency, by reducing contention as different threads read and write to cached pages. Each page that is stored in or read from the buffer pool is assigned to one of the buffer pool instances randomly, using a hashing function. Each buffer pool manages its own free lists, flush lists, LRUs, and all other data structures connected to a buffer pool, and is protected by its own buffer pool mutex.This option takes effect only when you set the innodb_buffer_pool_size to a size of 1 gigabyte or more. The total size you specify is divided among all the buffer pools. For best efficiency, specify a combination of innodb_buffer_pool_instances and innodb_buffer_pool_size so that each buffer pool instance is at least 1 gigabyte.\nIn MySQL versions prior to 5.5.4 this was not configurable and thus set to just one instance. Now join_buffer_size ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.018749788403511047, 0.48790881037712097, 0.19656172394752502, 0.15962107479572296, 0.1371586173772812]
Choice: 3
Trying assigning innodb_buffer_pool_size to 2
Adding assignment ('innodb_buffer_pool_size', '2') with weight 8
Assignment ('innodb_buffer_pool_size', '2') extracted from "The number of regions that the InnoDB buffer pool is divided into. For systems with buffer pools in the multi-gigabyte range, dividing the buffer pool into separate instances can improve concurrency, by reducing contention as different threads read and write to cached pages. Each page that is stored in or read from the buffer pool is assigned to one of the buffer pool instances randomly, using a hashing function. Each buffer pool manages its own free lists, flush lists, LRUs, and all other data structures connected to a buffer pool, and is protected by its own buffer pool mutex.This option takes effect only when you set the innodb_buffer_pool_size to a size of 1 gigabyte or more. The total size you specify is divided among all the buffer pools. For best efficiency, specify a combination of innodb_buffer_pool_instances and innodb_buffer_pool_size so that each buffer pool instance is at least 1 gigabyte.
In MySQL versions prior to 5.5.4 this was not configurable and thus set to just one instance. Now join_buffer_size "
Hint counter: 6
Episode hint counter before: 0
Episode hint counter: 1
Hints per episode: 5
Done flag: False
No warmup - hint counter: 6
{'sequence': '2, 3, 4 or 8', 'labels': ['Increase recommendation', 'Use recommendation', 'Increase recommendation strongly', 'Decrease recommendation', 'Decrease recommendation strongly'], 'scores': [0.4595507085323334, 0.22728025913238525, 0.15209653973579407, 0.09443206340074539, 0.06664034724235535]}
Decision: Deciding adaption of TuningHint(doc_id=21, param=<re.Match object; span=(17, 40), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 1), match='2'>, recommendation='2, 3, 4 or 8', passage='you can increase innodb_buffer_pool_size, and you can divide the InnoDB buffer pool into multiple regions by setting innodb_buffer_pool_instances to 2, 3, 4 or 8. As long as innodb_buffer_pool_size is set high enough, and you have enough memory available in your MySQL database server. This increases\nInnoDB read/write threads.\nTo enable multiple buffer pool instances, set the innodb_buffer_pool_instances configuration option to a value greater than 1 (the default) up to 64 (the maximum). innodb_buffer_pool_size ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.06664034724235535, 0.09443206340074539, 0.22728025913238525, 0.4595507085323334, 0.15209653973579407]
Choice: 0
type: 3, value: 2.0, unit: 
Done flag: False
No warmup - hint counter: 6
{'sequence': '2, 3, 4 or 8', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.5274993777275085, 0.18198107182979584, 0.1537662297487259, 0.11219039559364319, 0.024562908336520195]}
Decision: Deciding weight of TuningHint(doc_id=21, param=<re.Match object; span=(17, 40), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 1), match='2'>, recommendation='2, 3, 4 or 8', passage='you can increase innodb_buffer_pool_size, and you can divide the InnoDB buffer pool into multiple regions by setting innodb_buffer_pool_instances to 2, 3, 4 or 8. As long as innodb_buffer_pool_size is set high enough, and you have enough memory available in your MySQL database server. This increases\nInnoDB read/write threads.\nTo enable multiple buffer pool instances, set the innodb_buffer_pool_instances configuration option to a value greater than 1 (the default) up to 64 (the maximum). innodb_buffer_pool_size ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.024562908336520195, 0.5274993777275085, 0.18198107182979584, 0.1537662297487259, 0.11219039559364319]
Choice: 4
Trying assigning innodb_buffer_pool_size to 0
Assignment ('innodb_buffer_pool_size', '0') was rejected
Hint counter: 7
Episode hint counter before: 1
Episode hint counter: 2
Hints per episode: 5
Done flag: False
No warmup - hint counter: 7
{'sequence': '2, 3, 4 or 8', 'labels': ['Increase recommendation', 'Use recommendation', 'Increase recommendation strongly', 'Decrease recommendation', 'Decrease recommendation strongly'], 'scores': [0.4595507085323334, 0.22728025913238525, 0.15209653973579407, 0.09443206340074539, 0.06664034724235535]}
Decision: Deciding adaption of TuningHint(doc_id=21, param=<re.Match object; span=(17, 40), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(3, 4), match='3'>, recommendation='2, 3, 4 or 8', passage='you can increase innodb_buffer_pool_size, and you can divide the InnoDB buffer pool into multiple regions by setting innodb_buffer_pool_instances to 2, 3, 4 or 8. As long as innodb_buffer_pool_size is set high enough, and you have enough memory available in your MySQL database server. This increases\nInnoDB read/write threads.\nTo enable multiple buffer pool instances, set the innodb_buffer_pool_instances configuration option to a value greater than 1 (the default) up to 64 (the maximum). innodb_buffer_pool_size ', float_val=3.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.06664034724235535, 0.09443206340074539, 0.22728025913238525, 0.4595507085323334, 0.15209653973579407]
Choice: 2
type: 3, value: 3.0, unit: 
Done flag: False
No warmup - hint counter: 7
{'sequence': '2, 3, 4 or 8', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.5274993777275085, 0.18198107182979584, 0.1537662297487259, 0.11219039559364319, 0.024562908336520195]}
Decision: Deciding weight of TuningHint(doc_id=21, param=<re.Match object; span=(17, 40), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(3, 4), match='3'>, recommendation='2, 3, 4 or 8', passage='you can increase innodb_buffer_pool_size, and you can divide the InnoDB buffer pool into multiple regions by setting innodb_buffer_pool_instances to 2, 3, 4 or 8. As long as innodb_buffer_pool_size is set high enough, and you have enough memory available in your MySQL database server. This increases\nInnoDB read/write threads.\nTo enable multiple buffer pool instances, set the innodb_buffer_pool_instances configuration option to a value greater than 1 (the default) up to 64 (the maximum). innodb_buffer_pool_size ', float_val=3.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.024562908336520195, 0.5274993777275085, 0.18198107182979584, 0.1537662297487259, 0.11219039559364319]
Choice: 2
Trying assigning innodb_buffer_pool_size to 3
Adding assignment ('innodb_buffer_pool_size', '3') with weight 4
Assignment ('innodb_buffer_pool_size', '3') extracted from "you can increase innodb_buffer_pool_size, and you can divide the InnoDB buffer pool into multiple regions by setting innodb_buffer_pool_instances to 2, 3, 4 or 8. As long as innodb_buffer_pool_size is set high enough, and you have enough memory available in your MySQL database server. This increases
InnoDB read/write threads.
To enable multiple buffer pool instances, set the innodb_buffer_pool_instances configuration option to a value greater than 1 (the default) up to 64 (the maximum). innodb_buffer_pool_size "
Hint counter: 8
Episode hint counter before: 2
Episode hint counter: 3
Hints per episode: 5
Done flag: False
No warmup - hint counter: 8
{'sequence': '2, 3, 4 or 8', 'labels': ['Increase recommendation', 'Use recommendation', 'Increase recommendation strongly', 'Decrease recommendation', 'Decrease recommendation strongly'], 'scores': [0.4595507085323334, 0.22728025913238525, 0.15209653973579407, 0.09443206340074539, 0.06664034724235535]}
Decision: Deciding adaption of TuningHint(doc_id=21, param=<re.Match object; span=(17, 40), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(6, 7), match='4'>, recommendation='2, 3, 4 or 8', passage='you can increase innodb_buffer_pool_size, and you can divide the InnoDB buffer pool into multiple regions by setting innodb_buffer_pool_instances to 2, 3, 4 or 8. As long as innodb_buffer_pool_size is set high enough, and you have enough memory available in your MySQL database server. This increases\nInnoDB read/write threads.\nTo enable multiple buffer pool instances, set the innodb_buffer_pool_instances configuration option to a value greater than 1 (the default) up to 64 (the maximum). innodb_buffer_pool_size ', float_val=4.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.06664034724235535, 0.09443206340074539, 0.22728025913238525, 0.4595507085323334, 0.15209653973579407]
Choice: 4
type: 3, value: 4.0, unit: 
Done flag: False
No warmup - hint counter: 8
{'sequence': '2, 3, 4 or 8', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.5274993777275085, 0.18198107182979584, 0.1537662297487259, 0.11219039559364319, 0.024562908336520195]}
Decision: Deciding weight of TuningHint(doc_id=21, param=<re.Match object; span=(17, 40), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(6, 7), match='4'>, recommendation='2, 3, 4 or 8', passage='you can increase innodb_buffer_pool_size, and you can divide the InnoDB buffer pool into multiple regions by setting innodb_buffer_pool_instances to 2, 3, 4 or 8. As long as innodb_buffer_pool_size is set high enough, and you have enough memory available in your MySQL database server. This increases\nInnoDB read/write threads.\nTo enable multiple buffer pool instances, set the innodb_buffer_pool_instances configuration option to a value greater than 1 (the default) up to 64 (the maximum). innodb_buffer_pool_size ', float_val=4.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.024562908336520195, 0.5274993777275085, 0.18198107182979584, 0.1537662297487259, 0.11219039559364319]
Choice: 4
Trying assigning innodb_buffer_pool_size to 16
Assignment ('innodb_buffer_pool_size', '16') was rejected
Hint counter: 9
Episode hint counter before: 3
Episode hint counter: 4
Hints per episode: 5
Done flag: False
No warmup - hint counter: 9
{'sequence': '2, 3, 4 or 8', 'labels': ['Increase recommendation', 'Use recommendation', 'Increase recommendation strongly', 'Decrease recommendation', 'Decrease recommendation strongly'], 'scores': [0.4595507085323334, 0.22728025913238525, 0.15209653973579407, 0.09443206340074539, 0.06664034724235535]}
Decision: Deciding adaption of TuningHint(doc_id=21, param=<re.Match object; span=(17, 40), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(11, 12), match='8'>, recommendation='2, 3, 4 or 8', passage='you can increase innodb_buffer_pool_size, and you can divide the InnoDB buffer pool into multiple regions by setting innodb_buffer_pool_instances to 2, 3, 4 or 8. As long as innodb_buffer_pool_size is set high enough, and you have enough memory available in your MySQL database server. This increases\nInnoDB read/write threads.\nTo enable multiple buffer pool instances, set the innodb_buffer_pool_instances configuration option to a value greater than 1 (the default) up to 64 (the maximum). innodb_buffer_pool_size ', float_val=8.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.06664034724235535, 0.09443206340074539, 0.22728025913238525, 0.4595507085323334, 0.15209653973579407]
Choice: 3
type: 3, value: 8.0, unit: 
Done flag: False
No warmup - hint counter: 9
{'sequence': '2, 3, 4 or 8', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.5274993777275085, 0.18198107182979584, 0.1537662297487259, 0.11219039559364319, 0.024562908336520195]}
Decision: Deciding weight of TuningHint(doc_id=21, param=<re.Match object; span=(17, 40), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(11, 12), match='8'>, recommendation='2, 3, 4 or 8', passage='you can increase innodb_buffer_pool_size, and you can divide the InnoDB buffer pool into multiple regions by setting innodb_buffer_pool_instances to 2, 3, 4 or 8. As long as innodb_buffer_pool_size is set high enough, and you have enough memory available in your MySQL database server. This increases\nInnoDB read/write threads.\nTo enable multiple buffer pool instances, set the innodb_buffer_pool_instances configuration option to a value greater than 1 (the default) up to 64 (the maximum). innodb_buffer_pool_size ', float_val=8.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.024562908336520195, 0.5274993777275085, 0.18198107182979584, 0.1537662297487259, 0.11219039559364319]
Choice: 0
Trying assigning innodb_buffer_pool_size to 16
Adding assignment ('innodb_buffer_pool_size', '16') with weight 1
Assignment ('innodb_buffer_pool_size', '16') extracted from "you can increase innodb_buffer_pool_size, and you can divide the InnoDB buffer pool into multiple regions by setting innodb_buffer_pool_instances to 2, 3, 4 or 8. As long as innodb_buffer_pool_size is set high enough, and you have enough memory available in your MySQL database server. This increases
InnoDB read/write threads.
To enable multiple buffer pool instances, set the innodb_buffer_pool_instances configuration option to a value greater than 1 (the default) up to 64 (the maximum). innodb_buffer_pool_size "
Hint counter: 10
Episode hint counter before: 4
Episode hint counter: 5
Hints per episode: 5
Episode finished!
Done flag: True
Finalizing episode!
Weighted hints: defaultdict(<function NlpTuningEnv._finalize_episode.<locals>.<lambda> at 0x7f86e0bd5320>, {('innodb_buffer_pool_size', '2'): 8, ('innodb_buffer_pool_size', '3'): 4, ('innodb_buffer_pool_size', '16'): 1})
Selected configurations: [{'innodb_buffer_pool_size': '3'}, {'innodb_buffer_pool_size': '16'}]
Trying configuration: {'innodb_buffer_pool_size': '3'}
--- Tuning Updates ---
Minimal time (ms): 0.06414749634878436
Achieved with configuration: {'innodb_buffer_pool_size': '22400000'}
Maximal time (ms): 0.45354268267806885
Achieved with configuration: {'innodb_buffer_pool_size': '1GB'}
Reward 0.16804617726526894 with {'innodb_buffer_pool_size': '3'}
Trying configuration: {'innodb_buffer_pool_size': '16'}
--- Tuning Updates ---
Minimal time (ms): 0.06414749634878436
Achieved with configuration: {'innodb_buffer_pool_size': '22400000'}
Maximal time (ms): 0.45354268267806885
Achieved with configuration: {'innodb_buffer_pool_size': '1GB'}
Reward -0.24721486944638227 with {'innodb_buffer_pool_size': '16'}
Obtained 0.16804617726526894 by configuration {'innodb_buffer_pool_size': '3'}
Achieved unscaled reward of 0.16804617726526894 using {'innodb_buffer_pool_size': '3'}.
No warmup - hint counter: 10
{'sequence': '8”', 'labels': ['Use recommendation', 'Increase recommendation strongly', 'Increase recommendation', 'Decrease recommendation strongly', 'Decrease recommendation'], 'scores': [0.2904800474643707, 0.19919461011886597, 0.18495337665081024, 0.16769187152385712, 0.15768012404441833]}
Decision: Deciding adaption of TuningHint(doc_id=4, param=<re.Match object; span=(133, 161), match='innodb_buffer_pool_instances'>, value=<re.Match object; span=(0, 1), match='8'>, recommendation='8”', passage='innodb_stats_on_metadata\nSetting this to “OFF” avoids unnecessary updating of InnoDB statistics and can greatly improve read speeds.\ninnodb_buffer_pool_instances\nA best practice is to set this to “8” unless the buffer pool size is < 1G, in which case set to “1”. innodb_change_buffer_max_size ', float_val=8.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.16769187152385712, 0.15768012404441833, 0.2904800474643707, 0.18495337665081024, 0.19919461011886597]
--- Tuning Updates ---
Minimal time (ms): 0.06414749634878436
Achieved with configuration: {'innodb_buffer_pool_size': '22400000'}
Maximal time (ms): 0.45354268267806885
Achieved with configuration: {'innodb_buffer_pool_size': '1GB'}
Decision: Deciding adaption of TuningHint(doc_id=4, param=<re.Match object; span=(133, 161), match='innodb_buffer_pool_instances'>, value=<re.Match object; span=(0, 1), match='8'>, recommendation='8”', passage='innodb_stats_on_metadata\nSetting this to “OFF” avoids unnecessary updating of InnoDB statistics and can greatly improve read speeds.\ninnodb_buffer_pool_instances\nA best practice is to set this to “8” unless the buffer pool size is < 1G, in which case set to “1”. innodb_change_buffer_max_size ', float_val=8.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.16769187152385712, 0.15768012404441833, 0.2904800474643707, 0.18495337665081024, 0.19919461011886597]
--- Tuning Updates ---
Minimal time (ms): 0.06414749634878436
Achieved with configuration: {'innodb_buffer_pool_size': '22400000'}
Maximal time (ms): 0.45354268267806885
Achieved with configuration: {'innodb_buffer_pool_size': '1GB'}
No warmup - hint counter: 0
{'sequence': '50% – 70% of your total RAM', 'labels': ['Use recommendation', 'Increase recommendation', 'Increase recommendation strongly', 'Decrease recommendation', 'Decrease recommendation strongly'], 'scores': [0.39574071764945984, 0.23159174621105194, 0.17225755751132965, 0.12725797295570374, 0.07315202802419662]}
Decision: Deciding adaption of TuningHint(doc_id=4, param=<re.Match object; span=(0, 23), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 3), match='50%'>, recommendation='50% – 70% of your total RAM', passage='innodb_buffer_pool_size\nGenerally, set to 50% – 70% of your total RAM as a starting point.\nIt does not need to be set any larger than the total database size.\nPercona Monitoring and Management (PMM) can offer additional insight, showing your buffer pool usage and allowing you to tune accordingly. innodb_buffer_pool_size ', float_val=0.5, val_unit='', hint_type=<HintType.RAM_RATIO: 1>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.07315202802419662, 0.12725797295570374, 0.39574071764945984, 0.23159174621105194, 0.17225755751132965]
--- Tuning Updates ---
Minimal time (ms): 0.06414749634878436
Achieved with configuration: {'innodb_buffer_pool_size': '22400000'}
Maximal time (ms): 0.45354268267806885
Achieved with configuration: {'innodb_buffer_pool_size': '1GB'}
Decision: Deciding adaption of TuningHint(doc_id=4, param=<re.Match object; span=(0, 23), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 3), match='50%'>, recommendation='50% – 70% of your total RAM', passage='innodb_buffer_pool_size\nGenerally, set to 50% – 70% of your total RAM as a starting point.\nIt does not need to be set any larger than the total database size.\nPercona Monitoring and Management (PMM) can offer additional insight, showing your buffer pool usage and allowing you to tune accordingly. innodb_buffer_pool_size ', float_val=0.5, val_unit='', hint_type=<HintType.RAM_RATIO: 1>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.07315202802419662, 0.12725797295570374, 0.39574071764945984, 0.23159174621105194, 0.17225755751132965]
Choice: 4
type: 1, value: 0.5, unit: 
Done flag: False
No warmup - hint counter: 0
{'sequence': '50% – 70% of your total RAM', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.5314092040061951, 0.1867820918560028, 0.14756043255329132, 0.12012757360935211, 0.014120634645223618]}
Decision: Deciding weight of TuningHint(doc_id=4, param=<re.Match object; span=(0, 23), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 3), match='50%'>, recommendation='50% – 70% of your total RAM', passage='innodb_buffer_pool_size\nGenerally, set to 50% – 70% of your total RAM as a starting point.\nIt does not need to be set any larger than the total database size.\nPercona Monitoring and Management (PMM) can offer additional insight, showing your buffer pool usage and allowing you to tune accordingly. innodb_buffer_pool_size ', float_val=0.5, val_unit='', hint_type=<HintType.RAM_RATIO: 1>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.014120634645223618, 0.5314092040061951, 0.1867820918560028, 0.14756043255329132, 0.12012757360935211]
Choice: 3
Trying assigning innodb_buffer_pool_size to 16000000
Adding assignment ('innodb_buffer_pool_size', '16000000') with weight 8
Assignment ('innodb_buffer_pool_size', '16000000') extracted from "innodb_buffer_pool_size
Generally, set to 50% – 70% of your total RAM as a starting point.
It does not need to be set any larger than the total database size.
Percona Monitoring and Management (PMM) can offer additional insight, showing your buffer pool usage and allowing you to tune accordingly. innodb_buffer_pool_size "
Hint counter: 1
Episode hint counter before: 0
Episode hint counter: 1
Hints per episode: 5
Done flag: False
No warmup - hint counter: 1
{'sequence': '50% – 70% of your total RAM', 'labels': ['Use recommendation', 'Increase recommendation', 'Increase recommendation strongly', 'Decrease recommendation', 'Decrease recommendation strongly'], 'scores': [0.39574071764945984, 0.23159174621105194, 0.17225755751132965, 0.12725797295570374, 0.07315202802419662]}
Decision: Deciding adaption of TuningHint(doc_id=4, param=<re.Match object; span=(0, 23), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(6, 9), match='70%'>, recommendation='50% – 70% of your total RAM', passage='innodb_buffer_pool_size\nGenerally, set to 50% – 70% of your total RAM as a starting point.\nIt does not need to be set any larger than the total database size.\nPercona Monitoring and Management (PMM) can offer additional insight, showing your buffer pool usage and allowing you to tune accordingly. innodb_buffer_pool_size ', float_val=0.7, val_unit='', hint_type=<HintType.RAM_RATIO: 1>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.07315202802419662, 0.12725797295570374, 0.39574071764945984, 0.23159174621105194, 0.17225755751132965]
Choice: 4
type: 1, value: 0.7, unit: 
Done flag: False
No warmup - hint counter: 1
{'sequence': '50% – 70% of your total RAM', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.5314092040061951, 0.1867820918560028, 0.14756043255329132, 0.12012757360935211, 0.014120634645223618]}
Decision: Deciding weight of TuningHint(doc_id=4, param=<re.Match object; span=(0, 23), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(6, 9), match='70%'>, recommendation='50% – 70% of your total RAM', passage='innodb_buffer_pool_size\nGenerally, set to 50% – 70% of your total RAM as a starting point.\nIt does not need to be set any larger than the total database size.\nPercona Monitoring and Management (PMM) can offer additional insight, showing your buffer pool usage and allowing you to tune accordingly. innodb_buffer_pool_size ', float_val=0.7, val_unit='', hint_type=<HintType.RAM_RATIO: 1>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.014120634645223618, 0.5314092040061951, 0.1867820918560028, 0.14756043255329132, 0.12012757360935211]
Choice: 2
Trying assigning innodb_buffer_pool_size to 22400000
Assignment ('innodb_buffer_pool_size', '22400000') was rejected
Hint counter: 2
Episode hint counter before: 1
Episode hint counter: 2
Hints per episode: 5
Done flag: False
No warmup - hint counter: 2
{'sequence': '1GB or more', 'labels': ['Use recommendation', 'Increase recommendation strongly', 'Increase recommendation', 'Decrease recommendation strongly', 'Decrease recommendation'], 'scores': [0.29170164465904236, 0.2564612030982971, 0.19368036091327667, 0.13815999031066895, 0.11999675631523132]}
Decision: Deciding adaption of TuningHint(doc_id=4, param=<re.Match object; span=(241, 264), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 3), match='1GB'>, recommendation='1GB or more', passage="Hi Jie Zhou. The MySQL default is to set innodb_buffer_pool_instances to 8 (in MySQL version 5.7 and up) as this is a good starting point for most general use cases. As per the MySQL documentation, this option takes effect only when you set innodb_buffer_pool_size to a size of 1GB or more. The total size you specify is divided among all the buffer pools. For best efficiency, specify a combination of innodb_buffer_pool_instances and innodb_buffer_pool_size so that each buffer pool instance is at least 1GB.\nJuly 8, 2020 at 1:11 pm\nLeave a Reply\t\t\t\t\tCancel reply\nHow Can We Help?\nPercona's experts can maximize your application performance with our open source database support, managed services or consulting.\nContact us innodb_buffer_pool_size ", float_val=1.0, val_unit='GB', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.13815999031066895, 0.11999675631523132, 0.29170164465904236, 0.19368036091327667, 0.2564612030982971]
Choice: 4
type: 3, value: 1.0, unit: GB
Done flag: False
No warmup - hint counter: 2
{'sequence': '1GB or more', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.47241002321243286, 0.2022891342639923, 0.15908806025981903, 0.14357300102710724, 0.022639784961938858]}
Decision: Deciding weight of TuningHint(doc_id=4, param=<re.Match object; span=(241, 264), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 3), match='1GB'>, recommendation='1GB or more', passage="Hi Jie Zhou. The MySQL default is to set innodb_buffer_pool_instances to 8 (in MySQL version 5.7 and up) as this is a good starting point for most general use cases. As per the MySQL documentation, this option takes effect only when you set innodb_buffer_pool_size to a size of 1GB or more. The total size you specify is divided among all the buffer pools. For best efficiency, specify a combination of innodb_buffer_pool_instances and innodb_buffer_pool_size so that each buffer pool instance is at least 1GB.\nJuly 8, 2020 at 1:11 pm\nLeave a Reply\t\t\t\t\tCancel reply\nHow Can We Help?\nPercona's experts can maximize your application performance with our open source database support, managed services or consulting.\nContact us innodb_buffer_pool_size ", float_val=1.0, val_unit='GB', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.022639784961938858, 0.47241002321243286, 0.2022891342639923, 0.15908806025981903, 0.14357300102710724]
Step 0 - tuned for 8.693461894989014 seconds
--- Tuning Updates ---
Minimal time (ms): 0.06414749634878436
Achieved with configuration: {'innodb_buffer_pool_size': '22400000'}
Maximal time (ms): 0.45354268267806885
Achieved with configuration: {'innodb_buffer_pool_size': '1GB'}
Decision: Deciding adaption of TuningHint(doc_id=4, param=<re.Match object; span=(241, 264), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 3), match='1GB'>, recommendation='1GB or more', passage="Hi Jie Zhou. The MySQL default is to set innodb_buffer_pool_instances to 8 (in MySQL version 5.7 and up) as this is a good starting point for most general use cases. As per the MySQL documentation, this option takes effect only when you set innodb_buffer_pool_size to a size of 1GB or more. The total size you specify is divided among all the buffer pools. For best efficiency, specify a combination of innodb_buffer_pool_instances and innodb_buffer_pool_size so that each buffer pool instance is at least 1GB.\nJuly 8, 2020 at 1:11 pm\nLeave a Reply\t\t\t\t\tCancel reply\nHow Can We Help?\nPercona's experts can maximize your application performance with our open source database support, managed services or consulting.\nContact us innodb_buffer_pool_size ", float_val=1.0, val_unit='GB', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.13815999031066895, 0.11999675631523132, 0.29170164465904236, 0.19368036091327667, 0.2564612030982971]
Choice: 1
type: 3, value: 1.0, unit: GB
Done flag: False
Decision: Deciding weight of TuningHint(doc_id=4, param=<re.Match object; span=(241, 264), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 3), match='1GB'>, recommendation='1GB or more', passage="Hi Jie Zhou. The MySQL default is to set innodb_buffer_pool_instances to 8 (in MySQL version 5.7 and up) as this is a good starting point for most general use cases. As per the MySQL documentation, this option takes effect only when you set innodb_buffer_pool_size to a size of 1GB or more. The total size you specify is divided among all the buffer pools. For best efficiency, specify a combination of innodb_buffer_pool_instances and innodb_buffer_pool_size so that each buffer pool instance is at least 1GB.\nJuly 8, 2020 at 1:11 pm\nLeave a Reply\t\t\t\t\tCancel reply\nHow Can We Help?\nPercona's experts can maximize your application performance with our open source database support, managed services or consulting.\nContact us innodb_buffer_pool_size ", float_val=1.0, val_unit='GB', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.022639784961938858, 0.47241002321243286, 0.2022891342639923, 0.15908806025981903, 0.14357300102710724]
Choice: 4
Trying assigning innodb_buffer_pool_size to 0GB
Adding assignment ('innodb_buffer_pool_size', '0GB') with weight 16
Assignment ('innodb_buffer_pool_size', '0GB') extracted from "Hi Jie Zhou. The MySQL default is to set innodb_buffer_pool_instances to 8 (in MySQL version 5.7 and up) as this is a good starting point for most general use cases. As per the MySQL documentation, this option takes effect only when you set innodb_buffer_pool_size to a size of 1GB or more. The total size you specify is divided among all the buffer pools. For best efficiency, specify a combination of innodb_buffer_pool_instances and innodb_buffer_pool_size so that each buffer pool instance is at least 1GB.
July 8, 2020 at 1:11 pm
Leave a Reply					Cancel reply
How Can We Help?
Percona's experts can maximize your application performance with our open source database support, managed services or consulting.
Contact us innodb_buffer_pool_size "
Hint counter: 3
Episode hint counter before: 2
Episode hint counter: 3
Hints per episode: 5
Done flag: False
No warmup - hint counter: 3
{'sequence': '8', 'labels': ['Use recommendation', 'Increase recommendation strongly', 'Decrease recommendation strongly', 'Increase recommendation', 'Decrease recommendation'], 'scores': [0.26618632674217224, 0.21739822626113892, 0.18449042737483978, 0.1797831505537033, 0.15214183926582336]}
Decision: Deciding adaption of TuningHint(doc_id=15, param=<re.Match object; span=(84, 107), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 1), match='8'>, recommendation='8', passage='query_cache_size = 0\nquery_cache_type = 0\ninnodb_buffer_pool_instances = 8 (or 1 if innodb_buffer_pool_size < 1GB)\ninnodb_file_per_table=ON\ninnodb_stats_on_metadata = OFF innodb_disable_sort_file_cache ', float_val=8.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.18449042737483978, 0.15214183926582336, 0.26618632674217224, 0.1797831505537033, 0.21739822626113892]
Choice: 0
type: 3, value: 8.0, unit: 
Done flag: False
No warmup - hint counter: 3
{'sequence': '8', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.4621095061302185, 0.20298480987548828, 0.16258886456489563, 0.14552511274814606, 0.02679176814854145]}
Decision: Deciding weight of TuningHint(doc_id=15, param=<re.Match object; span=(84, 107), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 1), match='8'>, recommendation='8', passage='query_cache_size = 0\nquery_cache_type = 0\ninnodb_buffer_pool_instances = 8 (or 1 if innodb_buffer_pool_size < 1GB)\ninnodb_file_per_table=ON\ninnodb_stats_on_metadata = OFF innodb_disable_sort_file_cache ', float_val=8.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.02679176814854145, 0.4621095061302185, 0.20298480987548828, 0.16258886456489563, 0.14552511274814606]
Choice: 1
Trying assigning innodb_buffer_pool_size to 2
Assignment ('innodb_buffer_pool_size', '2') was rejected
Hint counter: 4
Episode hint counter before: 3
Episode hint counter: 4
Hints per episode: 5
Done flag: False
No warmup - hint counter: 4
{'sequence': '5G', 'labels': ['Increase recommendation', 'Use recommendation', 'Increase recommendation strongly', 'Decrease recommendation strongly', 'Decrease recommendation'], 'scores': [0.3685888648033142, 0.24387234449386597, 0.20301872491836548, 0.09539247304201126, 0.08912758529186249]}
Decision: Deciding adaption of TuningHint(doc_id=15, param=<re.Match object; span=(54, 77), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 2), match='5G'>, recommendation='5G', passage='query_cache_type = 0\ninnodb_buffer_pool_instances = 8\ninnodb_buffer_pool_size = 5G\ninnodb_file_per_table = ON\ninnodb_log_file_size = 512M\ninnodb_stats_on_metadata = OFF innodb_disable_sort_file_cache ', float_val=5.0, val_unit='G', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.09539247304201126, 0.08912758529186249, 0.24387234449386597, 0.3685888648033142, 0.20301872491836548]
Choice: 1
type: 3, value: 5.0, unit: G
Done flag: False
No warmup - hint counter: 4
{'sequence': '5G', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.45308181643486023, 0.21331508457660675, 0.17258615791797638, 0.14304116368293762, 0.017975887283682823]}
Decision: Deciding weight of TuningHint(doc_id=15, param=<re.Match object; span=(54, 77), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 2), match='5G'>, recommendation='5G', passage='query_cache_type = 0\ninnodb_buffer_pool_instances = 8\ninnodb_buffer_pool_size = 5G\ninnodb_file_per_table = ON\ninnodb_log_file_size = 512M\ninnodb_stats_on_metadata = OFF innodb_disable_sort_file_cache ', float_val=5.0, val_unit='G', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.017975887283682823, 0.45308181643486023, 0.21331508457660675, 0.17258615791797638, 0.14304116368293762]
--- Tuning Updates ---
Minimal time (ms): 0.06414749634878436
Achieved with configuration: {'innodb_buffer_pool_size': '22400000'}
Maximal time (ms): 0.45354268267806885
Achieved with configuration: {'innodb_buffer_pool_size': '1GB'}
Decision: Deciding adaption of TuningHint(doc_id=15, param=<re.Match object; span=(54, 77), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 2), match='5G'>, recommendation='5G', passage='query_cache_type = 0\ninnodb_buffer_pool_instances = 8\ninnodb_buffer_pool_size = 5G\ninnodb_file_per_table = ON\ninnodb_log_file_size = 512M\ninnodb_stats_on_metadata = OFF innodb_disable_sort_file_cache ', float_val=5.0, val_unit='G', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.09539247304201126, 0.08912758529186249, 0.24387234449386597, 0.3685888648033142, 0.20301872491836548]
Choice: 4
type: 3, value: 5.0, unit: G
Done flag: False
Decision: Deciding weight of TuningHint(doc_id=15, param=<re.Match object; span=(54, 77), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 2), match='5G'>, recommendation='5G', passage='query_cache_type = 0\ninnodb_buffer_pool_instances = 8\ninnodb_buffer_pool_size = 5G\ninnodb_file_per_table = ON\ninnodb_log_file_size = 512M\ninnodb_stats_on_metadata = OFF innodb_disable_sort_file_cache ', float_val=5.0, val_unit='G', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.017975887283682823, 0.45308181643486023, 0.21331508457660675, 0.17258615791797638, 0.14304116368293762]
Choice: 0
Trying assigning innodb_buffer_pool_size to 20G
Adding assignment ('innodb_buffer_pool_size', '20G') with weight 1
Assignment ('innodb_buffer_pool_size', '20G') extracted from "query_cache_type = 0
innodb_buffer_pool_instances = 8
innodb_buffer_pool_size = 5G
innodb_file_per_table = ON
innodb_log_file_size = 512M
innodb_stats_on_metadata = OFF innodb_disable_sort_file_cache "
Hint counter: 5
Episode hint counter before: 4
Episode hint counter: 5
Hints per episode: 5
Episode finished!
Done flag: True
Finalizing episode!
Weighted hints: defaultdict(<function NlpTuningEnv._finalize_episode.<locals>.<lambda> at 0x7f86e0bd5f80>, {('innodb_buffer_pool_size', '16000000'): 8, ('innodb_buffer_pool_size', '0GB'): 16, ('innodb_buffer_pool_size', '20G'): 1})
Selected configurations: [{'innodb_buffer_pool_size': '16000000'}, {'innodb_buffer_pool_size': '20G'}]
Trying configuration: {'innodb_buffer_pool_size': '16000000'}
--- Tuning Updates ---
Minimal time (ms): 0.015606064446828216
Achieved with configuration: {'innodb_buffer_pool_size': '16000000'}
Maximal time (ms): 0.45354268267806885
Achieved with configuration: {'innodb_buffer_pool_size': '1GB'}
Reward -0.5157389124518191 with {'innodb_buffer_pool_size': '16000000'}
Trying configuration: {'innodb_buffer_pool_size': '20G'}
--- Tuning Updates ---
Minimal time (ms): 0.015606064446828216
Achieved with configuration: {'innodb_buffer_pool_size': '16000000'}
Maximal time (ms): 0.5468849016694222
Achieved with configuration: {'innodb_buffer_pool_size': '20G'}
Reward 0.4189811678711771 with {'innodb_buffer_pool_size': '20G'}
Obtained 0.4189811678711771 by configuration {'innodb_buffer_pool_size': '20G'}
Achieved unscaled reward of 0.4189811678711771 using {'innodb_buffer_pool_size': '20G'}.
No warmup - hint counter: 5
{'sequence': '1 gigabyte or more', 'labels': ['Use recommendation', 'Increase recommendation', 'Increase recommendation strongly', 'Decrease recommendation', 'Decrease recommendation strongly'], 'scores': [0.3387148380279541, 0.26025304198265076, 0.22168223559856415, 0.10525333136320114, 0.07409653067588806]}
Decision: Deciding adaption of TuningHint(doc_id=21, param=<re.Match object; span=(632, 655), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation='1 gigabyte or more', passage='The number of regions that the InnoDB buffer pool is divided into. For systems with buffer pools in the multi-gigabyte range, dividing the buffer pool into separate instances can improve concurrency, by reducing contention as different threads read and write to cached pages. Each page that is stored in or read from the buffer pool is assigned to one of the buffer pool instances randomly, using a hashing function. Each buffer pool manages its own free lists, flush lists, LRUs, and all other data structures connected to a buffer pool, and is protected by its own buffer pool mutex.This option takes effect only when you set the innodb_buffer_pool_size to a size of 1 gigabyte or more. The total size you specify is divided among all the buffer pools. For best efficiency, specify a combination of innodb_buffer_pool_instances and innodb_buffer_pool_size so that each buffer pool instance is at least 1 gigabyte.\nIn MySQL versions prior to 5.5.4 this was not configurable and thus set to just one instance. Now join_buffer_size ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.07409653067588806, 0.10525333136320114, 0.3387148380279541, 0.26025304198265076, 0.22168223559856415]
--- Tuning Updates ---
Minimal time (ms): 0.015606064446828216
Achieved with configuration: {'innodb_buffer_pool_size': '16000000'}
Maximal time (ms): 0.5468849016694222
Achieved with configuration: {'innodb_buffer_pool_size': '20G'}
Decision: Deciding adaption of TuningHint(doc_id=21, param=<re.Match object; span=(632, 655), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation='1 gigabyte or more', passage='The number of regions that the InnoDB buffer pool is divided into. For systems with buffer pools in the multi-gigabyte range, dividing the buffer pool into separate instances can improve concurrency, by reducing contention as different threads read and write to cached pages. Each page that is stored in or read from the buffer pool is assigned to one of the buffer pool instances randomly, using a hashing function. Each buffer pool manages its own free lists, flush lists, LRUs, and all other data structures connected to a buffer pool, and is protected by its own buffer pool mutex.This option takes effect only when you set the innodb_buffer_pool_size to a size of 1 gigabyte or more. The total size you specify is divided among all the buffer pools. For best efficiency, specify a combination of innodb_buffer_pool_instances and innodb_buffer_pool_size so that each buffer pool instance is at least 1 gigabyte.\nIn MySQL versions prior to 5.5.4 this was not configurable and thus set to just one instance. Now join_buffer_size ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.07409653067588806, 0.10525333136320114, 0.3387148380279541, 0.26025304198265076, 0.22168223559856415]
Choice: 1
type: 3, value: 1.0, unit: 
Done flag: False
No warmup - hint counter: 5
{'sequence': '1 gigabyte or more', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.48790881037712097, 0.19656172394752502, 0.15962107479572296, 0.1371586173772812, 0.018749788403511047]}
Decision: Deciding weight of TuningHint(doc_id=21, param=<re.Match object; span=(632, 655), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation='1 gigabyte or more', passage='The number of regions that the InnoDB buffer pool is divided into. For systems with buffer pools in the multi-gigabyte range, dividing the buffer pool into separate instances can improve concurrency, by reducing contention as different threads read and write to cached pages. Each page that is stored in or read from the buffer pool is assigned to one of the buffer pool instances randomly, using a hashing function. Each buffer pool manages its own free lists, flush lists, LRUs, and all other data structures connected to a buffer pool, and is protected by its own buffer pool mutex.This option takes effect only when you set the innodb_buffer_pool_size to a size of 1 gigabyte or more. The total size you specify is divided among all the buffer pools. For best efficiency, specify a combination of innodb_buffer_pool_instances and innodb_buffer_pool_size so that each buffer pool instance is at least 1 gigabyte.\nIn MySQL versions prior to 5.5.4 this was not configurable and thus set to just one instance. Now join_buffer_size ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.018749788403511047, 0.48790881037712097, 0.19656172394752502, 0.15962107479572296, 0.1371586173772812]
Choice: 4
Trying assigning innodb_buffer_pool_size to 0
Adding assignment ('innodb_buffer_pool_size', '0') with weight 16
Assignment ('innodb_buffer_pool_size', '0') extracted from "The number of regions that the InnoDB buffer pool is divided into. For systems with buffer pools in the multi-gigabyte range, dividing the buffer pool into separate instances can improve concurrency, by reducing contention as different threads read and write to cached pages. Each page that is stored in or read from the buffer pool is assigned to one of the buffer pool instances randomly, using a hashing function. Each buffer pool manages its own free lists, flush lists, LRUs, and all other data structures connected to a buffer pool, and is protected by its own buffer pool mutex.This option takes effect only when you set the innodb_buffer_pool_size to a size of 1 gigabyte or more. The total size you specify is divided among all the buffer pools. For best efficiency, specify a combination of innodb_buffer_pool_instances and innodb_buffer_pool_size so that each buffer pool instance is at least 1 gigabyte.
In MySQL versions prior to 5.5.4 this was not configurable and thus set to just one instance. Now join_buffer_size "
Hint counter: 6
Episode hint counter before: 0
Episode hint counter: 1
Hints per episode: 5
Done flag: False
No warmup - hint counter: 6
{'sequence': '2, 3, 4 or 8', 'labels': ['Increase recommendation', 'Use recommendation', 'Increase recommendation strongly', 'Decrease recommendation', 'Decrease recommendation strongly'], 'scores': [0.4595507085323334, 0.22728025913238525, 0.15209653973579407, 0.09443206340074539, 0.06664034724235535]}
Decision: Deciding adaption of TuningHint(doc_id=21, param=<re.Match object; span=(17, 40), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 1), match='2'>, recommendation='2, 3, 4 or 8', passage='you can increase innodb_buffer_pool_size, and you can divide the InnoDB buffer pool into multiple regions by setting innodb_buffer_pool_instances to 2, 3, 4 or 8. As long as innodb_buffer_pool_size is set high enough, and you have enough memory available in your MySQL database server. This increases\nInnoDB read/write threads.\nTo enable multiple buffer pool instances, set the innodb_buffer_pool_instances configuration option to a value greater than 1 (the default) up to 64 (the maximum). innodb_buffer_pool_size ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.06664034724235535, 0.09443206340074539, 0.22728025913238525, 0.4595507085323334, 0.15209653973579407]
Choice: 1
type: 3, value: 2.0, unit: 
Done flag: False
No warmup - hint counter: 6
{'sequence': '2, 3, 4 or 8', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.5274993777275085, 0.18198107182979584, 0.1537662297487259, 0.11219039559364319, 0.024562908336520195]}
Decision: Deciding weight of TuningHint(doc_id=21, param=<re.Match object; span=(17, 40), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 1), match='2'>, recommendation='2, 3, 4 or 8', passage='you can increase innodb_buffer_pool_size, and you can divide the InnoDB buffer pool into multiple regions by setting innodb_buffer_pool_instances to 2, 3, 4 or 8. As long as innodb_buffer_pool_size is set high enough, and you have enough memory available in your MySQL database server. This increases\nInnoDB read/write threads.\nTo enable multiple buffer pool instances, set the innodb_buffer_pool_instances configuration option to a value greater than 1 (the default) up to 64 (the maximum). innodb_buffer_pool_size ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.024562908336520195, 0.5274993777275085, 0.18198107182979584, 0.1537662297487259, 0.11219039559364319]
--- Tuning Updates ---
Minimal time (ms): 0.015606064446828216
Achieved with configuration: {'innodb_buffer_pool_size': '16000000'}
Maximal time (ms): 0.5468849016694222
Achieved with configuration: {'innodb_buffer_pool_size': '20G'}
Decision: Deciding adaption of TuningHint(doc_id=21, param=<re.Match object; span=(17, 40), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 1), match='2'>, recommendation='2, 3, 4 or 8', passage='you can increase innodb_buffer_pool_size, and you can divide the InnoDB buffer pool into multiple regions by setting innodb_buffer_pool_instances to 2, 3, 4 or 8. As long as innodb_buffer_pool_size is set high enough, and you have enough memory available in your MySQL database server. This increases\nInnoDB read/write threads.\nTo enable multiple buffer pool instances, set the innodb_buffer_pool_instances configuration option to a value greater than 1 (the default) up to 64 (the maximum). innodb_buffer_pool_size ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.06664034724235535, 0.09443206340074539, 0.22728025913238525, 0.4595507085323334, 0.15209653973579407]
Choice: 0
type: 3, value: 2.0, unit: 
Done flag: False
Decision: Deciding weight of TuningHint(doc_id=21, param=<re.Match object; span=(17, 40), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(0, 1), match='2'>, recommendation='2, 3, 4 or 8', passage='you can increase innodb_buffer_pool_size, and you can divide the InnoDB buffer pool into multiple regions by setting innodb_buffer_pool_instances to 2, 3, 4 or 8. As long as innodb_buffer_pool_size is set high enough, and you have enough memory available in your MySQL database server. This increases\nInnoDB read/write threads.\nTo enable multiple buffer pool instances, set the innodb_buffer_pool_instances configuration option to a value greater than 1 (the default) up to 64 (the maximum). innodb_buffer_pool_size ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.024562908336520195, 0.5274993777275085, 0.18198107182979584, 0.1537662297487259, 0.11219039559364319]
Choice: 0
Trying assigning innodb_buffer_pool_size to 0
Adding assignment ('innodb_buffer_pool_size', '0') with weight 1
Assignment ('innodb_buffer_pool_size', '0') extracted from "you can increase innodb_buffer_pool_size, and you can divide the InnoDB buffer pool into multiple regions by setting innodb_buffer_pool_instances to 2, 3, 4 or 8. As long as innodb_buffer_pool_size is set high enough, and you have enough memory available in your MySQL database server. This increases
InnoDB read/write threads.
To enable multiple buffer pool instances, set the innodb_buffer_pool_instances configuration option to a value greater than 1 (the default) up to 64 (the maximum). innodb_buffer_pool_size "
Hint counter: 7
Episode hint counter before: 1
Episode hint counter: 2
Hints per episode: 5
Done flag: False
No warmup - hint counter: 7
{'sequence': '2, 3, 4 or 8', 'labels': ['Increase recommendation', 'Use recommendation', 'Increase recommendation strongly', 'Decrease recommendation', 'Decrease recommendation strongly'], 'scores': [0.4595507085323334, 0.22728025913238525, 0.15209653973579407, 0.09443206340074539, 0.06664034724235535]}
Decision: Deciding adaption of TuningHint(doc_id=21, param=<re.Match object; span=(17, 40), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(3, 4), match='3'>, recommendation='2, 3, 4 or 8', passage='you can increase innodb_buffer_pool_size, and you can divide the InnoDB buffer pool into multiple regions by setting innodb_buffer_pool_instances to 2, 3, 4 or 8. As long as innodb_buffer_pool_size is set high enough, and you have enough memory available in your MySQL database server. This increases\nInnoDB read/write threads.\nTo enable multiple buffer pool instances, set the innodb_buffer_pool_instances configuration option to a value greater than 1 (the default) up to 64 (the maximum). innodb_buffer_pool_size ', float_val=3.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.06664034724235535, 0.09443206340074539, 0.22728025913238525, 0.4595507085323334, 0.15209653973579407]
Choice: 1
type: 3, value: 3.0, unit: 
Done flag: False
No warmup - hint counter: 7
{'sequence': '2, 3, 4 or 8', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.5274993777275085, 0.18198107182979584, 0.1537662297487259, 0.11219039559364319, 0.024562908336520195]}
Decision: Deciding weight of TuningHint(doc_id=21, param=<re.Match object; span=(17, 40), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(3, 4), match='3'>, recommendation='2, 3, 4 or 8', passage='you can increase innodb_buffer_pool_size, and you can divide the InnoDB buffer pool into multiple regions by setting innodb_buffer_pool_instances to 2, 3, 4 or 8. As long as innodb_buffer_pool_size is set high enough, and you have enough memory available in your MySQL database server. This increases\nInnoDB read/write threads.\nTo enable multiple buffer pool instances, set the innodb_buffer_pool_instances configuration option to a value greater than 1 (the default) up to 64 (the maximum). innodb_buffer_pool_size ', float_val=3.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.024562908336520195, 0.5274993777275085, 0.18198107182979584, 0.1537662297487259, 0.11219039559364319]
Choice: 0
Trying assigning innodb_buffer_pool_size to 1
Assignment ('innodb_buffer_pool_size', '1') was rejected
Hint counter: 8
Episode hint counter before: 2
Episode hint counter: 3
Hints per episode: 5
Done flag: False
No warmup - hint counter: 8
{'sequence': '2, 3, 4 or 8', 'labels': ['Increase recommendation', 'Use recommendation', 'Increase recommendation strongly', 'Decrease recommendation', 'Decrease recommendation strongly'], 'scores': [0.4595507085323334, 0.22728025913238525, 0.15209653973579407, 0.09443206340074539, 0.06664034724235535]}
Decision: Deciding adaption of TuningHint(doc_id=21, param=<re.Match object; span=(17, 40), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(6, 7), match='4'>, recommendation='2, 3, 4 or 8', passage='you can increase innodb_buffer_pool_size, and you can divide the InnoDB buffer pool into multiple regions by setting innodb_buffer_pool_instances to 2, 3, 4 or 8. As long as innodb_buffer_pool_size is set high enough, and you have enough memory available in your MySQL database server. This increases\nInnoDB read/write threads.\nTo enable multiple buffer pool instances, set the innodb_buffer_pool_instances configuration option to a value greater than 1 (the default) up to 64 (the maximum). innodb_buffer_pool_size ', float_val=4.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.06664034724235535, 0.09443206340074539, 0.22728025913238525, 0.4595507085323334, 0.15209653973579407]
Choice: 4
type: 3, value: 4.0, unit: 
Done flag: False
No warmup - hint counter: 8
{'sequence': '2, 3, 4 or 8', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.5274993777275085, 0.18198107182979584, 0.1537662297487259, 0.11219039559364319, 0.024562908336520195]}
Decision: Deciding weight of TuningHint(doc_id=21, param=<re.Match object; span=(17, 40), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(6, 7), match='4'>, recommendation='2, 3, 4 or 8', passage='you can increase innodb_buffer_pool_size, and you can divide the InnoDB buffer pool into multiple regions by setting innodb_buffer_pool_instances to 2, 3, 4 or 8. As long as innodb_buffer_pool_size is set high enough, and you have enough memory available in your MySQL database server. This increases\nInnoDB read/write threads.\nTo enable multiple buffer pool instances, set the innodb_buffer_pool_instances configuration option to a value greater than 1 (the default) up to 64 (the maximum). innodb_buffer_pool_size ', float_val=4.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.024562908336520195, 0.5274993777275085, 0.18198107182979584, 0.1537662297487259, 0.11219039559364319]
--- Tuning Updates ---
Minimal time (ms): 0.015606064446828216
Achieved with configuration: {'innodb_buffer_pool_size': '16000000'}
Maximal time (ms): 0.5468849016694222
Achieved with configuration: {'innodb_buffer_pool_size': '20G'}
Decision: Deciding adaption of TuningHint(doc_id=21, param=<re.Match object; span=(17, 40), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(6, 7), match='4'>, recommendation='2, 3, 4 or 8', passage='you can increase innodb_buffer_pool_size, and you can divide the InnoDB buffer pool into multiple regions by setting innodb_buffer_pool_instances to 2, 3, 4 or 8. As long as innodb_buffer_pool_size is set high enough, and you have enough memory available in your MySQL database server. This increases\nInnoDB read/write threads.\nTo enable multiple buffer pool instances, set the innodb_buffer_pool_instances configuration option to a value greater than 1 (the default) up to 64 (the maximum). innodb_buffer_pool_size ', float_val=4.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.06664034724235535, 0.09443206340074539, 0.22728025913238525, 0.4595507085323334, 0.15209653973579407]
Choice: 2
type: 3, value: 4.0, unit: 
Done flag: False
Decision: Deciding weight of TuningHint(doc_id=21, param=<re.Match object; span=(17, 40), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(6, 7), match='4'>, recommendation='2, 3, 4 or 8', passage='you can increase innodb_buffer_pool_size, and you can divide the InnoDB buffer pool into multiple regions by setting innodb_buffer_pool_instances to 2, 3, 4 or 8. As long as innodb_buffer_pool_size is set high enough, and you have enough memory available in your MySQL database server. This increases\nInnoDB read/write threads.\nTo enable multiple buffer pool instances, set the innodb_buffer_pool_instances configuration option to a value greater than 1 (the default) up to 64 (the maximum). innodb_buffer_pool_size ', float_val=4.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.024562908336520195, 0.5274993777275085, 0.18198107182979584, 0.1537662297487259, 0.11219039559364319]
Choice: 0
Trying assigning innodb_buffer_pool_size to 4
Assignment ('innodb_buffer_pool_size', '4') was rejected
Hint counter: 9
Episode hint counter before: 3
Episode hint counter: 4
Hints per episode: 5
Done flag: False
No warmup - hint counter: 9
{'sequence': '2, 3, 4 or 8', 'labels': ['Increase recommendation', 'Use recommendation', 'Increase recommendation strongly', 'Decrease recommendation', 'Decrease recommendation strongly'], 'scores': [0.4595507085323334, 0.22728025913238525, 0.15209653973579407, 0.09443206340074539, 0.06664034724235535]}
Decision: Deciding adaption of TuningHint(doc_id=21, param=<re.Match object; span=(17, 40), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(11, 12), match='8'>, recommendation='2, 3, 4 or 8', passage='you can increase innodb_buffer_pool_size, and you can divide the InnoDB buffer pool into multiple regions by setting innodb_buffer_pool_instances to 2, 3, 4 or 8. As long as innodb_buffer_pool_size is set high enough, and you have enough memory available in your MySQL database server. This increases\nInnoDB read/write threads.\nTo enable multiple buffer pool instances, set the innodb_buffer_pool_instances configuration option to a value greater than 1 (the default) up to 64 (the maximum). innodb_buffer_pool_size ', float_val=8.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.06664034724235535, 0.09443206340074539, 0.22728025913238525, 0.4595507085323334, 0.15209653973579407]
Choice: 0
type: 3, value: 8.0, unit: 
Done flag: False
No warmup - hint counter: 9
{'sequence': '2, 3, 4 or 8', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.5274993777275085, 0.18198107182979584, 0.1537662297487259, 0.11219039559364319, 0.024562908336520195]}
Decision: Deciding weight of TuningHint(doc_id=21, param=<re.Match object; span=(17, 40), match='innodb_buffer_pool_size'>, value=<re.Match object; span=(11, 12), match='8'>, recommendation='2, 3, 4 or 8', passage='you can increase innodb_buffer_pool_size, and you can divide the InnoDB buffer pool into multiple regions by setting innodb_buffer_pool_instances to 2, 3, 4 or 8. As long as innodb_buffer_pool_size is set high enough, and you have enough memory available in your MySQL database server. This increases\nInnoDB read/write threads.\nTo enable multiple buffer pool instances, set the innodb_buffer_pool_instances configuration option to a value greater than 1 (the default) up to 64 (the maximum). innodb_buffer_pool_size ', float_val=8.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.024562908336520195, 0.5274993777275085, 0.18198107182979584, 0.1537662297487259, 0.11219039559364319]
Choice: 1
Trying assigning innodb_buffer_pool_size to 2
Assignment ('innodb_buffer_pool_size', '2') was rejected
Hint counter: 10
Episode hint counter before: 4
Episode hint counter: 5
Hints per episode: 5
Episode finished!
Done flag: True
Finalizing episode!
Weighted hints: defaultdict(<function NlpTuningEnv._finalize_episode.<locals>.<lambda> at 0x7f8617a6eb00>, {('innodb_buffer_pool_size', '0'): 17})
Selected configurations: [{'innodb_buffer_pool_size': '0'}, {'innodb_buffer_pool_size': '0'}]
Trying configuration: {'innodb_buffer_pool_size': '0'}
--- Tuning Updates ---
Minimal time (ms): 0.015606064446828216
Achieved with configuration: {'innodb_buffer_pool_size': '16000000'}
Maximal time (ms): 0.5468849016694222
Achieved with configuration: {'innodb_buffer_pool_size': '20G'}
Reward -0.5127796864987553 with {'innodb_buffer_pool_size': '0'}
Trying configuration: {'innodb_buffer_pool_size': '0'}
--- Tuning Updates ---
Minimal time (ms): 0.015606064446828216
Achieved with configuration: {'innodb_buffer_pool_size': '16000000'}
Maximal time (ms): 0.5810819296720631
Achieved with configuration: {'innodb_buffer_pool_size': '0'}
Reward -0.05103659610198297 with {'innodb_buffer_pool_size': '0'}
Obtained 0 by configuration {}
Achieved unscaled reward of 0 using {}.
No warmup - hint counter: 10
{'sequence': '8”', 'labels': ['Use recommendation', 'Increase recommendation strongly', 'Increase recommendation', 'Decrease recommendation strongly', 'Decrease recommendation'], 'scores': [0.2904800474643707, 0.19919461011886597, 0.18495337665081024, 0.16769187152385712, 0.15768012404441833]}
Decision: Deciding adaption of TuningHint(doc_id=4, param=<re.Match object; span=(133, 161), match='innodb_buffer_pool_instances'>, value=<re.Match object; span=(0, 1), match='8'>, recommendation='8”', passage='innodb_stats_on_metadata\nSetting this to “OFF” avoids unnecessary updating of InnoDB statistics and can greatly improve read speeds.\ninnodb_buffer_pool_instances\nA best practice is to set this to “8” unless the buffer pool size is < 1G, in which case set to “1”. innodb_change_buffer_max_size ', float_val=8.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.16769187152385712, 0.15768012404441833, 0.2904800474643707, 0.18495337665081024, 0.19919461011886597]
--- Tuning Updates ---
Minimal time (ms): 0.015606064446828216
Achieved with configuration: {'innodb_buffer_pool_size': '16000000'}
Maximal time (ms): 0.5810819296720631
Achieved with configuration: {'innodb_buffer_pool_size': '0'}
Decision: Deciding adaption of TuningHint(doc_id=4, param=<re.Match object; span=(133, 161), match='innodb_buffer_pool_instances'>, value=<re.Match object; span=(0, 1), match='8'>, recommendation='8”', passage='innodb_stats_on_metadata\nSetting this to “OFF” avoids unnecessary updating of InnoDB statistics and can greatly improve read speeds.\ninnodb_buffer_pool_instances\nA best practice is to set this to “8” unless the buffer pool size is < 1G, in which case set to “1”. innodb_change_buffer_max_size ', float_val=8.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.16769187152385712, 0.15768012404441833, 0.2904800474643707, 0.18495337665081024, 0.19919461011886597]
Choice: 3
type: 3, value: 8.0, unit: 
Done flag: False
No warmup - hint counter: 10
{'sequence': '8”', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.4708855450153351, 0.20985731482505798, 0.16617700457572937, 0.135033518075943, 0.018046677112579346]}
Decision: Deciding weight of TuningHint(doc_id=4, param=<re.Match object; span=(133, 161), match='innodb_buffer_pool_instances'>, value=<re.Match object; span=(0, 1), match='8'>, recommendation='8”', passage='innodb_stats_on_metadata\nSetting this to “OFF” avoids unnecessary updating of InnoDB statistics and can greatly improve read speeds.\ninnodb_buffer_pool_instances\nA best practice is to set this to “8” unless the buffer pool size is < 1G, in which case set to “1”. innodb_change_buffer_max_size ', float_val=8.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.018046677112579346, 0.4708855450153351, 0.20985731482505798, 0.16617700457572937, 0.135033518075943]
--- Tuning Updates ---
Minimal time (ms): 0.015606064446828216
Achieved with configuration: {'innodb_buffer_pool_size': '16000000'}
Maximal time (ms): 0.5810819296720631
Achieved with configuration: {'innodb_buffer_pool_size': '0'}
Decision: Deciding adaption of TuningHint(doc_id=4, param=<re.Match object; span=(133, 161), match='innodb_buffer_pool_instances'>, value=<re.Match object; span=(0, 1), match='8'>, recommendation='8”', passage='innodb_stats_on_metadata\nSetting this to “OFF” avoids unnecessary updating of InnoDB statistics and can greatly improve read speeds.\ninnodb_buffer_pool_instances\nA best practice is to set this to “8” unless the buffer pool size is < 1G, in which case set to “1”. innodb_change_buffer_max_size ', float_val=8.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.16769187152385712, 0.15768012404441833, 0.2904800474643707, 0.18495337665081024, 0.19919461011886597]
Choice: 3
type: 3, value: 8.0, unit: 
Done flag: False
Decision: Deciding weight of TuningHint(doc_id=4, param=<re.Match object; span=(133, 161), match='innodb_buffer_pool_instances'>, value=<re.Match object; span=(0, 1), match='8'>, recommendation='8”', passage='innodb_stats_on_metadata\nSetting this to “OFF” avoids unnecessary updating of InnoDB statistics and can greatly improve read speeds.\ninnodb_buffer_pool_instances\nA best practice is to set this to “8” unless the buffer pool size is < 1G, in which case set to “1”. innodb_change_buffer_max_size ', float_val=8.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.018046677112579346, 0.4708855450153351, 0.20985731482505798, 0.16617700457572937, 0.135033518075943]
Choice: 2
Trying assigning innodb_buffer_pool_instances to 16
Adding assignment ('innodb_buffer_pool_instances', '16') with weight 4
Assignment ('innodb_buffer_pool_instances', '16') extracted from "innodb_stats_on_metadata
Setting this to “OFF” avoids unnecessary updating of InnoDB statistics and can greatly improve read speeds.
innodb_buffer_pool_instances
A best practice is to set this to “8” unless the buffer pool size is < 1G, in which case set to “1”. innodb_change_buffer_max_size "
Hint counter: 11
Episode hint counter before: 0
Episode hint counter: 1
Hints per episode: 5
Done flag: False
No warmup - hint counter: 11
{'sequence': '8 to 32', 'labels': ['Increase recommendation', 'Decrease recommendation', 'Increase recommendation strongly', 'Use recommendation', 'Decrease recommendation strongly'], 'scores': [0.37097206711769104, 0.22795993089675903, 0.15152214467525482, 0.14261221885681152, 0.10693367570638657]}
Decision: Deciding adaption of TuningHint(doc_id=4, param=<re.Match object; span=(110, 138), match='innodb_buffer_pool_instances'>, value=<re.Match object; span=(0, 1), match='8'>, recommendation='8 to 32', passage='Cloud storage, analytic queries, concurrent workload, parallel query enabled (Ali Cloud), 64 cores, o_direct.\ninnodb_buffer_pool_instances (change from 8 to 32)\ninnodb_read_io_threads (change from 4 to 16)\nUnder a 100% physical I/O workload this resulted in a 4x speedup. innodb_write_io_threads ', float_val=8.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.10693367570638657, 0.22795993089675903, 0.14261221885681152, 0.37097206711769104, 0.15152214467525482]
Choice: 2
type: 3, value: 8.0, unit: 
Done flag: False
No warmup - hint counter: 11
{'sequence': '8 to 32', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.49498820304870605, 0.196913942694664, 0.15809929370880127, 0.1278258115053177, 0.022172732278704643]}
Decision: Deciding weight of TuningHint(doc_id=4, param=<re.Match object; span=(110, 138), match='innodb_buffer_pool_instances'>, value=<re.Match object; span=(0, 1), match='8'>, recommendation='8 to 32', passage='Cloud storage, analytic queries, concurrent workload, parallel query enabled (Ali Cloud), 64 cores, o_direct.\ninnodb_buffer_pool_instances (change from 8 to 32)\ninnodb_read_io_threads (change from 4 to 16)\nUnder a 100% physical I/O workload this resulted in a 4x speedup. innodb_write_io_threads ', float_val=8.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.022172732278704643, 0.49498820304870605, 0.196913942694664, 0.15809929370880127, 0.1278258115053177]
Choice: 3
Trying assigning innodb_buffer_pool_instances to 8
Assignment ('innodb_buffer_pool_instances', '8') was rejected
Hint counter: 12
Episode hint counter before: 1
Episode hint counter: 2
Hints per episode: 5
Done flag: False
No warmup - hint counter: 12
{'sequence': '8 to 32', 'labels': ['Increase recommendation', 'Decrease recommendation', 'Increase recommendation strongly', 'Use recommendation', 'Decrease recommendation strongly'], 'scores': [0.37097206711769104, 0.22795993089675903, 0.15152214467525482, 0.14261221885681152, 0.10693367570638657]}
Decision: Deciding adaption of TuningHint(doc_id=4, param=<re.Match object; span=(110, 138), match='innodb_buffer_pool_instances'>, value=<re.Match object; span=(5, 7), match='32'>, recommendation='8 to 32', passage='Cloud storage, analytic queries, concurrent workload, parallel query enabled (Ali Cloud), 64 cores, o_direct.\ninnodb_buffer_pool_instances (change from 8 to 32)\ninnodb_read_io_threads (change from 4 to 16)\nUnder a 100% physical I/O workload this resulted in a 4x speedup. innodb_write_io_threads ', float_val=32.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.10693367570638657, 0.22795993089675903, 0.14261221885681152, 0.37097206711769104, 0.15152214467525482]
Choice: 0
type: 3, value: 32.0, unit: 
Done flag: False
No warmup - hint counter: 12
{'sequence': '8 to 32', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.49498820304870605, 0.196913942694664, 0.15809929370880127, 0.1278258115053177, 0.022172732278704643]}
Decision: Deciding weight of TuningHint(doc_id=4, param=<re.Match object; span=(110, 138), match='innodb_buffer_pool_instances'>, value=<re.Match object; span=(5, 7), match='32'>, recommendation='8 to 32', passage='Cloud storage, analytic queries, concurrent workload, parallel query enabled (Ali Cloud), 64 cores, o_direct.\ninnodb_buffer_pool_instances (change from 8 to 32)\ninnodb_read_io_threads (change from 4 to 16)\nUnder a 100% physical I/O workload this resulted in a 4x speedup. innodb_write_io_threads ', float_val=32.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.022172732278704643, 0.49498820304870605, 0.196913942694664, 0.15809929370880127, 0.1278258115053177]
--- Tuning Updates ---
Minimal time (ms): 0.015606064446828216
Achieved with configuration: {'innodb_buffer_pool_size': '16000000'}
Maximal time (ms): 0.5810819296720631
Achieved with configuration: {'innodb_buffer_pool_size': '0'}
Decision: Deciding adaption of TuningHint(doc_id=4, param=<re.Match object; span=(110, 138), match='innodb_buffer_pool_instances'>, value=<re.Match object; span=(5, 7), match='32'>, recommendation='8 to 32', passage='Cloud storage, analytic queries, concurrent workload, parallel query enabled (Ali Cloud), 64 cores, o_direct.\ninnodb_buffer_pool_instances (change from 8 to 32)\ninnodb_read_io_threads (change from 4 to 16)\nUnder a 100% physical I/O workload this resulted in a 4x speedup. innodb_write_io_threads ', float_val=32.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.10693367570638657, 0.22795993089675903, 0.14261221885681152, 0.37097206711769104, 0.15152214467525482]
Choice: 3
type: 3, value: 32.0, unit: 
Done flag: False
Decision: Deciding weight of TuningHint(doc_id=4, param=<re.Match object; span=(110, 138), match='innodb_buffer_pool_instances'>, value=<re.Match object; span=(5, 7), match='32'>, recommendation='8 to 32', passage='Cloud storage, analytic queries, concurrent workload, parallel query enabled (Ali Cloud), 64 cores, o_direct.\ninnodb_buffer_pool_instances (change from 8 to 32)\ninnodb_read_io_threads (change from 4 to 16)\nUnder a 100% physical I/O workload this resulted in a 4x speedup. innodb_write_io_threads ', float_val=32.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.022172732278704643, 0.49498820304870605, 0.196913942694664, 0.15809929370880127, 0.1278258115053177]
Choice: 1
Trying assigning innodb_buffer_pool_instances to 64
Adding assignment ('innodb_buffer_pool_instances', '64') with weight 2
Assignment ('innodb_buffer_pool_instances', '64') extracted from "Cloud storage, analytic queries, concurrent workload, parallel query enabled (Ali Cloud), 64 cores, o_direct.
innodb_buffer_pool_instances (change from 8 to 32)
innodb_read_io_threads (change from 4 to 16)
Under a 100% physical I/O workload this resulted in a 4x speedup. innodb_write_io_threads "
Hint counter: 13
Episode hint counter before: 2
Episode hint counter: 3
Hints per episode: 5
Done flag: False
No warmup - hint counter: 13
{'sequence': '8” check_proxy_users', 'labels': ['Use recommendation', 'Increase recommendation', 'Increase recommendation strongly', 'Decrease recommendation', 'Decrease recommendation strongly'], 'scores': [0.37164628505706787, 0.2474888414144516, 0.19804908335208893, 0.1040181890130043, 0.0787975937128067]}
Decision: Deciding adaption of TuningHint(doc_id=4, param=<re.Match object; span=(186, 214), match='innodb_buffer_pool_instances'>, value=<re.Match object; span=(0, 1), match='8'>, recommendation='8” check_proxy_users', passage='You mileage will vary, test before production usage.\nMost query workloads are not 100% PIO, so actual benefits likely much lower.\nCheers,\nJim\nJune 30, 2020 at 2:08 pm\nJie Zhou\nReply\nWhy innodb_buffer_pool_instances has a best practice to set it to “8” check_proxy_users ', float_val=8.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.0787975937128067, 0.1040181890130043, 0.37164628505706787, 0.2474888414144516, 0.19804908335208893]
Choice: 3
type: 3, value: 8.0, unit: 
Done flag: False
No warmup - hint counter: 13
{'sequence': '8” check_proxy_users', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.48341599106788635, 0.2094808965921402, 0.16588033735752106, 0.13075950741767883, 0.010463275946676731]}
Decision: Deciding weight of TuningHint(doc_id=4, param=<re.Match object; span=(186, 214), match='innodb_buffer_pool_instances'>, value=<re.Match object; span=(0, 1), match='8'>, recommendation='8” check_proxy_users', passage='You mileage will vary, test before production usage.\nMost query workloads are not 100% PIO, so actual benefits likely much lower.\nCheers,\nJim\nJune 30, 2020 at 2:08 pm\nJie Zhou\nReply\nWhy innodb_buffer_pool_instances has a best practice to set it to “8” check_proxy_users ', float_val=8.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.010463275946676731, 0.48341599106788635, 0.2094808965921402, 0.16588033735752106, 0.13075950741767883]
Choice: 3
Trying assigning innodb_buffer_pool_instances to 16
Adding assignment ('innodb_buffer_pool_instances', '16') with weight 8
Assignment ('innodb_buffer_pool_instances', '16') extracted from "You mileage will vary, test before production usage.
Most query workloads are not 100% PIO, so actual benefits likely much lower.
Cheers,
Jim
June 30, 2020 at 2:08 pm
Jie Zhou
Reply
Why innodb_buffer_pool_instances has a best practice to set it to “8” check_proxy_users "
Hint counter: 14
Episode hint counter before: 3
Episode hint counter: 4
Hints per episode: 5
Done flag: False
No warmup - hint counter: 14
{'sequence': '8', 'labels': ['Use recommendation', 'Increase recommendation strongly', 'Decrease recommendation strongly', 'Increase recommendation', 'Decrease recommendation'], 'scores': [0.26618632674217224, 0.21739822626113892, 0.18449042737483978, 0.1797831505537033, 0.15214183926582336]}
Decision: Deciding adaption of TuningHint(doc_id=4, param=<re.Match object; span=(41, 69), match='innodb_buffer_pool_instances'>, value=<re.Match object; span=(0, 1), match='8'>, recommendation='8', passage="Hi Jie Zhou. The MySQL default is to set innodb_buffer_pool_instances to 8 (in MySQL version 5.7 and up) as this is a good starting point for most general use cases. As per the MySQL documentation, this option takes effect only when you set innodb_buffer_pool_size to a size of 1GB or more. The total size you specify is divided among all the buffer pools. For best efficiency, specify a combination of innodb_buffer_pool_instances and innodb_buffer_pool_size so that each buffer pool instance is at least 1GB.\nJuly 8, 2020 at 1:11 pm\nLeave a Reply\t\t\t\t\tCancel reply\nHow Can We Help?\nPercona's experts can maximize your application performance with our open source database support, managed services or consulting.\nContact us innodb_buffer_pool_size ", float_val=8.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.18449042737483978, 0.15214183926582336, 0.26618632674217224, 0.1797831505537033, 0.21739822626113892]
Choice: 1
type: 3, value: 8.0, unit: 
Done flag: False
No warmup - hint counter: 14
{'sequence': '8', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.4621095061302185, 0.20298480987548828, 0.16258886456489563, 0.14552511274814606, 0.02679176814854145]}
Decision: Deciding weight of TuningHint(doc_id=4, param=<re.Match object; span=(41, 69), match='innodb_buffer_pool_instances'>, value=<re.Match object; span=(0, 1), match='8'>, recommendation='8', passage="Hi Jie Zhou. The MySQL default is to set innodb_buffer_pool_instances to 8 (in MySQL version 5.7 and up) as this is a good starting point for most general use cases. As per the MySQL documentation, this option takes effect only when you set innodb_buffer_pool_size to a size of 1GB or more. The total size you specify is divided among all the buffer pools. For best efficiency, specify a combination of innodb_buffer_pool_instances and innodb_buffer_pool_size so that each buffer pool instance is at least 1GB.\nJuly 8, 2020 at 1:11 pm\nLeave a Reply\t\t\t\t\tCancel reply\nHow Can We Help?\nPercona's experts can maximize your application performance with our open source database support, managed services or consulting.\nContact us innodb_buffer_pool_size ", float_val=8.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.02679176814854145, 0.4621095061302185, 0.20298480987548828, 0.16258886456489563, 0.14552511274814606]
--- Tuning Updates ---
Minimal time (ms): 0.015606064446828216
Achieved with configuration: {'innodb_buffer_pool_size': '16000000'}
Maximal time (ms): 0.5810819296720631
Achieved with configuration: {'innodb_buffer_pool_size': '0'}
Decision: Deciding adaption of TuningHint(doc_id=4, param=<re.Match object; span=(41, 69), match='innodb_buffer_pool_instances'>, value=<re.Match object; span=(0, 1), match='8'>, recommendation='8', passage="Hi Jie Zhou. The MySQL default is to set innodb_buffer_pool_instances to 8 (in MySQL version 5.7 and up) as this is a good starting point for most general use cases. As per the MySQL documentation, this option takes effect only when you set innodb_buffer_pool_size to a size of 1GB or more. The total size you specify is divided among all the buffer pools. For best efficiency, specify a combination of innodb_buffer_pool_instances and innodb_buffer_pool_size so that each buffer pool instance is at least 1GB.\nJuly 8, 2020 at 1:11 pm\nLeave a Reply\t\t\t\t\tCancel reply\nHow Can We Help?\nPercona's experts can maximize your application performance with our open source database support, managed services or consulting.\nContact us innodb_buffer_pool_size ", float_val=8.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.18449042737483978, 0.15214183926582336, 0.26618632674217224, 0.1797831505537033, 0.21739822626113892]
Choice: 0
type: 3, value: 8.0, unit: 
Done flag: False
Decision: Deciding weight of TuningHint(doc_id=4, param=<re.Match object; span=(41, 69), match='innodb_buffer_pool_instances'>, value=<re.Match object; span=(0, 1), match='8'>, recommendation='8', passage="Hi Jie Zhou. The MySQL default is to set innodb_buffer_pool_instances to 8 (in MySQL version 5.7 and up) as this is a good starting point for most general use cases. As per the MySQL documentation, this option takes effect only when you set innodb_buffer_pool_size to a size of 1GB or more. The total size you specify is divided among all the buffer pools. For best efficiency, specify a combination of innodb_buffer_pool_instances and innodb_buffer_pool_size so that each buffer pool instance is at least 1GB.\nJuly 8, 2020 at 1:11 pm\nLeave a Reply\t\t\t\t\tCancel reply\nHow Can We Help?\nPercona's experts can maximize your application performance with our open source database support, managed services or consulting.\nContact us innodb_buffer_pool_size ", float_val=8.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.02679176814854145, 0.4621095061302185, 0.20298480987548828, 0.16258886456489563, 0.14552511274814606]
Choice: 2
Trying assigning innodb_buffer_pool_instances to 2
Adding assignment ('innodb_buffer_pool_instances', '2') with weight 4
Assignment ('innodb_buffer_pool_instances', '2') extracted from "Hi Jie Zhou. The MySQL default is to set innodb_buffer_pool_instances to 8 (in MySQL version 5.7 and up) as this is a good starting point for most general use cases. As per the MySQL documentation, this option takes effect only when you set innodb_buffer_pool_size to a size of 1GB or more. The total size you specify is divided among all the buffer pools. For best efficiency, specify a combination of innodb_buffer_pool_instances and innodb_buffer_pool_size so that each buffer pool instance is at least 1GB.
July 8, 2020 at 1:11 pm
Leave a Reply					Cancel reply
How Can We Help?
Percona's experts can maximize your application performance with our open source database support, managed services or consulting.
Contact us innodb_buffer_pool_size "
Hint counter: 15
Episode hint counter before: 4
Episode hint counter: 5
Hints per episode: 5
Episode finished!
Done flag: True
Finalizing episode!
Weighted hints: defaultdict(<function NlpTuningEnv._finalize_episode.<locals>.<lambda> at 0x7f8617a6eef0>, {('innodb_buffer_pool_instances', '16'): 12, ('innodb_buffer_pool_instances', '64'): 2, ('innodb_buffer_pool_instances', '2'): 4})
Selected configurations: [{'innodb_buffer_pool_instances': '16'}, {'innodb_buffer_pool_instances': '64'}]
Trying configuration: {'innodb_buffer_pool_instances': '16'}
--- Tuning Updates ---
Minimal time (ms): 0.015606064446828216
Achieved with configuration: {'innodb_buffer_pool_size': '16000000'}
Maximal time (ms): 0.5810819296720631
Achieved with configuration: {'innodb_buffer_pool_size': '0'}
Reward -0.034759032096746134 with {'innodb_buffer_pool_instances': '16'}
Trying configuration: {'innodb_buffer_pool_instances': '64'}
--- Tuning Updates ---
Minimal time (ms): 0.015606064446828216
Achieved with configuration: {'innodb_buffer_pool_size': '16000000'}
Maximal time (ms): 0.5810819296720631
Achieved with configuration: {'innodb_buffer_pool_size': '0'}
Reward -0.4674417851895858 with {'innodb_buffer_pool_instances': '64'}
Obtained 0 by configuration {}
Achieved unscaled reward of 0 using {}.
No warmup - hint counter: 15
{'sequence': '8', 'labels': ['Use recommendation', 'Increase recommendation strongly', 'Decrease recommendation strongly', 'Increase recommendation', 'Decrease recommendation'], 'scores': [0.26618632674217224, 0.21739822626113892, 0.18449042737483978, 0.1797831505537033, 0.15214183926582336]}
Decision: Deciding adaption of TuningHint(doc_id=15, param=<re.Match object; span=(42, 70), match='innodb_buffer_pool_instances'>, value=<re.Match object; span=(0, 1), match='8'>, recommendation='8', passage='query_cache_size = 0\nquery_cache_type = 0\ninnodb_buffer_pool_instances = 8 (or 1 if innodb_buffer_pool_size < 1GB)\ninnodb_file_per_table=ON\ninnodb_stats_on_metadata = OFF innodb_disable_sort_file_cache ', float_val=8.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.18449042737483978, 0.15214183926582336, 0.26618632674217224, 0.1797831505537033, 0.21739822626113892]
--- Tuning Updates ---
Minimal time (ms): 0.015606064446828216
Achieved with configuration: {'innodb_buffer_pool_size': '16000000'}
Maximal time (ms): 0.5810819296720631
Achieved with configuration: {'innodb_buffer_pool_size': '0'}
Decision: Deciding adaption of TuningHint(doc_id=15, param=<re.Match object; span=(42, 70), match='innodb_buffer_pool_instances'>, value=<re.Match object; span=(0, 1), match='8'>, recommendation='8', passage='query_cache_size = 0\nquery_cache_type = 0\ninnodb_buffer_pool_instances = 8 (or 1 if innodb_buffer_pool_size < 1GB)\ninnodb_file_per_table=ON\ninnodb_stats_on_metadata = OFF innodb_disable_sort_file_cache ', float_val=8.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.18449042737483978, 0.15214183926582336, 0.26618632674217224, 0.1797831505537033, 0.21739822626113892]
Choice: 0
type: 3, value: 8.0, unit: 
Done flag: False
No warmup - hint counter: 15
{'sequence': '8', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.4621095061302185, 0.20298480987548828, 0.16258886456489563, 0.14552511274814606, 0.02679176814854145]}
Decision: Deciding weight of TuningHint(doc_id=15, param=<re.Match object; span=(42, 70), match='innodb_buffer_pool_instances'>, value=<re.Match object; span=(0, 1), match='8'>, recommendation='8', passage='query_cache_size = 0\nquery_cache_type = 0\ninnodb_buffer_pool_instances = 8 (or 1 if innodb_buffer_pool_size < 1GB)\ninnodb_file_per_table=ON\ninnodb_stats_on_metadata = OFF innodb_disable_sort_file_cache ', float_val=8.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.02679176814854145, 0.4621095061302185, 0.20298480987548828, 0.16258886456489563, 0.14552511274814606]
Choice: 4
Trying assigning innodb_buffer_pool_instances to 2
Adding assignment ('innodb_buffer_pool_instances', '2') with weight 16
Assignment ('innodb_buffer_pool_instances', '2') extracted from "query_cache_size = 0
query_cache_type = 0
innodb_buffer_pool_instances = 8 (or 1 if innodb_buffer_pool_size < 1GB)
innodb_file_per_table=ON
innodb_stats_on_metadata = OFF innodb_disable_sort_file_cache "
Hint counter: 16
Episode hint counter before: 0
Episode hint counter: 1
Hints per episode: 5
Done flag: False
No warmup - hint counter: 16
{'sequence': '8', 'labels': ['Use recommendation', 'Increase recommendation strongly', 'Decrease recommendation strongly', 'Increase recommendation', 'Decrease recommendation'], 'scores': [0.26618632674217224, 0.21739822626113892, 0.18449042737483978, 0.1797831505537033, 0.15214183926582336]}
Decision: Deciding adaption of TuningHint(doc_id=15, param=<re.Match object; span=(21, 49), match='innodb_buffer_pool_instances'>, value=<re.Match object; span=(0, 1), match='8'>, recommendation='8', passage='query_cache_type = 0\ninnodb_buffer_pool_instances = 8\ninnodb_buffer_pool_size = 5G\ninnodb_file_per_table = ON\ninnodb_log_file_size = 512M\ninnodb_stats_on_metadata = OFF innodb_disable_sort_file_cache ', float_val=8.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.18449042737483978, 0.15214183926582336, 0.26618632674217224, 0.1797831505537033, 0.21739822626113892]
Choice: 3
type: 3, value: 8.0, unit: 
Done flag: False
No warmup - hint counter: 16
{'sequence': '8', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.4621095061302185, 0.20298480987548828, 0.16258886456489563, 0.14552511274814606, 0.02679176814854145]}
Decision: Deciding weight of TuningHint(doc_id=15, param=<re.Match object; span=(21, 49), match='innodb_buffer_pool_instances'>, value=<re.Match object; span=(0, 1), match='8'>, recommendation='8', passage='query_cache_type = 0\ninnodb_buffer_pool_instances = 8\ninnodb_buffer_pool_size = 5G\ninnodb_file_per_table = ON\ninnodb_log_file_size = 512M\ninnodb_stats_on_metadata = OFF innodb_disable_sort_file_cache ', float_val=8.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.02679176814854145, 0.4621095061302185, 0.20298480987548828, 0.16258886456489563, 0.14552511274814606]
--- Tuning Updates ---
Minimal time (ms): 0.015606064446828216
Achieved with configuration: {'innodb_buffer_pool_size': '16000000'}
Maximal time (ms): 0.5810819296720631
Achieved with configuration: {'innodb_buffer_pool_size': '0'}
Decision: Deciding adaption of TuningHint(doc_id=15, param=<re.Match object; span=(21, 49), match='innodb_buffer_pool_instances'>, value=<re.Match object; span=(0, 1), match='8'>, recommendation='8', passage='query_cache_type = 0\ninnodb_buffer_pool_instances = 8\ninnodb_buffer_pool_size = 5G\ninnodb_file_per_table = ON\ninnodb_log_file_size = 512M\ninnodb_stats_on_metadata = OFF innodb_disable_sort_file_cache ', float_val=8.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.18449042737483978, 0.15214183926582336, 0.26618632674217224, 0.1797831505537033, 0.21739822626113892]
Choice: 4
type: 3, value: 8.0, unit: 
Done flag: False
Decision: Deciding weight of TuningHint(doc_id=15, param=<re.Match object; span=(21, 49), match='innodb_buffer_pool_instances'>, value=<re.Match object; span=(0, 1), match='8'>, recommendation='8', passage='query_cache_type = 0\ninnodb_buffer_pool_instances = 8\ninnodb_buffer_pool_size = 5G\ninnodb_file_per_table = ON\ninnodb_log_file_size = 512M\ninnodb_stats_on_metadata = OFF innodb_disable_sort_file_cache ', float_val=8.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.02679176814854145, 0.4621095061302185, 0.20298480987548828, 0.16258886456489563, 0.14552511274814606]
Choice: 0
Trying assigning innodb_buffer_pool_instances to 32
Assignment ('innodb_buffer_pool_instances', '32') was rejected
Hint counter: 17
Episode hint counter before: 1
Episode hint counter: 2
Hints per episode: 5
Done flag: False
No warmup - hint counter: 17
{'sequence': '1 (the default) up to 64', 'labels': ['Increase recommendation', 'Increase recommendation strongly', 'Use recommendation', 'Decrease recommendation', 'Decrease recommendation strongly'], 'scores': [0.4351285398006439, 0.1901029646396637, 0.17978490889072418, 0.12090014666318893, 0.07408338040113449]}
Decision: Deciding adaption of TuningHint(doc_id=21, param=<re.Match object; span=(117, 145), match='innodb_buffer_pool_instances'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation='1 (the default) up to 64', passage='you can increase innodb_buffer_pool_size, and you can divide the InnoDB buffer pool into multiple regions by setting innodb_buffer_pool_instances to 2, 3, 4 or 8. As long as innodb_buffer_pool_size is set high enough, and you have enough memory available in your MySQL database server. This increases\nInnoDB read/write threads.\nTo enable multiple buffer pool instances, set the innodb_buffer_pool_instances configuration option to a value greater than 1 (the default) up to 64 (the maximum). innodb_buffer_pool_size ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.07408338040113449, 0.12090014666318893, 0.17978490889072418, 0.4351285398006439, 0.1901029646396637]
Choice: 4
type: 3, value: 1.0, unit: 
Done flag: False
No warmup - hint counter: 17
{'sequence': '1 (the default) up to 64', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.4980872571468353, 0.19818918406963348, 0.15659791231155396, 0.12245816737413406, 0.024667495861649513]}
Decision: Deciding weight of TuningHint(doc_id=21, param=<re.Match object; span=(117, 145), match='innodb_buffer_pool_instances'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation='1 (the default) up to 64', passage='you can increase innodb_buffer_pool_size, and you can divide the InnoDB buffer pool into multiple regions by setting innodb_buffer_pool_instances to 2, 3, 4 or 8. As long as innodb_buffer_pool_size is set high enough, and you have enough memory available in your MySQL database server. This increases\nInnoDB read/write threads.\nTo enable multiple buffer pool instances, set the innodb_buffer_pool_instances configuration option to a value greater than 1 (the default) up to 64 (the maximum). innodb_buffer_pool_size ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.024667495861649513, 0.4980872571468353, 0.19818918406963348, 0.15659791231155396, 0.12245816737413406]
Choice: 3
Trying assigning innodb_buffer_pool_instances to 4
Assignment ('innodb_buffer_pool_instances', '4') was rejected
Hint counter: 18
Episode hint counter before: 2
Episode hint counter: 3
Hints per episode: 5
Done flag: False
No warmup - hint counter: 18
{'sequence': '1 (the default) up to 64', 'labels': ['Increase recommendation', 'Increase recommendation strongly', 'Use recommendation', 'Decrease recommendation', 'Decrease recommendation strongly'], 'scores': [0.4351285398006439, 0.1901029646396637, 0.17978490889072418, 0.12090014666318893, 0.07408338040113449]}
Decision: Deciding adaption of TuningHint(doc_id=21, param=<re.Match object; span=(117, 145), match='innodb_buffer_pool_instances'>, value=<re.Match object; span=(22, 24), match='64'>, recommendation='1 (the default) up to 64', passage='you can increase innodb_buffer_pool_size, and you can divide the InnoDB buffer pool into multiple regions by setting innodb_buffer_pool_instances to 2, 3, 4 or 8. As long as innodb_buffer_pool_size is set high enough, and you have enough memory available in your MySQL database server. This increases\nInnoDB read/write threads.\nTo enable multiple buffer pool instances, set the innodb_buffer_pool_instances configuration option to a value greater than 1 (the default) up to 64 (the maximum). innodb_buffer_pool_size ', float_val=64.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.07408338040113449, 0.12090014666318893, 0.17978490889072418, 0.4351285398006439, 0.1901029646396637]
Choice: 0
type: 3, value: 64.0, unit: 
Done flag: False
No warmup - hint counter: 18
{'sequence': '1 (the default) up to 64', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.4980872571468353, 0.19818918406963348, 0.15659791231155396, 0.12245816737413406, 0.024667495861649513]}
Decision: Deciding weight of TuningHint(doc_id=21, param=<re.Match object; span=(117, 145), match='innodb_buffer_pool_instances'>, value=<re.Match object; span=(22, 24), match='64'>, recommendation='1 (the default) up to 64', passage='you can increase innodb_buffer_pool_size, and you can divide the InnoDB buffer pool into multiple regions by setting innodb_buffer_pool_instances to 2, 3, 4 or 8. As long as innodb_buffer_pool_size is set high enough, and you have enough memory available in your MySQL database server. This increases\nInnoDB read/write threads.\nTo enable multiple buffer pool instances, set the innodb_buffer_pool_instances configuration option to a value greater than 1 (the default) up to 64 (the maximum). innodb_buffer_pool_size ', float_val=64.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.024667495861649513, 0.4980872571468353, 0.19818918406963348, 0.15659791231155396, 0.12245816737413406]
--- Tuning Updates ---
Minimal time (ms): 0.015606064446828216
Achieved with configuration: {'innodb_buffer_pool_size': '16000000'}
Maximal time (ms): 0.5810819296720631
Achieved with configuration: {'innodb_buffer_pool_size': '0'}
Decision: Deciding adaption of TuningHint(doc_id=21, param=<re.Match object; span=(117, 145), match='innodb_buffer_pool_instances'>, value=<re.Match object; span=(22, 24), match='64'>, recommendation='1 (the default) up to 64', passage='you can increase innodb_buffer_pool_size, and you can divide the InnoDB buffer pool into multiple regions by setting innodb_buffer_pool_instances to 2, 3, 4 or 8. As long as innodb_buffer_pool_size is set high enough, and you have enough memory available in your MySQL database server. This increases\nInnoDB read/write threads.\nTo enable multiple buffer pool instances, set the innodb_buffer_pool_instances configuration option to a value greater than 1 (the default) up to 64 (the maximum). innodb_buffer_pool_size ', float_val=64.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.07408338040113449, 0.12090014666318893, 0.17978490889072418, 0.4351285398006439, 0.1901029646396637]
Choice: 1
type: 3, value: 64.0, unit: 
Done flag: False
Decision: Deciding weight of TuningHint(doc_id=21, param=<re.Match object; span=(117, 145), match='innodb_buffer_pool_instances'>, value=<re.Match object; span=(22, 24), match='64'>, recommendation='1 (the default) up to 64', passage='you can increase innodb_buffer_pool_size, and you can divide the InnoDB buffer pool into multiple regions by setting innodb_buffer_pool_instances to 2, 3, 4 or 8. As long as innodb_buffer_pool_size is set high enough, and you have enough memory available in your MySQL database server. This increases\nInnoDB read/write threads.\nTo enable multiple buffer pool instances, set the innodb_buffer_pool_instances configuration option to a value greater than 1 (the default) up to 64 (the maximum). innodb_buffer_pool_size ', float_val=64.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.024667495861649513, 0.4980872571468353, 0.19818918406963348, 0.15659791231155396, 0.12245816737413406]
Choice: 3
Trying assigning innodb_buffer_pool_instances to 32
Assignment ('innodb_buffer_pool_instances', '32') was rejected
Hint counter: 19
Episode hint counter before: 3
Episode hint counter: 4
Hints per episode: 5
Done flag: False
No warmup - hint counter: 19
{'sequence': '4', 'labels': ['Use recommendation', 'Increase recommendation strongly', 'Decrease recommendation strongly', 'Increase recommendation', 'Decrease recommendation'], 'scores': [0.24198351800441742, 0.23620173335075378, 0.19109122455120087, 0.1809968501329422, 0.14972664415836334]}
Decision: Deciding adaption of TuningHint(doc_id=21, param=<re.Match object; span=(60, 88), match='innodb_buffer_pool_instances'>, value=<re.Match object; span=(0, 1), match='4'>, recommendation='4', passage='For example, you can set innodb_buffer_pool_size to 6GB and innodb_buffer_pool_instances to 4 in your my.cnf MySQL configuration file:\n; InnoDB buffer pool size in bytes. The primary value to adjust on a database server,\n; can be set up to 80% of the total memory in these environments\ninnodb_buffer_pool_size = 6000M innodb_buffer_pool_size ', float_val=4.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.19109122455120087, 0.14972664415836334, 0.24198351800441742, 0.1809968501329422, 0.23620173335075378]
Choice: 3
type: 3, value: 4.0, unit: 
Done flag: False
No warmup - hint counter: 19
{'sequence': '4', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.4751526415348053, 0.198303684592247, 0.15801726281642914, 0.14068041741847992, 0.027845947071909904]}
Decision: Deciding weight of TuningHint(doc_id=21, param=<re.Match object; span=(60, 88), match='innodb_buffer_pool_instances'>, value=<re.Match object; span=(0, 1), match='4'>, recommendation='4', passage='For example, you can set innodb_buffer_pool_size to 6GB and innodb_buffer_pool_instances to 4 in your my.cnf MySQL configuration file:\n; InnoDB buffer pool size in bytes. The primary value to adjust on a database server,\n; can be set up to 80% of the total memory in these environments\ninnodb_buffer_pool_size = 6000M innodb_buffer_pool_size ', float_val=4.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.027845947071909904, 0.4751526415348053, 0.198303684592247, 0.15801726281642914, 0.14068041741847992]
Choice: 3
Trying assigning innodb_buffer_pool_instances to 8
Assignment ('innodb_buffer_pool_instances', '8') was rejected
Hint counter: 20
Episode hint counter before: 4
Episode hint counter: 5
Hints per episode: 5
Episode finished!
Done flag: True
Finalizing episode!
Weighted hints: defaultdict(<function NlpTuningEnv._finalize_episode.<locals>.<lambda> at 0x7f8617a6eb00>, {('innodb_buffer_pool_instances', '2'): 16})
Selected configurations: [{'innodb_buffer_pool_instances': '2'}, {'innodb_buffer_pool_instances': '2'}]
Trying configuration: {'innodb_buffer_pool_instances': '2'}
--- Tuning Updates ---
Minimal time (ms): 0.015606064446828216
Achieved with configuration: {'innodb_buffer_pool_size': '16000000'}
Maximal time (ms): 0.8108386151289514
Achieved with configuration: {'innodb_buffer_pool_instances': '2'}
Reward -0.1321217470186138 with {'innodb_buffer_pool_instances': '2'}
Trying configuration: {'innodb_buffer_pool_instances': '2'}
--- Tuning Updates ---
Minimal time (ms): 0.015606064446828216
Achieved with configuration: {'innodb_buffer_pool_size': '16000000'}
Maximal time (ms): 0.8108386151289514
Achieved with configuration: {'innodb_buffer_pool_instances': '2'}
Reward -0.2446399465380782 with {'innodb_buffer_pool_instances': '2'}
Obtained 0 by configuration {}
Achieved unscaled reward of 0 using {}.
No warmup - hint counter: 20
{'sequence': '0', 'labels': ['Use recommendation', 'Decrease recommendation strongly', 'Decrease recommendation', 'Increase recommendation', 'Increase recommendation strongly'], 'scores': [0.2700919508934021, 0.2085651308298111, 0.20193856954574585, 0.17301717400550842, 0.14638714492321014]}
Decision: Deciding adaption of TuningHint(doc_id=4, param=<re.Match object; span=(0, 16), match='query_cache_type'>, value=<re.Match object; span=(0, 1), match='0'>, recommendation='0', passage='query_cache_type & query_cache_size\nSetting both of these to “0” will entirely disable the query cache.\nTuning for Your Workload\nTo tune further, more information will be required. The best way to gather this information is to install a MySQL monitoring / graphing tool like Percona Monitoring and Management platform. Once you have a tool installed, we can dive into the individual metrics and start customizing based on the data. query_cache_size ', float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.2085651308298111, 0.20193856954574585, 0.2700919508934021, 0.17301717400550842, 0.14638714492321014]
--- Tuning Updates ---
Minimal time (ms): 0.015606064446828216
Achieved with configuration: {'innodb_buffer_pool_size': '16000000'}
Maximal time (ms): 0.8108386151289514
Achieved with configuration: {'innodb_buffer_pool_instances': '2'}
Decision: Deciding adaption of TuningHint(doc_id=4, param=<re.Match object; span=(0, 16), match='query_cache_type'>, value=<re.Match object; span=(0, 1), match='0'>, recommendation='0', passage='query_cache_type & query_cache_size\nSetting both of these to “0” will entirely disable the query cache.\nTuning for Your Workload\nTo tune further, more information will be required. The best way to gather this information is to install a MySQL monitoring / graphing tool like Percona Monitoring and Management platform. Once you have a tool installed, we can dive into the individual metrics and start customizing based on the data. query_cache_size ', float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.2085651308298111, 0.20193856954574585, 0.2700919508934021, 0.17301717400550842, 0.14638714492321014]
Choice: 2
type: 3, value: 0.0, unit: 
Done flag: False
No warmup - hint counter: 20
{'sequence': '0', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.44440391659736633, 0.20087453722953796, 0.16065338253974915, 0.14993830025196075, 0.04412991181015968]}
Decision: Deciding weight of TuningHint(doc_id=4, param=<re.Match object; span=(0, 16), match='query_cache_type'>, value=<re.Match object; span=(0, 1), match='0'>, recommendation='0', passage='query_cache_type & query_cache_size\nSetting both of these to “0” will entirely disable the query cache.\nTuning for Your Workload\nTo tune further, more information will be required. The best way to gather this information is to install a MySQL monitoring / graphing tool like Percona Monitoring and Management platform. Once you have a tool installed, we can dive into the individual metrics and start customizing based on the data. query_cache_size ', float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.04412991181015968, 0.44440391659736633, 0.20087453722953796, 0.16065338253974915, 0.14993830025196075]
--- Tuning Updates ---
Minimal time (ms): 0.015606064446828216
Achieved with configuration: {'innodb_buffer_pool_size': '16000000'}
Maximal time (ms): 0.8108386151289514
Achieved with configuration: {'innodb_buffer_pool_instances': '2'}
Decision: Deciding adaption of TuningHint(doc_id=4, param=<re.Match object; span=(0, 16), match='query_cache_type'>, value=<re.Match object; span=(0, 1), match='0'>, recommendation='0', passage='query_cache_type & query_cache_size\nSetting both of these to “0” will entirely disable the query cache.\nTuning for Your Workload\nTo tune further, more information will be required. The best way to gather this information is to install a MySQL monitoring / graphing tool like Percona Monitoring and Management platform. Once you have a tool installed, we can dive into the individual metrics and start customizing based on the data. query_cache_size ', float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.2085651308298111, 0.20193856954574585, 0.2700919508934021, 0.17301717400550842, 0.14638714492321014]
Choice: 0
type: 3, value: 0.0, unit: 
Done flag: False
Decision: Deciding weight of TuningHint(doc_id=4, param=<re.Match object; span=(0, 16), match='query_cache_type'>, value=<re.Match object; span=(0, 1), match='0'>, recommendation='0', passage='query_cache_type & query_cache_size\nSetting both of these to “0” will entirely disable the query cache.\nTuning for Your Workload\nTo tune further, more information will be required. The best way to gather this information is to install a MySQL monitoring / graphing tool like Percona Monitoring and Management platform. Once you have a tool installed, we can dive into the individual metrics and start customizing based on the data. query_cache_size ', float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.04412991181015968, 0.44440391659736633, 0.20087453722953796, 0.16065338253974915, 0.14993830025196075]
Choice: 0
Trying assigning query_cache_type to 0
Assignment ('query_cache_type', '0') was rejected
Hint counter: 21
Episode hint counter before: 0
Episode hint counter: 1
Hints per episode: 5
Done flag: False
No warmup - hint counter: 21
{'sequence': '0', 'labels': ['Use recommendation', 'Decrease recommendation strongly', 'Decrease recommendation', 'Increase recommendation', 'Increase recommendation strongly'], 'scores': [0.2700919508934021, 0.2085651308298111, 0.20193856954574585, 0.17301717400550842, 0.14638714492321014]}
Decision: Deciding adaption of TuningHint(doc_id=15, param=<re.Match object; span=(21, 37), match='query_cache_type'>, value=<re.Match object; span=(0, 1), match='0'>, recommendation='0', passage='query_cache_size = 0\nquery_cache_type = 0\ninnodb_buffer_pool_instances = 8 (or 1 if innodb_buffer_pool_size < 1GB)\ninnodb_file_per_table=ON\ninnodb_stats_on_metadata = OFF innodb_disable_sort_file_cache ', float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.2085651308298111, 0.20193856954574585, 0.2700919508934021, 0.17301717400550842, 0.14638714492321014]
Choice: 3
type: 3, value: 0.0, unit: 
Done flag: False
No warmup - hint counter: 21
{'sequence': '0', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.44440391659736633, 0.20087453722953796, 0.16065338253974915, 0.14993830025196075, 0.04412991181015968]}
Decision: Deciding weight of TuningHint(doc_id=15, param=<re.Match object; span=(21, 37), match='query_cache_type'>, value=<re.Match object; span=(0, 1), match='0'>, recommendation='0', passage='query_cache_size = 0\nquery_cache_type = 0\ninnodb_buffer_pool_instances = 8 (or 1 if innodb_buffer_pool_size < 1GB)\ninnodb_file_per_table=ON\ninnodb_stats_on_metadata = OFF innodb_disable_sort_file_cache ', float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.04412991181015968, 0.44440391659736633, 0.20087453722953796, 0.16065338253974915, 0.14993830025196075]
Choice: 1
Trying assigning query_cache_type to 0
Adding assignment ('query_cache_type', '0') with weight 2
Assignment ('query_cache_type', '0') extracted from "query_cache_size = 0
query_cache_type = 0
innodb_buffer_pool_instances = 8 (or 1 if innodb_buffer_pool_size < 1GB)
innodb_file_per_table=ON
innodb_stats_on_metadata = OFF innodb_disable_sort_file_cache "
Hint counter: 22
Episode hint counter before: 1
Episode hint counter: 2
Hints per episode: 5
Done flag: False
No warmup - hint counter: 22
{'sequence': '0', 'labels': ['Use recommendation', 'Decrease recommendation strongly', 'Decrease recommendation', 'Increase recommendation', 'Increase recommendation strongly'], 'scores': [0.2700919508934021, 0.2085651308298111, 0.20193856954574585, 0.17301717400550842, 0.14638714492321014]}
Decision: Deciding adaption of TuningHint(doc_id=15, param=<re.Match object; span=(0, 16), match='query_cache_type'>, value=<re.Match object; span=(0, 1), match='0'>, recommendation='0', passage='query_cache_type = 0\ninnodb_buffer_pool_instances = 8\ninnodb_buffer_pool_size = 5G\ninnodb_file_per_table = ON\ninnodb_log_file_size = 512M\ninnodb_stats_on_metadata = OFF innodb_disable_sort_file_cache ', float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.2085651308298111, 0.20193856954574585, 0.2700919508934021, 0.17301717400550842, 0.14638714492321014]
Choice: 1
type: 3, value: 0.0, unit: 
Done flag: False
No warmup - hint counter: 22
{'sequence': '0', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.44440391659736633, 0.20087453722953796, 0.16065338253974915, 0.14993830025196075, 0.04412991181015968]}
Decision: Deciding weight of TuningHint(doc_id=15, param=<re.Match object; span=(0, 16), match='query_cache_type'>, value=<re.Match object; span=(0, 1), match='0'>, recommendation='0', passage='query_cache_type = 0\ninnodb_buffer_pool_instances = 8\ninnodb_buffer_pool_size = 5G\ninnodb_file_per_table = ON\ninnodb_log_file_size = 512M\ninnodb_stats_on_metadata = OFF innodb_disable_sort_file_cache ', float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.04412991181015968, 0.44440391659736633, 0.20087453722953796, 0.16065338253974915, 0.14993830025196075]
--- Tuning Updates ---
Minimal time (ms): 0.015606064446828216
Achieved with configuration: {'innodb_buffer_pool_size': '16000000'}
Maximal time (ms): 0.8108386151289514
Achieved with configuration: {'innodb_buffer_pool_instances': '2'}
Decision: Deciding adaption of TuningHint(doc_id=15, param=<re.Match object; span=(0, 16), match='query_cache_type'>, value=<re.Match object; span=(0, 1), match='0'>, recommendation='0', passage='query_cache_type = 0\ninnodb_buffer_pool_instances = 8\ninnodb_buffer_pool_size = 5G\ninnodb_file_per_table = ON\ninnodb_log_file_size = 512M\ninnodb_stats_on_metadata = OFF innodb_disable_sort_file_cache ', float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.2085651308298111, 0.20193856954574585, 0.2700919508934021, 0.17301717400550842, 0.14638714492321014]
Choice: 2
type: 3, value: 0.0, unit: 
Done flag: False
Decision: Deciding weight of TuningHint(doc_id=15, param=<re.Match object; span=(0, 16), match='query_cache_type'>, value=<re.Match object; span=(0, 1), match='0'>, recommendation='0', passage='query_cache_type = 0\ninnodb_buffer_pool_instances = 8\ninnodb_buffer_pool_size = 5G\ninnodb_file_per_table = ON\ninnodb_log_file_size = 512M\ninnodb_stats_on_metadata = OFF innodb_disable_sort_file_cache ', float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.04412991181015968, 0.44440391659736633, 0.20087453722953796, 0.16065338253974915, 0.14993830025196075]
Choice: 0
Trying assigning query_cache_type to 0
Adding assignment ('query_cache_type', '0') with weight 1
Assignment ('query_cache_type', '0') extracted from "query_cache_type = 0
innodb_buffer_pool_instances = 8
innodb_buffer_pool_size = 5G
innodb_file_per_table = ON
innodb_log_file_size = 512M
innodb_stats_on_metadata = OFF innodb_disable_sort_file_cache "
Hint counter: 23
Episode hint counter before: 2
Episode hint counter: 3
Hints per episode: 5
Done flag: False
No warmup - hint counter: 23
{'sequence': '0', 'labels': ['Use recommendation', 'Decrease recommendation strongly', 'Decrease recommendation', 'Increase recommendation', 'Increase recommendation strongly'], 'scores': [0.2700919508934021, 0.2085651308298111, 0.20193856954574585, 0.17301717400550842, 0.14638714492321014]}
Decision: Deciding adaption of TuningHint(doc_id=51, param=<re.Match object; span=(0, 16), match='query_cache_type'>, value=<re.Match object; span=(0, 1), match='0'>, recommendation='0', passage='query_cache_type=0\nquery_cache_size=0\n#query_cache_limit = 4M\ndefault_table_type = InnoDB\ntable_open_cache = 4096\nopen_files_limit = 8192\nmax_connections = 800 query_cache_limit ', float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.2085651308298111, 0.20193856954574585, 0.2700919508934021, 0.17301717400550842, 0.14638714492321014]
Choice: 2
type: 3, value: 0.0, unit: 
Done flag: False
No warmup - hint counter: 23
{'sequence': '0', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.44440391659736633, 0.20087453722953796, 0.16065338253974915, 0.14993830025196075, 0.04412991181015968]}
Decision: Deciding weight of TuningHint(doc_id=51, param=<re.Match object; span=(0, 16), match='query_cache_type'>, value=<re.Match object; span=(0, 1), match='0'>, recommendation='0', passage='query_cache_type=0\nquery_cache_size=0\n#query_cache_limit = 4M\ndefault_table_type = InnoDB\ntable_open_cache = 4096\nopen_files_limit = 8192\nmax_connections = 800 query_cache_limit ', float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.04412991181015968, 0.44440391659736633, 0.20087453722953796, 0.16065338253974915, 0.14993830025196075]
Choice: 3
Trying assigning query_cache_type to 0
Adding assignment ('query_cache_type', '0') with weight 8
Assignment ('query_cache_type', '0') extracted from "query_cache_type=0
query_cache_size=0
#query_cache_limit = 4M
default_table_type = InnoDB
table_open_cache = 4096
open_files_limit = 8192
max_connections = 800 query_cache_limit "
Hint counter: 24
Episode hint counter before: 3
Episode hint counter: 4
Hints per episode: 5
Done flag: False
No warmup - hint counter: 24
{'sequence': '1', 'labels': ['Use recommendation', 'Increase recommendation strongly', 'Increase recommendation', 'Decrease recommendation strongly', 'Decrease recommendation'], 'scores': [0.26459449529647827, 0.2524179518222809, 0.18136543035507202, 0.16976365447044373, 0.1318584829568863]}
Decision: Deciding adaption of TuningHint(doc_id=56, param=<re.Match object; span=(45, 61), match='query_cache_type'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation='1', passage='net_buffer_length = 1M\nthread_cache_size = 4\nquery_cache_type = 1 ***\nquery_cache_size = 4M ***\nN.B. Turning on the query_cache (query_cache_type=1) can cause problems with if you have a newer server (>=5.7) and mixed clients (some below 5.7, some above). query_cache_size ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.16976365447044373, 0.1318584829568863, 0.26459449529647827, 0.18136543035507202, 0.2524179518222809]
Choice: 0
type: 3, value: 1.0, unit: 
Done flag: False
No warmup - hint counter: 24
{'sequence': '1', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.4530346393585205, 0.20463339984416962, 0.16576817631721497, 0.1469561606645584, 0.02960764616727829]}
Decision: Deciding weight of TuningHint(doc_id=56, param=<re.Match object; span=(45, 61), match='query_cache_type'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation='1', passage='net_buffer_length = 1M\nthread_cache_size = 4\nquery_cache_type = 1 ***\nquery_cache_size = 4M ***\nN.B. Turning on the query_cache (query_cache_type=1) can cause problems with if you have a newer server (>=5.7) and mixed clients (some below 5.7, some above). query_cache_size ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.02960764616727829, 0.4530346393585205, 0.20463339984416962, 0.16576817631721497, 0.1469561606645584]
--- Tuning Updates ---
Minimal time (ms): 0.015606064446828216
Achieved with configuration: {'innodb_buffer_pool_size': '16000000'}
Maximal time (ms): 0.8108386151289514
Achieved with configuration: {'innodb_buffer_pool_instances': '2'}
Decision: Deciding adaption of TuningHint(doc_id=56, param=<re.Match object; span=(45, 61), match='query_cache_type'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation='1', passage='net_buffer_length = 1M\nthread_cache_size = 4\nquery_cache_type = 1 ***\nquery_cache_size = 4M ***\nN.B. Turning on the query_cache (query_cache_type=1) can cause problems with if you have a newer server (>=5.7) and mixed clients (some below 5.7, some above). query_cache_size ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.16976365447044373, 0.1318584829568863, 0.26459449529647827, 0.18136543035507202, 0.2524179518222809]
Choice: 0
type: 3, value: 1.0, unit: 
Done flag: False
Decision: Deciding weight of TuningHint(doc_id=56, param=<re.Match object; span=(45, 61), match='query_cache_type'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation='1', passage='net_buffer_length = 1M\nthread_cache_size = 4\nquery_cache_type = 1 ***\nquery_cache_size = 4M ***\nN.B. Turning on the query_cache (query_cache_type=1) can cause problems with if you have a newer server (>=5.7) and mixed clients (some below 5.7, some above). query_cache_size ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.02960764616727829, 0.4530346393585205, 0.20463339984416962, 0.16576817631721497, 0.1469561606645584]
Choice: 2
Trying assigning query_cache_type to 0
Adding assignment ('query_cache_type', '0') with weight 4
Assignment ('query_cache_type', '0') extracted from "net_buffer_length = 1M
thread_cache_size = 4
query_cache_type = 1 ***
query_cache_size = 4M ***
N.B. Turning on the query_cache (query_cache_type=1) can cause problems with if you have a newer server (>=5.7) and mixed clients (some below 5.7, some above). query_cache_size "
Hint counter: 25
Episode hint counter before: 4
Episode hint counter: 5
Hints per episode: 5
Episode finished!
Done flag: True
Finalizing episode!
Weighted hints: defaultdict(<function NlpTuningEnv._finalize_episode.<locals>.<lambda> at 0x7f86e0c1fc20>, {('query_cache_type', '0'): 15})
Selected configurations: [{'query_cache_type': '0'}, {'query_cache_type': '0'}]
Trying configuration: {'query_cache_type': '0'}
--- Tuning Updates ---
Minimal time (ms): 0.015606064446828216
Achieved with configuration: {'innodb_buffer_pool_size': '16000000'}
Maximal time (ms): 0.8108386151289514
Achieved with configuration: {'innodb_buffer_pool_instances': '2'}
Reward -0.037591716353638116 with {'query_cache_type': '0'}
Trying configuration: {'query_cache_type': '0'}
--- Tuning Updates ---
Minimal time (ms): 0.015606064446828216
Achieved with configuration: {'innodb_buffer_pool_size': '16000000'}
Maximal time (ms): 0.8108386151289514
Achieved with configuration: {'innodb_buffer_pool_instances': '2'}
Reward 0.1349129433487215 with {'query_cache_type': '0'}
Obtained 0.1349129433487215 by configuration {'query_cache_type': '0'}
Achieved unscaled reward of 0.1349129433487215 using {'query_cache_type': '0'}.
No warmup - hint counter: 25
{'sequence': 'Top 3', 'labels': ['Increase recommendation strongly', 'Use recommendation', 'Increase recommendation', 'Decrease recommendation strongly', 'Decrease recommendation'], 'scores': [0.34281766414642334, 0.3305753767490387, 0.2857018709182739, 0.023860305547714233, 0.017044778913259506]}
Decision: Deciding adaption of TuningHint(doc_id=4, param=<re.Match object; span=(555, 588), match='mysql_native_password_proxy_users'>, value=<re.Match object; span=(4, 5), match='3'>, recommendation='Top 3', passage='CategoriesMySQL(3402)Insight for DBAs(1601)Percona Software(1553)Percona Events(875)MongoDB(571)Insight for Developers(493)Benchmarks(345)Percona Live(336)Webinars(301)Cloud(297)PostgreSQL(189)Monitoring(185)MariaDB(159)Percona Services(154)Security(130)ProxySQL(130)Hardware and Storage(106)Storage Engine(56)Database Trends(55)Percona Announcements(12) \xa0 Percona Blog RSS Feed\nUpcoming WebinarsOptimize and Troubleshoot MySQL using PMM\nMongoDB Backups Overview\nIntroduction to pg_stat_monitor\nMoving your Database to the Cloud: Top 3 Things to Consider mysql_native_password_proxy_users ', float_val=3.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.023860305547714233, 0.017044778913259506, 0.3305753767490387, 0.2857018709182739, 0.34281766414642334]
--- Tuning Updates ---
Minimal time (ms): 0.015606064446828216
Achieved with configuration: {'innodb_buffer_pool_size': '16000000'}
Maximal time (ms): 0.8108386151289514
Achieved with configuration: {'innodb_buffer_pool_instances': '2'}
Decision: Deciding adaption of TuningHint(doc_id=4, param=<re.Match object; span=(555, 588), match='mysql_native_password_proxy_users'>, value=<re.Match object; span=(4, 5), match='3'>, recommendation='Top 3', passage='CategoriesMySQL(3402)Insight for DBAs(1601)Percona Software(1553)Percona Events(875)MongoDB(571)Insight for Developers(493)Benchmarks(345)Percona Live(336)Webinars(301)Cloud(297)PostgreSQL(189)Monitoring(185)MariaDB(159)Percona Services(154)Security(130)ProxySQL(130)Hardware and Storage(106)Storage Engine(56)Database Trends(55)Percona Announcements(12) \xa0 Percona Blog RSS Feed\nUpcoming WebinarsOptimize and Troubleshoot MySQL using PMM\nMongoDB Backups Overview\nIntroduction to pg_stat_monitor\nMoving your Database to the Cloud: Top 3 Things to Consider mysql_native_password_proxy_users ', float_val=3.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.023860305547714233, 0.017044778913259506, 0.3305753767490387, 0.2857018709182739, 0.34281766414642334]
Choice: 2
type: 3, value: 3.0, unit: 
Done flag: False
No warmup - hint counter: 25
{'sequence': 'Top 3', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.4138103127479553, 0.21719592809677124, 0.18912069499492645, 0.15878477692604065, 0.021088313311338425]}
Decision: Deciding weight of TuningHint(doc_id=4, param=<re.Match object; span=(555, 588), match='mysql_native_password_proxy_users'>, value=<re.Match object; span=(4, 5), match='3'>, recommendation='Top 3', passage='CategoriesMySQL(3402)Insight for DBAs(1601)Percona Software(1553)Percona Events(875)MongoDB(571)Insight for Developers(493)Benchmarks(345)Percona Live(336)Webinars(301)Cloud(297)PostgreSQL(189)Monitoring(185)MariaDB(159)Percona Services(154)Security(130)ProxySQL(130)Hardware and Storage(106)Storage Engine(56)Database Trends(55)Percona Announcements(12) \xa0 Percona Blog RSS Feed\nUpcoming WebinarsOptimize and Troubleshoot MySQL using PMM\nMongoDB Backups Overview\nIntroduction to pg_stat_monitor\nMoving your Database to the Cloud: Top 3 Things to Consider mysql_native_password_proxy_users ', float_val=3.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.021088313311338425, 0.4138103127479553, 0.21719592809677124, 0.18912069499492645, 0.15878477692604065]
Choice: 3
Trying assigning mysql_native_password_proxy_users to 3
Adding assignment ('mysql_native_password_proxy_users', '3') with weight 8
Assignment ('mysql_native_password_proxy_users', '3') extracted from "CategoriesMySQL(3402)Insight for DBAs(1601)Percona Software(1553)Percona Events(875)MongoDB(571)Insight for Developers(493)Benchmarks(345)Percona Live(336)Webinars(301)Cloud(297)PostgreSQL(189)Monitoring(185)MariaDB(159)Percona Services(154)Security(130)ProxySQL(130)Hardware and Storage(106)Storage Engine(56)Database Trends(55)Percona Announcements(12)   Percona Blog RSS Feed
Upcoming WebinarsOptimize and Troubleshoot MySQL using PMM
MongoDB Backups Overview
Introduction to pg_stat_monitor
Moving your Database to the Cloud: Top 3 Things to Consider mysql_native_password_proxy_users "
Hint counter: 26
Episode hint counter before: 0
Episode hint counter: 1
Hints per episode: 5
Done flag: False
No warmup - hint counter: 26
{'sequence': '="2" hashes', 'labels': ['Increase recommendation strongly', 'Use recommendation', 'Increase recommendation', 'Decrease recommendation strongly', 'Decrease recommendation'], 'scores': [0.2551906704902649, 0.23495979607105255, 0.18652689456939697, 0.17049922049045563, 0.15282346308231354]}
Decision: Deciding adaption of TuningHint(doc_id=67, param=<re.Match object; span=(303, 336), match='mysql_native_password_proxy_users'>, value=<re.Match object; span=(2, 3), match='2'>, recommendation='="2" hashes', passage='# how incoming traffic is steered to each slice. A slice is comprised of a set\n# of receive queues and an associated interrupt thread. Hashing is disabled\n# when using a single slice (hw.mxge.max_slices=1). The options are: ="1"\n# hashes on the source and destination IPv4 addresses. ="2" hashes on the mysql_native_password_proxy_users ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.17049922049045563, 0.15282346308231354, 0.23495979607105255, 0.18652689456939697, 0.2551906704902649]
Choice: 2
type: 3, value: 2.0, unit: 
Done flag: False
No warmup - hint counter: 26
{'sequence': '="2" hashes', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.44693565368652344, 0.21913179755210876, 0.17704126238822937, 0.13729357719421387, 0.01959764026105404]}
Decision: Deciding weight of TuningHint(doc_id=67, param=<re.Match object; span=(303, 336), match='mysql_native_password_proxy_users'>, value=<re.Match object; span=(2, 3), match='2'>, recommendation='="2" hashes', passage='# how incoming traffic is steered to each slice. A slice is comprised of a set\n# of receive queues and an associated interrupt thread. Hashing is disabled\n# when using a single slice (hw.mxge.max_slices=1). The options are: ="1"\n# hashes on the source and destination IPv4 addresses. ="2" hashes on the mysql_native_password_proxy_users ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.01959764026105404, 0.44693565368652344, 0.21913179755210876, 0.17704126238822937, 0.13729357719421387]
--- Tuning Updates ---
Minimal time (ms): 0.015606064446828216
Achieved with configuration: {'innodb_buffer_pool_size': '16000000'}
Maximal time (ms): 0.8108386151289514
Achieved with configuration: {'innodb_buffer_pool_instances': '2'}
Decision: Deciding adaption of TuningHint(doc_id=67, param=<re.Match object; span=(303, 336), match='mysql_native_password_proxy_users'>, value=<re.Match object; span=(2, 3), match='2'>, recommendation='="2" hashes', passage='# how incoming traffic is steered to each slice. A slice is comprised of a set\n# of receive queues and an associated interrupt thread. Hashing is disabled\n# when using a single slice (hw.mxge.max_slices=1). The options are: ="1"\n# hashes on the source and destination IPv4 addresses. ="2" hashes on the mysql_native_password_proxy_users ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.17049922049045563, 0.15282346308231354, 0.23495979607105255, 0.18652689456939697, 0.2551906704902649]
Choice: 1
type: 3, value: 2.0, unit: 
Done flag: False
Decision: Deciding weight of TuningHint(doc_id=67, param=<re.Match object; span=(303, 336), match='mysql_native_password_proxy_users'>, value=<re.Match object; span=(2, 3), match='2'>, recommendation='="2" hashes', passage='# how incoming traffic is steered to each slice. A slice is comprised of a set\n# of receive queues and an associated interrupt thread. Hashing is disabled\n# when using a single slice (hw.mxge.max_slices=1). The options are: ="1"\n# hashes on the source and destination IPv4 addresses. ="2" hashes on the mysql_native_password_proxy_users ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.01959764026105404, 0.44693565368652344, 0.21913179755210876, 0.17704126238822937, 0.13729357719421387]
Choice: 1
Trying assigning mysql_native_password_proxy_users to 1
Adding assignment ('mysql_native_password_proxy_users', '1') with weight 2
Assignment ('mysql_native_password_proxy_users', '1') extracted from "# how incoming traffic is steered to each slice. A slice is comprised of a set
# of receive queues and an associated interrupt thread. Hashing is disabled
# when using a single slice (hw.mxge.max_slices=1). The options are: ="1"
# hashes on the source and destination IPv4 addresses. ="2" hashes on the mysql_native_password_proxy_users "
Hint counter: 27
Episode hint counter before: 1
Episode hint counter: 2
Hints per episode: 5
Done flag: False
No warmup - hint counter: 27
{'sequence': '1 up to <num>', 'labels': ['Increase recommendation', 'Use recommendation', 'Increase recommendation strongly', 'Decrease recommendation', 'Decrease recommendation strongly'], 'scores': [0.6029757857322693, 0.1593792587518692, 0.14937768876552582, 0.05616779252886772, 0.03209949657320976]}
Decision: Deciding adaption of TuningHint(doc_id=93, param=<re.Match object; span=(221, 254), match='mysql_native_password_proxy_users'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation='1 up to <num>', passage='with 1 up to <num> as server name suffixes. A range of numbers\n<num_low>-<num_high> may also be used to use <num_low> up to\n<num_high> as server name suffixes.\n<fqdn>\nA FQDN for all the servers this template initializes. mysql_native_password_proxy_users ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.03209949657320976, 0.05616779252886772, 0.1593792587518692, 0.6029757857322693, 0.14937768876552582]
Choice: 4
type: 3, value: 1.0, unit: 
Done flag: False
No warmup - hint counter: 27
{'sequence': '1 up to <num>', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.5002126097679138, 0.19951222836971283, 0.1536690890789032, 0.12738049030303955, 0.0192255899310112]}
Decision: Deciding weight of TuningHint(doc_id=93, param=<re.Match object; span=(221, 254), match='mysql_native_password_proxy_users'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation='1 up to <num>', passage='with 1 up to <num> as server name suffixes. A range of numbers\n<num_low>-<num_high> may also be used to use <num_low> up to\n<num_high> as server name suffixes.\n<fqdn>\nA FQDN for all the servers this template initializes. mysql_native_password_proxy_users ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.0192255899310112, 0.5002126097679138, 0.19951222836971283, 0.1536690890789032, 0.12738049030303955]
Choice: 4
Trying assigning mysql_native_password_proxy_users to 4
Assignment ('mysql_native_password_proxy_users', '4') was rejected
Hint counter: 28
Episode hint counter before: 2
Episode hint counter: 3
Hints per episode: 5
Done flag: False
No warmup - hint counter: 28
{'sequence': 'TLSv1.3', 'labels': ['Use recommendation', 'Increase recommendation', 'Increase recommendation strongly', 'Decrease recommendation', 'Decrease recommendation strongly'], 'scores': [0.2958807349205017, 0.24192190170288086, 0.24064943194389343, 0.11102460324764252, 0.11052333563566208]}
Decision: Deciding adaption of TuningHint(doc_id=93, param=<re.Match object; span=(252, 285), match='mysql_native_password_proxy_users'>, value=<re.Match object; span=(4, 7), match='1.3'>, recommendation='TLSv1.3', passage='string is defined in "man 1 ciphers" from OpenSSL man pages. For background\ninformation and recommendations see e.g.\n(https://wiki.mozilla.org/Security/Server_Side_TLS) and\n(https://mozilla.github.io/server-side-tls/ssl-config-generator/). For TLSv1.3 mysql_native_password_proxy_users ', float_val=1.3, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.11052333563566208, 0.11102460324764252, 0.2958807349205017, 0.24192190170288086, 0.24064943194389343]
Choice: 4
type: 3, value: 1.3, unit: 
Done flag: False
No warmup - hint counter: 28
{'sequence': 'TLSv1.3', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.48082759976387024, 0.18546146154403687, 0.1607825607061386, 0.1415708214044571, 0.031357575207948685]}
Decision: Deciding weight of TuningHint(doc_id=93, param=<re.Match object; span=(252, 285), match='mysql_native_password_proxy_users'>, value=<re.Match object; span=(4, 7), match='1.3'>, recommendation='TLSv1.3', passage='string is defined in "man 1 ciphers" from OpenSSL man pages. For background\ninformation and recommendations see e.g.\n(https://wiki.mozilla.org/Security/Server_Side_TLS) and\n(https://mozilla.github.io/server-side-tls/ssl-config-generator/). For TLSv1.3 mysql_native_password_proxy_users ', float_val=1.3, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.031357575207948685, 0.48082759976387024, 0.18546146154403687, 0.1607825607061386, 0.1415708214044571]
--- Tuning Updates ---
Minimal time (ms): 0.015606064446828216
Achieved with configuration: {'innodb_buffer_pool_size': '16000000'}
Maximal time (ms): 0.8108386151289514
Achieved with configuration: {'innodb_buffer_pool_instances': '2'}
Decision: Deciding adaption of TuningHint(doc_id=93, param=<re.Match object; span=(252, 285), match='mysql_native_password_proxy_users'>, value=<re.Match object; span=(4, 7), match='1.3'>, recommendation='TLSv1.3', passage='string is defined in "man 1 ciphers" from OpenSSL man pages. For background\ninformation and recommendations see e.g.\n(https://wiki.mozilla.org/Security/Server_Side_TLS) and\n(https://mozilla.github.io/server-side-tls/ssl-config-generator/). For TLSv1.3 mysql_native_password_proxy_users ', float_val=1.3, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.11052333563566208, 0.11102460324764252, 0.2958807349205017, 0.24192190170288086, 0.24064943194389343]
Choice: 2
type: 3, value: 1.3, unit: 
Done flag: False
Decision: Deciding weight of TuningHint(doc_id=93, param=<re.Match object; span=(252, 285), match='mysql_native_password_proxy_users'>, value=<re.Match object; span=(4, 7), match='1.3'>, recommendation='TLSv1.3', passage='string is defined in "man 1 ciphers" from OpenSSL man pages. For background\ninformation and recommendations see e.g.\n(https://wiki.mozilla.org/Security/Server_Side_TLS) and\n(https://mozilla.github.io/server-side-tls/ssl-config-generator/). For TLSv1.3 mysql_native_password_proxy_users ', float_val=1.3, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.031357575207948685, 0.48082759976387024, 0.18546146154403687, 0.1607825607061386, 0.1415708214044571]
Choice: 2
Trying assigning mysql_native_password_proxy_users to 1
Assignment ('mysql_native_password_proxy_users', '1') was rejected
Hint counter: 29
Episode hint counter before: 3
Episode hint counter: 4
Hints per episode: 5
Done flag: False
No warmup - hint counter: 29
{'sequence': '128M – 2G', 'labels': ['Increase recommendation', 'Use recommendation', 'Increase recommendation strongly', 'Decrease recommendation strongly', 'Decrease recommendation'], 'scores': [0.25448131561279297, 0.22415964305400848, 0.20210884511470795, 0.1632518470287323, 0.15599839389324188]}
Decision: Deciding adaption of TuningHint(doc_id=4, param=<re.Match object; span=(0, 20), match='innodb_log_file_size'>, value=<re.Match object; span=(0, 4), match='128M'>, recommendation='128M – 2G', passage='innodb_log_file_size\nThis is generally set between 128M – 2G.\nShould be large enough to hold at most an hour or so of logs.\nThis is more than enough so that MySQL can reorder writes to use sequential I/O during the flushing and checkpointing processes. innodb_log_file_size ', float_val=128.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.1632518470287323, 0.15599839389324188, 0.22415964305400848, 0.25448131561279297, 0.20210884511470795]
Choice: 3
type: 3, value: 128.0, unit: M
Done flag: False
No warmup - hint counter: 29
{'sequence': '128M – 2G', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.4823565185070038, 0.20143990218639374, 0.1612267941236496, 0.1385267823934555, 0.016450049355626106]}
Decision: Deciding weight of TuningHint(doc_id=4, param=<re.Match object; span=(0, 20), match='innodb_log_file_size'>, value=<re.Match object; span=(0, 4), match='128M'>, recommendation='128M – 2G', passage='innodb_log_file_size\nThis is generally set between 128M – 2G.\nShould be large enough to hold at most an hour or so of logs.\nThis is more than enough so that MySQL can reorder writes to use sequential I/O during the flushing and checkpointing processes. innodb_log_file_size ', float_val=128.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.016450049355626106, 0.4823565185070038, 0.20143990218639374, 0.1612267941236496, 0.1385267823934555]
Choice: 2
Trying assigning innodb_log_file_size to 256M
Adding assignment ('innodb_log_file_size', '256M') with weight 4
Assignment ('innodb_log_file_size', '256M') extracted from "innodb_log_file_size
This is generally set between 128M – 2G.
Should be large enough to hold at most an hour or so of logs.
This is more than enough so that MySQL can reorder writes to use sequential I/O during the flushing and checkpointing processes. innodb_log_file_size "
Hint counter: 30
Episode hint counter before: 4
Episode hint counter: 5
Hints per episode: 5
Episode finished!
Done flag: True
Finalizing episode!
Weighted hints: defaultdict(<function NlpTuningEnv._finalize_episode.<locals>.<lambda> at 0x7f86e0c35200>, {('mysql_native_password_proxy_users', '3'): 8, ('mysql_native_password_proxy_users', '1'): 2, ('innodb_log_file_size', '256M'): 4})
Selected configurations: [{'mysql_native_password_proxy_users': '3', 'innodb_log_file_size': '256M'}, {'mysql_native_password_proxy_users': '1', 'innodb_log_file_size': '256M'}]
Trying configuration: {'mysql_native_password_proxy_users': '3', 'innodb_log_file_size': '256M'}
--- Tuning Updates ---
Minimal time (ms): 0.015606064446828216
Achieved with configuration: {'innodb_buffer_pool_size': '16000000'}
Maximal time (ms): 0.8108386151289514
Achieved with configuration: {'innodb_buffer_pool_instances': '2'}
Reward -0.10226676490484221 with {'mysql_native_password_proxy_users': '3', 'innodb_log_file_size': '256M'}
Trying configuration: {'mysql_native_password_proxy_users': '1', 'innodb_log_file_size': '256M'}
--- Tuning Updates ---
Minimal time (ms): 0.015606064446828216
Achieved with configuration: {'innodb_buffer_pool_size': '16000000'}
Maximal time (ms): 0.8108386151289514
Achieved with configuration: {'innodb_buffer_pool_instances': '2'}
Reward -0.03879330286163307 with {'mysql_native_password_proxy_users': '1', 'innodb_log_file_size': '256M'}
Obtained 0 by configuration {}
Achieved unscaled reward of 0 using {}.
No warmup - hint counter: 30
{'sequence': '128M – 2G', 'labels': ['Increase recommendation', 'Use recommendation', 'Increase recommendation strongly', 'Decrease recommendation strongly', 'Decrease recommendation'], 'scores': [0.25448131561279297, 0.22415964305400848, 0.20210884511470795, 0.1632518470287323, 0.15599839389324188]}
Decision: Deciding adaption of TuningHint(doc_id=4, param=<re.Match object; span=(0, 20), match='innodb_log_file_size'>, value=<re.Match object; span=(7, 9), match='2G'>, recommendation='128M – 2G', passage='innodb_log_file_size\nThis is generally set between 128M – 2G.\nShould be large enough to hold at most an hour or so of logs.\nThis is more than enough so that MySQL can reorder writes to use sequential I/O during the flushing and checkpointing processes. innodb_log_file_size ', float_val=2.0, val_unit='G', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.1632518470287323, 0.15599839389324188, 0.22415964305400848, 0.25448131561279297, 0.20210884511470795]
--- Tuning Updates ---
Minimal time (ms): 0.015606064446828216
Achieved with configuration: {'innodb_buffer_pool_size': '16000000'}
Maximal time (ms): 0.8108386151289514
Achieved with configuration: {'innodb_buffer_pool_instances': '2'}
Decision: Deciding adaption of TuningHint(doc_id=4, param=<re.Match object; span=(0, 20), match='innodb_log_file_size'>, value=<re.Match object; span=(7, 9), match='2G'>, recommendation='128M – 2G', passage='innodb_log_file_size\nThis is generally set between 128M – 2G.\nShould be large enough to hold at most an hour or so of logs.\nThis is more than enough so that MySQL can reorder writes to use sequential I/O during the flushing and checkpointing processes. innodb_log_file_size ', float_val=2.0, val_unit='G', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.1632518470287323, 0.15599839389324188, 0.22415964305400848, 0.25448131561279297, 0.20210884511470795]
Choice: 3
type: 3, value: 2.0, unit: G
Done flag: False
No warmup - hint counter: 30
{'sequence': '128M – 2G', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.4823565185070038, 0.20143990218639374, 0.1612267941236496, 0.1385267823934555, 0.016450049355626106]}
Decision: Deciding weight of TuningHint(doc_id=4, param=<re.Match object; span=(0, 20), match='innodb_log_file_size'>, value=<re.Match object; span=(7, 9), match='2G'>, recommendation='128M – 2G', passage='innodb_log_file_size\nThis is generally set between 128M – 2G.\nShould be large enough to hold at most an hour or so of logs.\nThis is more than enough so that MySQL can reorder writes to use sequential I/O during the flushing and checkpointing processes. innodb_log_file_size ', float_val=2.0, val_unit='G', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.016450049355626106, 0.4823565185070038, 0.20143990218639374, 0.1612267941236496, 0.1385267823934555]
--- Tuning Updates ---
Minimal time (ms): 0.015606064446828216
Achieved with configuration: {'innodb_buffer_pool_size': '16000000'}
Maximal time (ms): 0.8108386151289514
Achieved with configuration: {'innodb_buffer_pool_instances': '2'}
Decision: Deciding adaption of TuningHint(doc_id=4, param=<re.Match object; span=(0, 20), match='innodb_log_file_size'>, value=<re.Match object; span=(7, 9), match='2G'>, recommendation='128M – 2G', passage='innodb_log_file_size\nThis is generally set between 128M – 2G.\nShould be large enough to hold at most an hour or so of logs.\nThis is more than enough so that MySQL can reorder writes to use sequential I/O during the flushing and checkpointing processes. innodb_log_file_size ', float_val=2.0, val_unit='G', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.1632518470287323, 0.15599839389324188, 0.22415964305400848, 0.25448131561279297, 0.20210884511470795]
Choice: 4
type: 3, value: 2.0, unit: G
Done flag: False
Decision: Deciding weight of TuningHint(doc_id=4, param=<re.Match object; span=(0, 20), match='innodb_log_file_size'>, value=<re.Match object; span=(7, 9), match='2G'>, recommendation='128M – 2G', passage='innodb_log_file_size\nThis is generally set between 128M – 2G.\nShould be large enough to hold at most an hour or so of logs.\nThis is more than enough so that MySQL can reorder writes to use sequential I/O during the flushing and checkpointing processes. innodb_log_file_size ', float_val=2.0, val_unit='G', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.016450049355626106, 0.4823565185070038, 0.20143990218639374, 0.1612267941236496, 0.1385267823934555]
Choice: 1
Trying assigning innodb_log_file_size to 8G
Adding assignment ('innodb_log_file_size', '8G') with weight 2
Assignment ('innodb_log_file_size', '8G') extracted from "innodb_log_file_size
This is generally set between 128M – 2G.
Should be large enough to hold at most an hour or so of logs.
This is more than enough so that MySQL can reorder writes to use sequential I/O during the flushing and checkpointing processes. innodb_log_file_size "
Hint counter: 31
Episode hint counter before: 0
Episode hint counter: 1
Hints per episode: 5
Done flag: False
No warmup - hint counter: 31
{'sequence': '1GB', 'labels': ['Use recommendation', 'Increase recommendation strongly', 'Decrease recommendation strongly', 'Increase recommendation', 'Decrease recommendation'], 'scores': [0.2747421860694885, 0.22133633494377136, 0.2146746963262558, 0.14514005184173584, 0.1441066712141037]}
Decision: Deciding adaption of TuningHint(doc_id=15, param=<re.Match object; span=(39, 59), match='innodb_log_file_size'>, value=<re.Match object; span=(0, 3), match='1GB'>, recommendation='1GB', passage='RAM 16GB\ninnodb_buffer_pool_size = 10G\ninnodb_log_file_size = 1GB\nThe values above are examples for dedicated MySql servers (no other services are running on the server). binlog_stmt_cache_size ', float_val=1.0, val_unit='GB', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.2146746963262558, 0.1441066712141037, 0.2747421860694885, 0.14514005184173584, 0.22133633494377136]
Choice: 3
type: 3, value: 1.0, unit: GB
Done flag: False
No warmup - hint counter: 31
{'sequence': '1GB', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.4591483473777771, 0.20575910806655884, 0.15603502094745636, 0.14760185778141022, 0.03145565465092659]}
Decision: Deciding weight of TuningHint(doc_id=15, param=<re.Match object; span=(39, 59), match='innodb_log_file_size'>, value=<re.Match object; span=(0, 3), match='1GB'>, recommendation='1GB', passage='RAM 16GB\ninnodb_buffer_pool_size = 10G\ninnodb_log_file_size = 1GB\nThe values above are examples for dedicated MySql servers (no other services are running on the server). binlog_stmt_cache_size ', float_val=1.0, val_unit='GB', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.03145565465092659, 0.4591483473777771, 0.20575910806655884, 0.15603502094745636, 0.14760185778141022]
Choice: 1
Trying assigning innodb_log_file_size to 2GB
Adding assignment ('innodb_log_file_size', '2GB') with weight 2
Assignment ('innodb_log_file_size', '2GB') extracted from "RAM 16GB
innodb_buffer_pool_size = 10G
innodb_log_file_size = 1GB
The values above are examples for dedicated MySql servers (no other services are running on the server). binlog_stmt_cache_size "
Hint counter: 32
Episode hint counter before: 1
Episode hint counter: 2
Hints per episode: 5
Done flag: False
No warmup - hint counter: 32
{'sequence': '512M', 'labels': ['Use recommendation', 'Increase recommendation strongly', 'Decrease recommendation strongly', 'Decrease recommendation', 'Increase recommendation'], 'scores': [0.2714363634586334, 0.19987469911575317, 0.19939805567264557, 0.171909898519516, 0.15738099813461304]}
Decision: Deciding adaption of TuningHint(doc_id=15, param=<re.Match object; span=(110, 130), match='innodb_log_file_size'>, value=<re.Match object; span=(0, 4), match='512M'>, recommendation='512M', passage='query_cache_type = 0\ninnodb_buffer_pool_instances = 8\ninnodb_buffer_pool_size = 5G\ninnodb_file_per_table = ON\ninnodb_log_file_size = 512M\ninnodb_stats_on_metadata = OFF innodb_disable_sort_file_cache ', float_val=512.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.19939805567264557, 0.171909898519516, 0.2714363634586334, 0.15738099813461304, 0.19987469911575317]
Choice: 0
type: 3, value: 512.0, unit: M
Done flag: False
No warmup - hint counter: 32
{'sequence': '512M', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.45348823070526123, 0.20669890940189362, 0.17552338540554047, 0.14287002384662628, 0.02141939103603363]}
Decision: Deciding weight of TuningHint(doc_id=15, param=<re.Match object; span=(110, 130), match='innodb_log_file_size'>, value=<re.Match object; span=(0, 4), match='512M'>, recommendation='512M', passage='query_cache_type = 0\ninnodb_buffer_pool_instances = 8\ninnodb_buffer_pool_size = 5G\ninnodb_file_per_table = ON\ninnodb_log_file_size = 512M\ninnodb_stats_on_metadata = OFF innodb_disable_sort_file_cache ', float_val=512.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.02141939103603363, 0.45348823070526123, 0.20669890940189362, 0.17552338540554047, 0.14287002384662628]
--- Tuning Updates ---
Minimal time (ms): 0.015606064446828216
Achieved with configuration: {'innodb_buffer_pool_size': '16000000'}
Maximal time (ms): 0.8108386151289514
Achieved with configuration: {'innodb_buffer_pool_instances': '2'}
Decision: Deciding adaption of TuningHint(doc_id=15, param=<re.Match object; span=(110, 130), match='innodb_log_file_size'>, value=<re.Match object; span=(0, 4), match='512M'>, recommendation='512M', passage='query_cache_type = 0\ninnodb_buffer_pool_instances = 8\ninnodb_buffer_pool_size = 5G\ninnodb_file_per_table = ON\ninnodb_log_file_size = 512M\ninnodb_stats_on_metadata = OFF innodb_disable_sort_file_cache ', float_val=512.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.19939805567264557, 0.171909898519516, 0.2714363634586334, 0.15738099813461304, 0.19987469911575317]
Choice: 2
type: 3, value: 512.0, unit: M
Done flag: False
Decision: Deciding weight of TuningHint(doc_id=15, param=<re.Match object; span=(110, 130), match='innodb_log_file_size'>, value=<re.Match object; span=(0, 4), match='512M'>, recommendation='512M', passage='query_cache_type = 0\ninnodb_buffer_pool_instances = 8\ninnodb_buffer_pool_size = 5G\ninnodb_file_per_table = ON\ninnodb_log_file_size = 512M\ninnodb_stats_on_metadata = OFF innodb_disable_sort_file_cache ', float_val=512.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.02141939103603363, 0.45348823070526123, 0.20669890940189362, 0.17552338540554047, 0.14287002384662628]
Choice: 4
Trying assigning innodb_log_file_size to 512M
Assignment ('innodb_log_file_size', '512M') was rejected
Hint counter: 33
Episode hint counter before: 2
Episode hint counter: 3
Hints per episode: 5
Done flag: False
No warmup - hint counter: 33
{'sequence': '2G', 'labels': ['Increase recommendation', 'Use recommendation', 'Increase recommendation strongly', 'Decrease recommendation strongly', 'Decrease recommendation'], 'scores': [0.2506265640258789, 0.19841399788856506, 0.19704852998256683, 0.18665911257266998, 0.167251855134964]}
Decision: Deciding adaption of TuningHint(doc_id=51, param=<re.Match object; span=(77, 97), match='innodb_log_file_size'>, value=<re.Match object; span=(0, 2), match='2G'>, recommendation='2G', passage='innodb_flush_log_at_trx_commit=2\n#sync_binlog=1\ninnodb_log_buffer_size = 16M\ninnodb_log_file_size = 2G\ninnodb_max_dirty_pages_pct = 80\ninnodb_flush_method=O_DIRECT innodb_flush_log_at_trx_commit ', float_val=2.0, val_unit='G', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.18665911257266998, 0.167251855134964, 0.19841399788856506, 0.2506265640258789, 0.19704852998256683]
Choice: 1
type: 3, value: 2.0, unit: G
Done flag: False
No warmup - hint counter: 33
{'sequence': '2G', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.4621330499649048, 0.18879863619804382, 0.1676827222108841, 0.16048802435398102, 0.0208975188434124]}
Decision: Deciding weight of TuningHint(doc_id=51, param=<re.Match object; span=(77, 97), match='innodb_log_file_size'>, value=<re.Match object; span=(0, 2), match='2G'>, recommendation='2G', passage='innodb_flush_log_at_trx_commit=2\n#sync_binlog=1\ninnodb_log_buffer_size = 16M\ninnodb_log_file_size = 2G\ninnodb_max_dirty_pages_pct = 80\ninnodb_flush_method=O_DIRECT innodb_flush_log_at_trx_commit ', float_val=2.0, val_unit='G', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.0208975188434124, 0.4621330499649048, 0.18879863619804382, 0.1676827222108841, 0.16048802435398102]
Choice: 3
Trying assigning innodb_log_file_size to 1G
Assignment ('innodb_log_file_size', '1G') was rejected
Hint counter: 34
Episode hint counter before: 3
Episode hint counter: 4
Hints per episode: 5
Done flag: False
No warmup - hint counter: 34
{'sequence': '16M', 'labels': ['Use recommendation', 'Increase recommendation strongly', 'Decrease recommendation strongly', 'Decrease recommendation', 'Increase recommendation'], 'scores': [0.269285649061203, 0.20589277148246765, 0.18481634557247162, 0.17571312189102173, 0.1642920970916748]}
Decision: Deciding adaption of TuningHint(doc_id=21, param=<re.Match object; span=(24, 43), match='max_heap_table_size'>, value=<re.Match object; span=(0, 3), match='16M'>, recommendation='16M', passage='2.1: tmp_table_size and max_heap_table_sizeThe default tmp_table_size and max_heap_table_size values are 16M. These two have to be equal in size! It sets the maximum size for internal in-memory tables, resulting in less creation of temporarily MyISAM tables on the file system. That in return, results in less disk I/O. max_heap_table_size ', float_val=16.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.18481634557247162, 0.17571312189102173, 0.269285649061203, 0.1642920970916748, 0.20589277148246765]
Choice: 3
type: 3, value: 16.0, unit: M
Done flag: False
No warmup - hint counter: 34
{'sequence': '16M', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.4479618966579437, 0.20477630198001862, 0.16790500283241272, 0.1591813862323761, 0.02017541602253914]}
Decision: Deciding weight of TuningHint(doc_id=21, param=<re.Match object; span=(24, 43), match='max_heap_table_size'>, value=<re.Match object; span=(0, 3), match='16M'>, recommendation='16M', passage='2.1: tmp_table_size and max_heap_table_sizeThe default tmp_table_size and max_heap_table_size values are 16M. These two have to be equal in size! It sets the maximum size for internal in-memory tables, resulting in less creation of temporarily MyISAM tables on the file system. That in return, results in less disk I/O. max_heap_table_size ', float_val=16.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.02017541602253914, 0.4479618966579437, 0.20477630198001862, 0.16790500283241272, 0.1591813862323761]
--- Tuning Updates ---
Minimal time (ms): 0.015606064446828216
Achieved with configuration: {'innodb_buffer_pool_size': '16000000'}
Maximal time (ms): 0.8108386151289514
Achieved with configuration: {'innodb_buffer_pool_instances': '2'}
Decision: Deciding adaption of TuningHint(doc_id=21, param=<re.Match object; span=(24, 43), match='max_heap_table_size'>, value=<re.Match object; span=(0, 3), match='16M'>, recommendation='16M', passage='2.1: tmp_table_size and max_heap_table_sizeThe default tmp_table_size and max_heap_table_size values are 16M. These two have to be equal in size! It sets the maximum size for internal in-memory tables, resulting in less creation of temporarily MyISAM tables on the file system. That in return, results in less disk I/O. max_heap_table_size ', float_val=16.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.18481634557247162, 0.17571312189102173, 0.269285649061203, 0.1642920970916748, 0.20589277148246765]
Choice: 4
type: 3, value: 16.0, unit: M
Done flag: False
Decision: Deciding weight of TuningHint(doc_id=21, param=<re.Match object; span=(24, 43), match='max_heap_table_size'>, value=<re.Match object; span=(0, 3), match='16M'>, recommendation='16M', passage='2.1: tmp_table_size and max_heap_table_sizeThe default tmp_table_size and max_heap_table_size values are 16M. These two have to be equal in size! It sets the maximum size for internal in-memory tables, resulting in less creation of temporarily MyISAM tables on the file system. That in return, results in less disk I/O. max_heap_table_size ', float_val=16.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.02017541602253914, 0.4479618966579437, 0.20477630198001862, 0.16790500283241272, 0.1591813862323761]
Choice: 0
Trying assigning max_heap_table_size to 64M
Adding assignment ('max_heap_table_size', '64M') with weight 1
Assignment ('max_heap_table_size', '64M') extracted from "2.1: tmp_table_size and max_heap_table_sizeThe default tmp_table_size and max_heap_table_size values are 16M. These two have to be equal in size! It sets the maximum size for internal in-memory tables, resulting in less creation of temporarily MyISAM tables on the file system. That in return, results in less disk I/O. max_heap_table_size "
Hint counter: 35
Episode hint counter before: 4
Episode hint counter: 5
Hints per episode: 5
Episode finished!
Done flag: True
Finalizing episode!
Weighted hints: defaultdict(<function NlpTuningEnv._finalize_episode.<locals>.<lambda> at 0x7f86e0c0ab90>, {('innodb_log_file_size', '8G'): 2, ('innodb_log_file_size', '2GB'): 2, ('max_heap_table_size', '64M'): 1})
Selected configurations: [{'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}, {'innodb_log_file_size': '2GB', 'max_heap_table_size': '64M'}]
Trying configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
--- Tuning Updates ---
Minimal time (ms): 0.015606064446828216
Achieved with configuration: {'innodb_buffer_pool_size': '16000000'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Reward -0.23078487296693828 with {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Trying configuration: {'innodb_log_file_size': '2GB', 'max_heap_table_size': '64M'}
--- Tuning Updates ---
Minimal time (ms): 0.015606064446828216
Achieved with configuration: {'innodb_buffer_pool_size': '16000000'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Reward 0.0939898713811873 with {'innodb_log_file_size': '2GB', 'max_heap_table_size': '64M'}
Obtained 0.0939898713811873 by configuration {'innodb_log_file_size': '2GB', 'max_heap_table_size': '64M'}
Achieved unscaled reward of 0.0939898713811873 using {'innodb_log_file_size': '2GB', 'max_heap_table_size': '64M'}.
No warmup - hint counter: 35
{'sequence': '64 M', 'labels': ['Use recommendation', 'Increase recommendation strongly', 'Decrease recommendation strongly', 'Decrease recommendation', 'Increase recommendation'], 'scores': [0.2483503520488739, 0.2111635059118271, 0.2104148417711258, 0.18048690259456635, 0.1495843231678009]}
Decision: Deciding adaption of TuningHint(doc_id=51, param=<re.Match object; span=(116, 135), match='max_heap_table_size'>, value=<re.Match object; span=(0, 2), match='64'>, recommendation='64 M', passage='You have a total of 186 tables\nYou have 428 open tables.\nThe table_cache value seems to be fine\nTEMP TABLES\nCurrent max_heap_table_size = 64 M\nCurrent tmp_table_size = 64 M\nOf 490764 temp tables, 0% were created on disk tmp_table_size ', float_val=64.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.2104148417711258, 0.18048690259456635, 0.2483503520488739, 0.1495843231678009, 0.2111635059118271]
--- Tuning Updates ---
Minimal time (ms): 0.015606064446828216
Achieved with configuration: {'innodb_buffer_pool_size': '16000000'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Decision: Deciding adaption of TuningHint(doc_id=51, param=<re.Match object; span=(116, 135), match='max_heap_table_size'>, value=<re.Match object; span=(0, 2), match='64'>, recommendation='64 M', passage='You have a total of 186 tables\nYou have 428 open tables.\nThe table_cache value seems to be fine\nTEMP TABLES\nCurrent max_heap_table_size = 64 M\nCurrent tmp_table_size = 64 M\nOf 490764 temp tables, 0% were created on disk tmp_table_size ', float_val=64.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.2104148417711258, 0.18048690259456635, 0.2483503520488739, 0.1495843231678009, 0.2111635059118271]
Choice: 3
type: 3, value: 64.0, unit: 
Done flag: False
No warmup - hint counter: 35
{'sequence': '64 M', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.4489474296569824, 0.21212896704673767, 0.16816607117652893, 0.14567673206329346, 0.0250808447599411]}
Decision: Deciding weight of TuningHint(doc_id=51, param=<re.Match object; span=(116, 135), match='max_heap_table_size'>, value=<re.Match object; span=(0, 2), match='64'>, recommendation='64 M', passage='You have a total of 186 tables\nYou have 428 open tables.\nThe table_cache value seems to be fine\nTEMP TABLES\nCurrent max_heap_table_size = 64 M\nCurrent tmp_table_size = 64 M\nOf 490764 temp tables, 0% were created on disk tmp_table_size ', float_val=64.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.0250808447599411, 0.4489474296569824, 0.21212896704673767, 0.16816607117652893, 0.14567673206329346]
Choice: 2
Trying assigning max_heap_table_size to 128
Assignment ('max_heap_table_size', '128') was rejected
Hint counter: 36
Episode hint counter before: 0
Episode hint counter: 1
Hints per episode: 5
Done flag: False
No warmup - hint counter: 36
{'sequence': '64 M', 'labels': ['Use recommendation', 'Increase recommendation strongly', 'Decrease recommendation strongly', 'Decrease recommendation', 'Increase recommendation'], 'scores': [0.2483503520488739, 0.2111635059118271, 0.2104148417711258, 0.18048690259456635, 0.1495843231678009]}
Decision: Deciding adaption of TuningHint(doc_id=51, param=<re.Match object; span=(8, 27), match='max_heap_table_size'>, value=<re.Match object; span=(0, 2), match='64'>, recommendation='64 M', passage='Current max_heap_table_size = 64 M\nCurrent tmp_table_size = 64 M\nOf 842280 temp tables, 0% were created on disk\nCreated disk tmp tables ratio seems fine\nTABLE SCANS\nCurrent read_buffer_size = 128 K\nCurrent table scan ratio = 50 : 1 tmp_table_size ', float_val=64.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.2104148417711258, 0.18048690259456635, 0.2483503520488739, 0.1495843231678009, 0.2111635059118271]
Choice: 4
type: 3, value: 64.0, unit: 
Done flag: False
No warmup - hint counter: 36
{'sequence': '64 M', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.4489474296569824, 0.21212896704673767, 0.16816607117652893, 0.14567673206329346, 0.0250808447599411]}
Decision: Deciding weight of TuningHint(doc_id=51, param=<re.Match object; span=(8, 27), match='max_heap_table_size'>, value=<re.Match object; span=(0, 2), match='64'>, recommendation='64 M', passage='Current max_heap_table_size = 64 M\nCurrent tmp_table_size = 64 M\nOf 842280 temp tables, 0% were created on disk\nCreated disk tmp tables ratio seems fine\nTABLE SCANS\nCurrent read_buffer_size = 128 K\nCurrent table scan ratio = 50 : 1 tmp_table_size ', float_val=64.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.0250808447599411, 0.4489474296569824, 0.21212896704673767, 0.16816607117652893, 0.14567673206329346]
--- Tuning Updates ---
Minimal time (ms): 0.015606064446828216
Achieved with configuration: {'innodb_buffer_pool_size': '16000000'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Decision: Deciding adaption of TuningHint(doc_id=51, param=<re.Match object; span=(8, 27), match='max_heap_table_size'>, value=<re.Match object; span=(0, 2), match='64'>, recommendation='64 M', passage='Current max_heap_table_size = 64 M\nCurrent tmp_table_size = 64 M\nOf 842280 temp tables, 0% were created on disk\nCreated disk tmp tables ratio seems fine\nTABLE SCANS\nCurrent read_buffer_size = 128 K\nCurrent table scan ratio = 50 : 1 tmp_table_size ', float_val=64.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.2104148417711258, 0.18048690259456635, 0.2483503520488739, 0.1495843231678009, 0.2111635059118271]
Choice: 3
type: 3, value: 64.0, unit: 
Done flag: False
Decision: Deciding weight of TuningHint(doc_id=51, param=<re.Match object; span=(8, 27), match='max_heap_table_size'>, value=<re.Match object; span=(0, 2), match='64'>, recommendation='64 M', passage='Current max_heap_table_size = 64 M\nCurrent tmp_table_size = 64 M\nOf 842280 temp tables, 0% were created on disk\nCreated disk tmp tables ratio seems fine\nTABLE SCANS\nCurrent read_buffer_size = 128 K\nCurrent table scan ratio = 50 : 1 tmp_table_size ', float_val=64.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.0250808447599411, 0.4489474296569824, 0.21212896704673767, 0.16816607117652893, 0.14567673206329346]
Choice: 0
Trying assigning max_heap_table_size to 128
Adding assignment ('max_heap_table_size', '128') with weight 1
Assignment ('max_heap_table_size', '128') extracted from "Current max_heap_table_size = 64 M
Current tmp_table_size = 64 M
Of 842280 temp tables, 0% were created on disk
Created disk tmp tables ratio seems fine
TABLE SCANS
Current read_buffer_size = 128 K
Current table scan ratio = 50 : 1 tmp_table_size "
Hint counter: 37
Episode hint counter before: 1
Episode hint counter: 2
Hints per episode: 5
Done flag: False
No warmup - hint counter: 37
{'sequence': '103079215104', 'labels': ['Use recommendation', 'Increase recommendation strongly', 'Decrease recommendation', 'Decrease recommendation strongly', 'Increase recommendation'], 'scores': [0.28968876600265503, 0.2042016237974167, 0.1793525516986847, 0.17143696546554565, 0.15532001852989197]}
Decision: Deciding adaption of TuningHint(doc_id=91, param=<re.Match object; span=(241, 260), match='max_heap_table_size'>, value=<re.Match object; span=(0, 12), match='103079215104'>, recommendation='103079215104', passage='Other settings that were modified from their default value in our experiments (innodb_max_purge_lag = 1000000; innodb_max_purge_lag_delay=300000; innodb_sort_buffer_size=67108864; lock_wait_timeout =86400; max_binlog_cache_size= 4294967296; max_heap_table_size=103079215104; tmp_table_size=103079215104)\nSet aurora_disable_hash_join = 0 and aurora_parallel_query = ON to use parallel query\nFollow the best practices for aurora database configuration for any other tuning\nFor parallel query to work, make sure that none of the tables are partitioned log_slave_updates ', float_val=103079215104.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.17143696546554565, 0.1793525516986847, 0.28968876600265503, 0.15532001852989197, 0.2042016237974167]
Choice: 3
type: 3, value: 103079215104.0, unit: 
Done flag: False
No warmup - hint counter: 37
{'sequence': '103079215104', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.4664103090763092, 0.2036713808774948, 0.16894058883190155, 0.13900282979011536, 0.02197493426501751]}
Decision: Deciding weight of TuningHint(doc_id=91, param=<re.Match object; span=(241, 260), match='max_heap_table_size'>, value=<re.Match object; span=(0, 12), match='103079215104'>, recommendation='103079215104', passage='Other settings that were modified from their default value in our experiments (innodb_max_purge_lag = 1000000; innodb_max_purge_lag_delay=300000; innodb_sort_buffer_size=67108864; lock_wait_timeout =86400; max_binlog_cache_size= 4294967296; max_heap_table_size=103079215104; tmp_table_size=103079215104)\nSet aurora_disable_hash_join = 0 and aurora_parallel_query = ON to use parallel query\nFollow the best practices for aurora database configuration for any other tuning\nFor parallel query to work, make sure that none of the tables are partitioned log_slave_updates ', float_val=103079215104.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.02197493426501751, 0.4664103090763092, 0.2036713808774948, 0.16894058883190155, 0.13900282979011536]
Choice: 3
Trying assigning max_heap_table_size to 206158430208
Assignment ('max_heap_table_size', '206158430208') was rejected
Hint counter: 38
Episode hint counter before: 2
Episode hint counter: 3
Hints per episode: 5
Done flag: False
No warmup - hint counter: 38
{'sequence': '16M', 'labels': ['Use recommendation', 'Increase recommendation strongly', 'Decrease recommendation strongly', 'Decrease recommendation', 'Increase recommendation'], 'scores': [0.269285649061203, 0.20589277148246765, 0.18481634557247162, 0.17571312189102173, 0.1642920970916748]}
Decision: Deciding adaption of TuningHint(doc_id=21, param=<re.Match object; span=(5, 19), match='tmp_table_size'>, value=<re.Match object; span=(0, 3), match='16M'>, recommendation='16M', passage='2.1: tmp_table_size and max_heap_table_sizeThe default tmp_table_size and max_heap_table_size values are 16M. These two have to be equal in size! It sets the maximum size for internal in-memory tables, resulting in less creation of temporarily MyISAM tables on the file system. That in return, results in less disk I/O. max_heap_table_size ', float_val=16.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.18481634557247162, 0.17571312189102173, 0.269285649061203, 0.1642920970916748, 0.20589277148246765]
Choice: 0
type: 3, value: 16.0, unit: M
Done flag: False
No warmup - hint counter: 38
{'sequence': '16M', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.4479618966579437, 0.20477630198001862, 0.16790500283241272, 0.1591813862323761, 0.02017541602253914]}
Decision: Deciding weight of TuningHint(doc_id=21, param=<re.Match object; span=(5, 19), match='tmp_table_size'>, value=<re.Match object; span=(0, 3), match='16M'>, recommendation='16M', passage='2.1: tmp_table_size and max_heap_table_sizeThe default tmp_table_size and max_heap_table_size values are 16M. These two have to be equal in size! It sets the maximum size for internal in-memory tables, resulting in less creation of temporarily MyISAM tables on the file system. That in return, results in less disk I/O. max_heap_table_size ', float_val=16.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.02017541602253914, 0.4479618966579437, 0.20477630198001862, 0.16790500283241272, 0.1591813862323761]
--- Tuning Updates ---
Minimal time (ms): 0.015606064446828216
Achieved with configuration: {'innodb_buffer_pool_size': '16000000'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Decision: Deciding adaption of TuningHint(doc_id=21, param=<re.Match object; span=(5, 19), match='tmp_table_size'>, value=<re.Match object; span=(0, 3), match='16M'>, recommendation='16M', passage='2.1: tmp_table_size and max_heap_table_sizeThe default tmp_table_size and max_heap_table_size values are 16M. These two have to be equal in size! It sets the maximum size for internal in-memory tables, resulting in less creation of temporarily MyISAM tables on the file system. That in return, results in less disk I/O. max_heap_table_size ', float_val=16.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.18481634557247162, 0.17571312189102173, 0.269285649061203, 0.1642920970916748, 0.20589277148246765]
Choice: 1
type: 3, value: 16.0, unit: M
Done flag: False
Decision: Deciding weight of TuningHint(doc_id=21, param=<re.Match object; span=(5, 19), match='tmp_table_size'>, value=<re.Match object; span=(0, 3), match='16M'>, recommendation='16M', passage='2.1: tmp_table_size and max_heap_table_sizeThe default tmp_table_size and max_heap_table_size values are 16M. These two have to be equal in size! It sets the maximum size for internal in-memory tables, resulting in less creation of temporarily MyISAM tables on the file system. That in return, results in less disk I/O. max_heap_table_size ', float_val=16.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.02017541602253914, 0.4479618966579437, 0.20477630198001862, 0.16790500283241272, 0.1591813862323761]
Choice: 1
Trying assigning tmp_table_size to 8M
Assignment ('tmp_table_size', '8M') was rejected
Hint counter: 39
Episode hint counter before: 3
Episode hint counter: 4
Hints per episode: 5
Done flag: False
No warmup - hint counter: 39
{'sequence': 'Current Lock Wait ratio = 1 : 383', 'labels': ['Use recommendation', 'Decrease recommendation strongly', 'Increase recommendation strongly', 'Decrease recommendation', 'Increase recommendation'], 'scores': [0.31515952944755554, 0.28624632954597473, 0.21536286175251007, 0.1429685652256012, 0.04026269167661667]}
Decision: Deciding adaption of TuningHint(doc_id=51, param=<re.Match object; span=(202, 216), match='tmp_table_size'>, value=<re.Match object; span=(26, 27), match='1'>, recommendation='Current Lock Wait ratio = 1 : 383', passage='Created disk tmp tables ratio seems fine\nTABLE SCANS\nCurrent read_buffer_size = 128 K\nCurrent table scan ratio = 34 : 1\nread_buffer_size seems to be fine\nTABLE LOCKING\nCurrent Lock Wait ratio = 1 : 383 tmp_table_size ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.28624632954597473, 0.1429685652256012, 0.31515952944755554, 0.04026269167661667, 0.21536286175251007]
Choice: 3
type: 3, value: 1.0, unit: 
Done flag: False
No warmup - hint counter: 39
{'sequence': 'Current Lock Wait ratio = 1 : 383', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.5614549517631531, 0.16823677718639374, 0.1322098970413208, 0.11754565685987473, 0.020552774891257286]}
Decision: Deciding weight of TuningHint(doc_id=51, param=<re.Match object; span=(202, 216), match='tmp_table_size'>, value=<re.Match object; span=(26, 27), match='1'>, recommendation='Current Lock Wait ratio = 1 : 383', passage='Created disk tmp tables ratio seems fine\nTABLE SCANS\nCurrent read_buffer_size = 128 K\nCurrent table scan ratio = 34 : 1\nread_buffer_size seems to be fine\nTABLE LOCKING\nCurrent Lock Wait ratio = 1 : 383 tmp_table_size ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.020552774891257286, 0.5614549517631531, 0.16823677718639374, 0.1322098970413208, 0.11754565685987473]
Choice: 0
Trying assigning tmp_table_size to 2
Assignment ('tmp_table_size', '2') was rejected
Hint counter: 40
Episode hint counter before: 4
Episode hint counter: 5
Hints per episode: 5
Episode finished!
Done flag: True
Finalizing episode!
Weighted hints: defaultdict(<function NlpTuningEnv._finalize_episode.<locals>.<lambda> at 0x7f86e0bfd7a0>, {('max_heap_table_size', '128'): 1})
Selected configurations: [{'max_heap_table_size': '128'}, {'max_heap_table_size': '128'}]
Trying configuration: {'max_heap_table_size': '128'}
--- Tuning Updates ---
Minimal time (ms): 0.015606064446828216
Achieved with configuration: {'innodb_buffer_pool_size': '16000000'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Reward 0.4298409801529839 with {'max_heap_table_size': '128'}
Trying configuration: {'max_heap_table_size': '128'}
--- Tuning Updates ---
Minimal time (ms): 0.015606064446828216
Achieved with configuration: {'innodb_buffer_pool_size': '16000000'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Reward -0.0078044902867207 with {'max_heap_table_size': '128'}
Obtained 0.4298409801529839 by configuration {'max_heap_table_size': '128'}
Achieved unscaled reward of 0.4298409801529839 using {'max_heap_table_size': '128'}.
No warmup - hint counter: 40
{'sequence': 'Current Lock Wait ratio = 1 : 383', 'labels': ['Use recommendation', 'Decrease recommendation strongly', 'Increase recommendation strongly', 'Decrease recommendation', 'Increase recommendation'], 'scores': [0.31515952944755554, 0.28624632954597473, 0.21536286175251007, 0.1429685652256012, 0.04026269167661667]}
Decision: Deciding adaption of TuningHint(doc_id=51, param=<re.Match object; span=(202, 216), match='tmp_table_size'>, value=<re.Match object; span=(30, 33), match='383'>, recommendation='Current Lock Wait ratio = 1 : 383', passage='Created disk tmp tables ratio seems fine\nTABLE SCANS\nCurrent read_buffer_size = 128 K\nCurrent table scan ratio = 34 : 1\nread_buffer_size seems to be fine\nTABLE LOCKING\nCurrent Lock Wait ratio = 1 : 383 tmp_table_size ', float_val=383.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.28624632954597473, 0.1429685652256012, 0.31515952944755554, 0.04026269167661667, 0.21536286175251007]
--- Tuning Updates ---
Minimal time (ms): 0.015606064446828216
Achieved with configuration: {'innodb_buffer_pool_size': '16000000'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Decision: Deciding adaption of TuningHint(doc_id=51, param=<re.Match object; span=(202, 216), match='tmp_table_size'>, value=<re.Match object; span=(30, 33), match='383'>, recommendation='Current Lock Wait ratio = 1 : 383', passage='Created disk tmp tables ratio seems fine\nTABLE SCANS\nCurrent read_buffer_size = 128 K\nCurrent table scan ratio = 34 : 1\nread_buffer_size seems to be fine\nTABLE LOCKING\nCurrent Lock Wait ratio = 1 : 383 tmp_table_size ', float_val=383.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.28624632954597473, 0.1429685652256012, 0.31515952944755554, 0.04026269167661667, 0.21536286175251007]
Choice: 4
type: 3, value: 383.0, unit: 
Done flag: False
No warmup - hint counter: 40
{'sequence': 'Current Lock Wait ratio = 1 : 383', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.5614549517631531, 0.16823677718639374, 0.1322098970413208, 0.11754565685987473, 0.020552774891257286]}
Decision: Deciding weight of TuningHint(doc_id=51, param=<re.Match object; span=(202, 216), match='tmp_table_size'>, value=<re.Match object; span=(30, 33), match='383'>, recommendation='Current Lock Wait ratio = 1 : 383', passage='Created disk tmp tables ratio seems fine\nTABLE SCANS\nCurrent read_buffer_size = 128 K\nCurrent table scan ratio = 34 : 1\nread_buffer_size seems to be fine\nTABLE LOCKING\nCurrent Lock Wait ratio = 1 : 383 tmp_table_size ', float_val=383.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.020552774891257286, 0.5614549517631531, 0.16823677718639374, 0.1322098970413208, 0.11754565685987473]
--- Tuning Updates ---
Minimal time (ms): 0.015606064446828216
Achieved with configuration: {'innodb_buffer_pool_size': '16000000'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Decision: Deciding adaption of TuningHint(doc_id=51, param=<re.Match object; span=(202, 216), match='tmp_table_size'>, value=<re.Match object; span=(30, 33), match='383'>, recommendation='Current Lock Wait ratio = 1 : 383', passage='Created disk tmp tables ratio seems fine\nTABLE SCANS\nCurrent read_buffer_size = 128 K\nCurrent table scan ratio = 34 : 1\nread_buffer_size seems to be fine\nTABLE LOCKING\nCurrent Lock Wait ratio = 1 : 383 tmp_table_size ', float_val=383.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.28624632954597473, 0.1429685652256012, 0.31515952944755554, 0.04026269167661667, 0.21536286175251007]
Choice: 3
type: 3, value: 383.0, unit: 
Done flag: False
Decision: Deciding weight of TuningHint(doc_id=51, param=<re.Match object; span=(202, 216), match='tmp_table_size'>, value=<re.Match object; span=(30, 33), match='383'>, recommendation='Current Lock Wait ratio = 1 : 383', passage='Created disk tmp tables ratio seems fine\nTABLE SCANS\nCurrent read_buffer_size = 128 K\nCurrent table scan ratio = 34 : 1\nread_buffer_size seems to be fine\nTABLE LOCKING\nCurrent Lock Wait ratio = 1 : 383 tmp_table_size ', float_val=383.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.020552774891257286, 0.5614549517631531, 0.16823677718639374, 0.1322098970413208, 0.11754565685987473]
Choice: 0
Trying assigning tmp_table_size to 766
Assignment ('tmp_table_size', '766') was rejected
Hint counter: 41
Episode hint counter before: 0
Episode hint counter: 1
Hints per episode: 5
Done flag: False
No warmup - hint counter: 41
{'sequence': '32-bit integers', 'labels': ['Use recommendation', 'Increase recommendation strongly', 'Increase recommendation', 'Decrease recommendation strongly', 'Decrease recommendation'], 'scores': [0.37734195590019226, 0.1892591416835785, 0.17357157170772552, 0.14247840642929077, 0.11734890937805176]}
Decision: Deciding adaption of TuningHint(doc_id=93, param=<re.Match object; span=(404, 418), match='tmp_table_size'>, value=<re.Match object; span=(0, 2), match='32'>, recommendation='32-bit integers', passage='table_kbytes_out(<table>)Uses the string representation of the input sample to perform a look up in\nthe specified table. If the key is not found in the table, integer value zero\nis returned. Otherwise the converter returns the cumulative number of server-\nto-client data associated with the input sample in the designated table,\nmeasured in kilobytes. The test is currently performed on 32-bit integers, tmp_table_size ', float_val=32.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.14247840642929077, 0.11734890937805176, 0.37734195590019226, 0.17357157170772552, 0.1892591416835785]
Choice: 1
type: 3, value: 32.0, unit: 
Done flag: False
No warmup - hint counter: 41
{'sequence': '32-bit integers', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.527557909488678, 0.1921354979276657, 0.14903394877910614, 0.10914897173643112, 0.022123709321022034]}
Decision: Deciding weight of TuningHint(doc_id=93, param=<re.Match object; span=(404, 418), match='tmp_table_size'>, value=<re.Match object; span=(0, 2), match='32'>, recommendation='32-bit integers', passage='table_kbytes_out(<table>)Uses the string representation of the input sample to perform a look up in\nthe specified table. If the key is not found in the table, integer value zero\nis returned. Otherwise the converter returns the cumulative number of server-\nto-client data associated with the input sample in the designated table,\nmeasured in kilobytes. The test is currently performed on 32-bit integers, tmp_table_size ', float_val=32.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.022123709321022034, 0.527557909488678, 0.1921354979276657, 0.14903394877910614, 0.10914897173643112]
Choice: 4
Trying assigning tmp_table_size to 16
Adding assignment ('tmp_table_size', '16') with weight 16
Assignment ('tmp_table_size', '16') extracted from "table_kbytes_out(<table>)Uses the string representation of the input sample to perform a look up in
the specified table. If the key is not found in the table, integer value zero
is returned. Otherwise the converter returns the cumulative number of server-
to-client data associated with the input sample in the designated table,
measured in kilobytes. The test is currently performed on 32-bit integers, tmp_table_size "
Hint counter: 42
Episode hint counter before: 1
Episode hint counter: 2
Hints per episode: 5
Done flag: False
No warmup - hint counter: 42
{'sequence': 'somewhere between 20 and 40', 'labels': ['Use recommendation', 'Increase recommendation', 'Decrease recommendation', 'Increase recommendation strongly', 'Decrease recommendation strongly'], 'scores': [0.3311101794242859, 0.19846028089523315, 0.1842481940984726, 0.1575593203306198, 0.12862208485603333]}
Decision: Deciding adaption of TuningHint(doc_id=21, param=<re.Match object; span=(45, 62), match='thread_cache_size'>, value=<re.Match object; span=(18, 20), match='20'>, recommendation='somewhere between 20 and 40', passage='You can use the MySQL Server System variable thread_cache_size to configure how many threads must be cached by MySQL. This is one of those configuration settings that, probably, provides the least performance gain, but still…\nDon’t set this one too high, somewhere between 20 and 40 is often good enough:\nthread_cache_size = 20Code language: TOML, also INI (ini)\nWhen you execute the previous statement again, the values will be: max_binlog_stmt_cache_size ', float_val=20.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.12862208485603333, 0.1842481940984726, 0.3311101794242859, 0.19846028089523315, 0.1575593203306198]
Choice: 3
type: 3, value: 20.0, unit: 
Done flag: False
No warmup - hint counter: 42
{'sequence': 'somewhere between 20 and 40', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.5021036267280579, 0.1997094303369522, 0.1515452265739441, 0.11511635780334473, 0.031525351107120514]}
Decision: Deciding weight of TuningHint(doc_id=21, param=<re.Match object; span=(45, 62), match='thread_cache_size'>, value=<re.Match object; span=(18, 20), match='20'>, recommendation='somewhere between 20 and 40', passage='You can use the MySQL Server System variable thread_cache_size to configure how many threads must be cached by MySQL. This is one of those configuration settings that, probably, provides the least performance gain, but still…\nDon’t set this one too high, somewhere between 20 and 40 is often good enough:\nthread_cache_size = 20Code language: TOML, also INI (ini)\nWhen you execute the previous statement again, the values will be: max_binlog_stmt_cache_size ', float_val=20.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.031525351107120514, 0.5021036267280579, 0.1997094303369522, 0.1515452265739441, 0.11511635780334473]
--- Tuning Updates ---
Minimal time (ms): 0.015606064446828216
Achieved with configuration: {'innodb_buffer_pool_size': '16000000'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Decision: Deciding adaption of TuningHint(doc_id=21, param=<re.Match object; span=(45, 62), match='thread_cache_size'>, value=<re.Match object; span=(18, 20), match='20'>, recommendation='somewhere between 20 and 40', passage='You can use the MySQL Server System variable thread_cache_size to configure how many threads must be cached by MySQL. This is one of those configuration settings that, probably, provides the least performance gain, but still…\nDon’t set this one too high, somewhere between 20 and 40 is often good enough:\nthread_cache_size = 20Code language: TOML, also INI (ini)\nWhen you execute the previous statement again, the values will be: max_binlog_stmt_cache_size ', float_val=20.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.12862208485603333, 0.1842481940984726, 0.3311101794242859, 0.19846028089523315, 0.1575593203306198]
Choice: 0
type: 3, value: 20.0, unit: 
Done flag: False
Decision: Deciding weight of TuningHint(doc_id=21, param=<re.Match object; span=(45, 62), match='thread_cache_size'>, value=<re.Match object; span=(18, 20), match='20'>, recommendation='somewhere between 20 and 40', passage='You can use the MySQL Server System variable thread_cache_size to configure how many threads must be cached by MySQL. This is one of those configuration settings that, probably, provides the least performance gain, but still…\nDon’t set this one too high, somewhere between 20 and 40 is often good enough:\nthread_cache_size = 20Code language: TOML, also INI (ini)\nWhen you execute the previous statement again, the values will be: max_binlog_stmt_cache_size ', float_val=20.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.031525351107120514, 0.5021036267280579, 0.1997094303369522, 0.1515452265739441, 0.11511635780334473]
Choice: 4
Trying assigning thread_cache_size to 5
Adding assignment ('thread_cache_size', '5') with weight 16
Assignment ('thread_cache_size', '5') extracted from "You can use the MySQL Server System variable thread_cache_size to configure how many threads must be cached by MySQL. This is one of those configuration settings that, probably, provides the least performance gain, but still…
Don’t set this one too high, somewhere between 20 and 40 is often good enough:
thread_cache_size = 20Code language: TOML, also INI (ini)
When you execute the previous statement again, the values will be: max_binlog_stmt_cache_size "
Hint counter: 43
Episode hint counter before: 2
Episode hint counter: 3
Hints per episode: 5
Done flag: False
No warmup - hint counter: 43
{'sequence': 'somewhere between 20 and 40', 'labels': ['Use recommendation', 'Increase recommendation', 'Decrease recommendation', 'Increase recommendation strongly', 'Decrease recommendation strongly'], 'scores': [0.3311101794242859, 0.19846028089523315, 0.1842481940984726, 0.1575593203306198, 0.12862208485603333]}
Decision: Deciding adaption of TuningHint(doc_id=21, param=<re.Match object; span=(45, 62), match='thread_cache_size'>, value=<re.Match object; span=(25, 27), match='40'>, recommendation='somewhere between 20 and 40', passage='You can use the MySQL Server System variable thread_cache_size to configure how many threads must be cached by MySQL. This is one of those configuration settings that, probably, provides the least performance gain, but still…\nDon’t set this one too high, somewhere between 20 and 40 is often good enough:\nthread_cache_size = 20Code language: TOML, also INI (ini)\nWhen you execute the previous statement again, the values will be: max_binlog_stmt_cache_size ', float_val=40.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.12862208485603333, 0.1842481940984726, 0.3311101794242859, 0.19846028089523315, 0.1575593203306198]
Choice: 1
type: 3, value: 40.0, unit: 
Done flag: False
No warmup - hint counter: 43
{'sequence': 'somewhere between 20 and 40', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.5021036267280579, 0.1997094303369522, 0.1515452265739441, 0.11511635780334473, 0.031525351107120514]}
Decision: Deciding weight of TuningHint(doc_id=21, param=<re.Match object; span=(45, 62), match='thread_cache_size'>, value=<re.Match object; span=(25, 27), match='40'>, recommendation='somewhere between 20 and 40', passage='You can use the MySQL Server System variable thread_cache_size to configure how many threads must be cached by MySQL. This is one of those configuration settings that, probably, provides the least performance gain, but still…\nDon’t set this one too high, somewhere between 20 and 40 is often good enough:\nthread_cache_size = 20Code language: TOML, also INI (ini)\nWhen you execute the previous statement again, the values will be: max_binlog_stmt_cache_size ', float_val=40.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.031525351107120514, 0.5021036267280579, 0.1997094303369522, 0.1515452265739441, 0.11511635780334473]
Choice: 4
Trying assigning thread_cache_size to 20
Adding assignment ('thread_cache_size', '20') with weight 16
Assignment ('thread_cache_size', '20') extracted from "You can use the MySQL Server System variable thread_cache_size to configure how many threads must be cached by MySQL. This is one of those configuration settings that, probably, provides the least performance gain, but still…
Don’t set this one too high, somewhere between 20 and 40 is often good enough:
thread_cache_size = 20Code language: TOML, also INI (ini)
When you execute the previous statement again, the values will be: max_binlog_stmt_cache_size "
Hint counter: 44
Episode hint counter before: 3
Episode hint counter: 4
Hints per episode: 5
Done flag: False
No warmup - hint counter: 44
{'sequence': '256', 'labels': ['Use recommendation', 'Decrease recommendation strongly', 'Decrease recommendation', 'Increase recommendation strongly', 'Increase recommendation'], 'scores': [0.26477324962615967, 0.21567369997501373, 0.18666322529315948, 0.18013949692249298, 0.15275031328201294]}
Decision: Deciding adaption of TuningHint(doc_id=51, param=<re.Match object; span=(297, 314), match='thread_cache_size'>, value=<re.Match object; span=(0, 3), match='256'>, recommendation='256', passage='I also know that these 27 connection was used by some applications that running some check queries in spesific time interval. (10sec, 4sec, 2sec) So when they run queries , their connection_time return 0 and count again as they are never closed.\nI believe that in the peak_time, we are gonna need thread_cache_size, so configuring this parameter as 256 would be good for our system.\nI know it is so hard to understand for now but can you please check my innodb engine status and give me some advice as I am not very good at concept of database management systems. slow_query_log ', float_val=256.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.21567369997501373, 0.18666322529315948, 0.26477324962615967, 0.15275031328201294, 0.18013949692249298]
Choice: 1
type: 3, value: 256.0, unit: 
Done flag: False
No warmup - hint counter: 44
{'sequence': '256', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.4565013349056244, 0.20721018314361572, 0.16764198243618011, 0.14377263188362122, 0.024873845279216766]}
Decision: Deciding weight of TuningHint(doc_id=51, param=<re.Match object; span=(297, 314), match='thread_cache_size'>, value=<re.Match object; span=(0, 3), match='256'>, recommendation='256', passage='I also know that these 27 connection was used by some applications that running some check queries in spesific time interval. (10sec, 4sec, 2sec) So when they run queries , their connection_time return 0 and count again as they are never closed.\nI believe that in the peak_time, we are gonna need thread_cache_size, so configuring this parameter as 256 would be good for our system.\nI know it is so hard to understand for now but can you please check my innodb engine status and give me some advice as I am not very good at concept of database management systems. slow_query_log ', float_val=256.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.024873845279216766, 0.4565013349056244, 0.20721018314361572, 0.16764198243618011, 0.14377263188362122]
--- Tuning Updates ---
Minimal time (ms): 0.015606064446828216
Achieved with configuration: {'innodb_buffer_pool_size': '16000000'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Decision: Deciding adaption of TuningHint(doc_id=51, param=<re.Match object; span=(297, 314), match='thread_cache_size'>, value=<re.Match object; span=(0, 3), match='256'>, recommendation='256', passage='I also know that these 27 connection was used by some applications that running some check queries in spesific time interval. (10sec, 4sec, 2sec) So when they run queries , their connection_time return 0 and count again as they are never closed.\nI believe that in the peak_time, we are gonna need thread_cache_size, so configuring this parameter as 256 would be good for our system.\nI know it is so hard to understand for now but can you please check my innodb engine status and give me some advice as I am not very good at concept of database management systems. slow_query_log ', float_val=256.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.21567369997501373, 0.18666322529315948, 0.26477324962615967, 0.15275031328201294, 0.18013949692249298]
Choice: 3
type: 3, value: 256.0, unit: 
Done flag: False
Decision: Deciding weight of TuningHint(doc_id=51, param=<re.Match object; span=(297, 314), match='thread_cache_size'>, value=<re.Match object; span=(0, 3), match='256'>, recommendation='256', passage='I also know that these 27 connection was used by some applications that running some check queries in spesific time interval. (10sec, 4sec, 2sec) So when they run queries , their connection_time return 0 and count again as they are never closed.\nI believe that in the peak_time, we are gonna need thread_cache_size, so configuring this parameter as 256 would be good for our system.\nI know it is so hard to understand for now but can you please check my innodb engine status and give me some advice as I am not very good at concept of database management systems. slow_query_log ', float_val=256.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.024873845279216766, 0.4565013349056244, 0.20721018314361572, 0.16764198243618011, 0.14377263188362122]
Choice: 0
Trying assigning thread_cache_size to 512
Adding assignment ('thread_cache_size', '512') with weight 1
Assignment ('thread_cache_size', '512') extracted from "I also know that these 27 connection was used by some applications that running some check queries in spesific time interval. (10sec, 4sec, 2sec) So when they run queries , their connection_time return 0 and count again as they are never closed.
I believe that in the peak_time, we are gonna need thread_cache_size, so configuring this parameter as 256 would be good for our system.
I know it is so hard to understand for now but can you please check my innodb engine status and give me some advice as I am not very good at concept of database management systems. slow_query_log "
Hint counter: 45
Episode hint counter before: 4
Episode hint counter: 5
Hints per episode: 5
Episode finished!
Done flag: True
Finalizing episode!
Weighted hints: defaultdict(<function NlpTuningEnv._finalize_episode.<locals>.<lambda> at 0x7f86e0bfac20>, {('tmp_table_size', '16'): 16, ('thread_cache_size', '5'): 16, ('thread_cache_size', '20'): 16, ('thread_cache_size', '512'): 1})
Selected configurations: [{'tmp_table_size': '16', 'thread_cache_size': '20'}, {'tmp_table_size': '16', 'thread_cache_size': '512'}]
Trying configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
--- Tuning Updates ---
Minimal time (ms): 0.009358575514691214
Achieved with configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Reward 0.4073161380323348 with {'tmp_table_size': '16', 'thread_cache_size': '20'}
Trying configuration: {'tmp_table_size': '16', 'thread_cache_size': '512'}
--- Tuning Updates ---
Minimal time (ms): 0.009358575514691214
Achieved with configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Reward -0.09221437293768098 with {'tmp_table_size': '16', 'thread_cache_size': '512'}
Obtained 0.4073161380323348 by configuration {'tmp_table_size': '16', 'thread_cache_size': '20'}
Achieved unscaled reward of 0.4073161380323348 using {'tmp_table_size': '16', 'thread_cache_size': '20'}.
No warmup - hint counter: 45
{'sequence': '256', 'labels': ['Use recommendation', 'Decrease recommendation strongly', 'Decrease recommendation', 'Increase recommendation strongly', 'Increase recommendation'], 'scores': [0.26477324962615967, 0.21567369997501373, 0.18666322529315948, 0.18013949692249298, 0.15275031328201294]}
Decision: Deciding adaption of TuningHint(doc_id=51, param=<re.Match object; span=(23, 40), match='thread_cache_size'>, value=<re.Match object; span=(0, 3), match='256'>, recommendation='256', passage='WORKER THREADS\nCurrent thread_cache_size = 256\nCurrent threads_cached = 109\nCurrent threads_per_sec = 0\nHistoric threads_per_sec = 0\nYour thread_cache_size is fine\nMAX CONNECTIONS thread_cache_size ', float_val=256.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.21567369997501373, 0.18666322529315948, 0.26477324962615967, 0.15275031328201294, 0.18013949692249298]
--- Tuning Updates ---
Minimal time (ms): 0.009358575514691214
Achieved with configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Decision: Deciding adaption of TuningHint(doc_id=51, param=<re.Match object; span=(23, 40), match='thread_cache_size'>, value=<re.Match object; span=(0, 3), match='256'>, recommendation='256', passage='WORKER THREADS\nCurrent thread_cache_size = 256\nCurrent threads_cached = 109\nCurrent threads_per_sec = 0\nHistoric threads_per_sec = 0\nYour thread_cache_size is fine\nMAX CONNECTIONS thread_cache_size ', float_val=256.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.21567369997501373, 0.18666322529315948, 0.26477324962615967, 0.15275031328201294, 0.18013949692249298]
Choice: 2
type: 3, value: 256.0, unit: 
Done flag: False
No warmup - hint counter: 45
{'sequence': '256', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.4565013349056244, 0.20721018314361572, 0.16764198243618011, 0.14377263188362122, 0.024873845279216766]}
Decision: Deciding weight of TuningHint(doc_id=51, param=<re.Match object; span=(23, 40), match='thread_cache_size'>, value=<re.Match object; span=(0, 3), match='256'>, recommendation='256', passage='WORKER THREADS\nCurrent thread_cache_size = 256\nCurrent threads_cached = 109\nCurrent threads_per_sec = 0\nHistoric threads_per_sec = 0\nYour thread_cache_size is fine\nMAX CONNECTIONS thread_cache_size ', float_val=256.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.024873845279216766, 0.4565013349056244, 0.20721018314361572, 0.16764198243618011, 0.14377263188362122]
Choice: 2
Trying assigning thread_cache_size to 256
Adding assignment ('thread_cache_size', '256') with weight 4
Assignment ('thread_cache_size', '256') extracted from "WORKER THREADS
Current thread_cache_size = 256
Current threads_cached = 109
Current threads_per_sec = 0
Historic threads_per_sec = 0
Your thread_cache_size is fine
MAX CONNECTIONS thread_cache_size "
Hint counter: 46
Episode hint counter before: 0
Episode hint counter: 1
Hints per episode: 5
Done flag: False
No warmup - hint counter: 46
{'sequence': '4', 'labels': ['Use recommendation', 'Increase recommendation strongly', 'Decrease recommendation strongly', 'Increase recommendation', 'Decrease recommendation'], 'scores': [0.24198351800441742, 0.23620173335075378, 0.19109122455120087, 0.1809968501329422, 0.14972664415836334]}
Decision: Deciding adaption of TuningHint(doc_id=56, param=<re.Match object; span=(23, 40), match='thread_cache_size'>, value=<re.Match object; span=(0, 1), match='4'>, recommendation='4', passage='net_buffer_length = 1M\nthread_cache_size = 4\nquery_cache_type = 1 ***\nquery_cache_size = 4M ***\nN.B. Turning on the query_cache (query_cache_type=1) can cause problems with if you have a newer server (>=5.7) and mixed clients (some below 5.7, some above). query_cache_size ', float_val=4.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.19109122455120087, 0.14972664415836334, 0.24198351800441742, 0.1809968501329422, 0.23620173335075378]
Choice: 2
type: 3, value: 4.0, unit: 
Done flag: False
No warmup - hint counter: 46
{'sequence': '4', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.4751526415348053, 0.198303684592247, 0.15801726281642914, 0.14068041741847992, 0.027845947071909904]}
Decision: Deciding weight of TuningHint(doc_id=56, param=<re.Match object; span=(23, 40), match='thread_cache_size'>, value=<re.Match object; span=(0, 1), match='4'>, recommendation='4', passage='net_buffer_length = 1M\nthread_cache_size = 4\nquery_cache_type = 1 ***\nquery_cache_size = 4M ***\nN.B. Turning on the query_cache (query_cache_type=1) can cause problems with if you have a newer server (>=5.7) and mixed clients (some below 5.7, some above). query_cache_size ', float_val=4.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.027845947071909904, 0.4751526415348053, 0.198303684592247, 0.15801726281642914, 0.14068041741847992]
--- Tuning Updates ---
Minimal time (ms): 0.009358575514691214
Achieved with configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Decision: Deciding adaption of TuningHint(doc_id=56, param=<re.Match object; span=(23, 40), match='thread_cache_size'>, value=<re.Match object; span=(0, 1), match='4'>, recommendation='4', passage='net_buffer_length = 1M\nthread_cache_size = 4\nquery_cache_type = 1 ***\nquery_cache_size = 4M ***\nN.B. Turning on the query_cache (query_cache_type=1) can cause problems with if you have a newer server (>=5.7) and mixed clients (some below 5.7, some above). query_cache_size ', float_val=4.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.19109122455120087, 0.14972664415836334, 0.24198351800441742, 0.1809968501329422, 0.23620173335075378]
Choice: 1
type: 3, value: 4.0, unit: 
Done flag: False
Decision: Deciding weight of TuningHint(doc_id=56, param=<re.Match object; span=(23, 40), match='thread_cache_size'>, value=<re.Match object; span=(0, 1), match='4'>, recommendation='4', passage='net_buffer_length = 1M\nthread_cache_size = 4\nquery_cache_type = 1 ***\nquery_cache_size = 4M ***\nN.B. Turning on the query_cache (query_cache_type=1) can cause problems with if you have a newer server (>=5.7) and mixed clients (some below 5.7, some above). query_cache_size ', float_val=4.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.027845947071909904, 0.4751526415348053, 0.198303684592247, 0.15801726281642914, 0.14068041741847992]
Choice: 4
Trying assigning thread_cache_size to 2
Adding assignment ('thread_cache_size', '2') with weight 16
Assignment ('thread_cache_size', '2') extracted from "net_buffer_length = 1M
thread_cache_size = 4
query_cache_type = 1 ***
query_cache_size = 4M ***
N.B. Turning on the query_cache (query_cache_type=1) can cause problems with if you have a newer server (>=5.7) and mixed clients (some below 5.7, some above). query_cache_size "
Hint counter: 47
Episode hint counter before: 1
Episode hint counter: 2
Hints per episode: 5
Done flag: False
No warmup - hint counter: 47
{'sequence': '800', 'labels': ['Use recommendation', 'Decrease recommendation strongly', 'Increase recommendation strongly', 'Decrease recommendation', 'Increase recommendation'], 'scores': [0.27043232321739197, 0.2013753354549408, 0.17678537964820862, 0.17604351043701172, 0.1753634810447693]}
Decision: Deciding adaption of TuningHint(doc_id=51, param=<re.Match object; span=(138, 153), match='max_connections'>, value=<re.Match object; span=(0, 3), match='800'>, recommendation='800', passage='query_cache_type=0\nquery_cache_size=0\n#query_cache_limit = 4M\ndefault_table_type = InnoDB\ntable_open_cache = 4096\nopen_files_limit = 8192\nmax_connections = 800 query_cache_limit ', float_val=800.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.2013753354549408, 0.17604351043701172, 0.27043232321739197, 0.1753634810447693, 0.17678537964820862]
Choice: 4
type: 3, value: 800.0, unit: 
Done flag: False
No warmup - hint counter: 47
{'sequence': '800', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.44564226269721985, 0.2066001445055008, 0.17061680555343628, 0.15375812351703644, 0.023382654413580894]}
Decision: Deciding weight of TuningHint(doc_id=51, param=<re.Match object; span=(138, 153), match='max_connections'>, value=<re.Match object; span=(0, 3), match='800'>, recommendation='800', passage='query_cache_type=0\nquery_cache_size=0\n#query_cache_limit = 4M\ndefault_table_type = InnoDB\ntable_open_cache = 4096\nopen_files_limit = 8192\nmax_connections = 800 query_cache_limit ', float_val=800.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.023382654413580894, 0.44564226269721985, 0.2066001445055008, 0.17061680555343628, 0.15375812351703644]
Choice: 4
Trying assigning max_connections to 3200
Adding assignment ('max_connections', '3200') with weight 16
Assignment ('max_connections', '3200') extracted from "query_cache_type=0
query_cache_size=0
#query_cache_limit = 4M
default_table_type = InnoDB
table_open_cache = 4096
open_files_limit = 8192
max_connections = 800 query_cache_limit "
Hint counter: 48
Episode hint counter before: 2
Episode hint counter: 3
Hints per episode: 5
Done flag: False
No warmup - hint counter: 48
{'sequence': '800', 'labels': ['Use recommendation', 'Decrease recommendation strongly', 'Increase recommendation strongly', 'Decrease recommendation', 'Increase recommendation'], 'scores': [0.27043232321739197, 0.2013753354549408, 0.17678537964820862, 0.17604351043701172, 0.1753634810447693]}
Decision: Deciding adaption of TuningHint(doc_id=51, param=<re.Match object; span=(141, 156), match='max_connections'>, value=<re.Match object; span=(0, 3), match='800'>, recommendation='800', passage='Current threads_cached = 103\nCurrent threads_per_sec = 0\nHistoric threads_per_sec = 0\nYour thread_cache_size is fine\nMAX CONNECTIONS\nCurrent max_connections = 800\nCurrent threads_connected = 17 thread_cache_size ', float_val=800.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.2013753354549408, 0.17604351043701172, 0.27043232321739197, 0.1753634810447693, 0.17678537964820862]
Choice: 1
type: 3, value: 800.0, unit: 
Done flag: False
No warmup - hint counter: 48
{'sequence': '800', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.44564226269721985, 0.2066001445055008, 0.17061680555343628, 0.15375812351703644, 0.023382654413580894]}
Decision: Deciding weight of TuningHint(doc_id=51, param=<re.Match object; span=(141, 156), match='max_connections'>, value=<re.Match object; span=(0, 3), match='800'>, recommendation='800', passage='Current threads_cached = 103\nCurrent threads_per_sec = 0\nHistoric threads_per_sec = 0\nYour thread_cache_size is fine\nMAX CONNECTIONS\nCurrent max_connections = 800\nCurrent threads_connected = 17 thread_cache_size ', float_val=800.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.023382654413580894, 0.44564226269721985, 0.2066001445055008, 0.17061680555343628, 0.15375812351703644]
--- Tuning Updates ---
Minimal time (ms): 0.009358575514691214
Achieved with configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Decision: Deciding adaption of TuningHint(doc_id=51, param=<re.Match object; span=(141, 156), match='max_connections'>, value=<re.Match object; span=(0, 3), match='800'>, recommendation='800', passage='Current threads_cached = 103\nCurrent threads_per_sec = 0\nHistoric threads_per_sec = 0\nYour thread_cache_size is fine\nMAX CONNECTIONS\nCurrent max_connections = 800\nCurrent threads_connected = 17 thread_cache_size ', float_val=800.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.2013753354549408, 0.17604351043701172, 0.27043232321739197, 0.1753634810447693, 0.17678537964820862]
Choice: 1
type: 3, value: 800.0, unit: 
Done flag: False
Decision: Deciding weight of TuningHint(doc_id=51, param=<re.Match object; span=(141, 156), match='max_connections'>, value=<re.Match object; span=(0, 3), match='800'>, recommendation='800', passage='Current threads_cached = 103\nCurrent threads_per_sec = 0\nHistoric threads_per_sec = 0\nYour thread_cache_size is fine\nMAX CONNECTIONS\nCurrent max_connections = 800\nCurrent threads_connected = 17 thread_cache_size ', float_val=800.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.023382654413580894, 0.44564226269721985, 0.2066001445055008, 0.17061680555343628, 0.15375812351703644]
Choice: 2
Trying assigning max_connections to 400
Assignment ('max_connections', '400') was rejected
Hint counter: 49
Episode hint counter before: 3
Episode hint counter: 4
Hints per episode: 5
Done flag: False
No warmup - hint counter: 49
{'sequence': '800', 'labels': ['Use recommendation', 'Decrease recommendation strongly', 'Increase recommendation strongly', 'Decrease recommendation', 'Increase recommendation'], 'scores': [0.27043232321739197, 0.2013753354549408, 0.17678537964820862, 0.17604351043701172, 0.1753634810447693]}
Decision: Deciding adaption of TuningHint(doc_id=51, param=<re.Match object; span=(8, 23), match='max_connections'>, value=<re.Match object; span=(0, 3), match='800'>, recommendation='800', passage='Current max_connections = 800\nCurrent threads_connected = 24\nHistoric max_used_connections = 156\nThe number of used connections is 19% of the configured maximum.\nYour max_connections variable seems to be fine.\nINNODB STATUS\nCurrent InnoDB index space = 5.79 G max_connections ', float_val=800.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.2013753354549408, 0.17604351043701172, 0.27043232321739197, 0.1753634810447693, 0.17678537964820862]
Choice: 4
type: 3, value: 800.0, unit: 
Done flag: False
No warmup - hint counter: 49
{'sequence': '800', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.44564226269721985, 0.2066001445055008, 0.17061680555343628, 0.15375812351703644, 0.023382654413580894]}
Decision: Deciding weight of TuningHint(doc_id=51, param=<re.Match object; span=(8, 23), match='max_connections'>, value=<re.Match object; span=(0, 3), match='800'>, recommendation='800', passage='Current max_connections = 800\nCurrent threads_connected = 24\nHistoric max_used_connections = 156\nThe number of used connections is 19% of the configured maximum.\nYour max_connections variable seems to be fine.\nINNODB STATUS\nCurrent InnoDB index space = 5.79 G max_connections ', float_val=800.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.023382654413580894, 0.44564226269721985, 0.2066001445055008, 0.17061680555343628, 0.15375812351703644]
Choice: 1
Trying assigning max_connections to 3200
Assignment ('max_connections', '3200') was rejected
Hint counter: 50
Episode hint counter before: 4
Episode hint counter: 5
Hints per episode: 5
Episode finished!
Done flag: True
Finalizing episode!
Weighted hints: defaultdict(<function NlpTuningEnv._finalize_episode.<locals>.<lambda> at 0x7f86e0c8b560>, {('thread_cache_size', '256'): 4, ('thread_cache_size', '2'): 16, ('max_connections', '3200'): 16})
Selected configurations: [{'thread_cache_size': '2', 'max_connections': '3200'}, {'thread_cache_size': '256', 'max_connections': '3200'}]
Trying configuration: {'thread_cache_size': '2', 'max_connections': '3200'}
--- Tuning Updates ---
Minimal time (ms): 0.009358575514691214
Achieved with configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Reward -0.5160756144816789 with {'thread_cache_size': '2', 'max_connections': '3200'}
Trying configuration: {'thread_cache_size': '256', 'max_connections': '3200'}
--- Tuning Updates ---
Minimal time (ms): 0.009358575514691214
Achieved with configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Reward -0.10033138974812927 with {'thread_cache_size': '256', 'max_connections': '3200'}
Obtained 0 by configuration {}
Achieved unscaled reward of 0 using {}.
No warmup - hint counter: 50
{'sequence': '100 concurrent connections', 'labels': ['Use recommendation', 'Increase recommendation strongly', 'Increase recommendation', 'Decrease recommendation strongly', 'Decrease recommendation'], 'scores': [0.36903801560401917, 0.24016445875167847, 0.18420377373695374, 0.10720830410718918, 0.09938544034957886]}
Decision: Deciding adaption of TuningHint(doc_id=70, param=<re.Match object; span=(280, 295), match='max_connections'>, value=<re.Match object; span=(0, 3), match='100'>, recommendation='100 concurrent connections', passage='PostgreSQL supports various types of indexes such as B-Tree (default), Hash, GiST, SP-GiST, and GIN. Here are the detailed steps to create PostgreSQL index.\n5. Increase maximum connections\nBy default, PostgreSQL supports a maximum of 100 concurrent connections. This is stored in max_connections server variable. You can increase this number to support more concurrent connections and keep users from waiting. However, each connection consumes memory, so don’t increase it, unless required. mysql_native_password_proxy_users ', float_val=100.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.10720830410718918, 0.09938544034957886, 0.36903801560401917, 0.18420377373695374, 0.24016445875167847]
--- Tuning Updates ---
Minimal time (ms): 0.009358575514691214
Achieved with configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Decision: Deciding adaption of TuningHint(doc_id=70, param=<re.Match object; span=(280, 295), match='max_connections'>, value=<re.Match object; span=(0, 3), match='100'>, recommendation='100 concurrent connections', passage='PostgreSQL supports various types of indexes such as B-Tree (default), Hash, GiST, SP-GiST, and GIN. Here are the detailed steps to create PostgreSQL index.\n5. Increase maximum connections\nBy default, PostgreSQL supports a maximum of 100 concurrent connections. This is stored in max_connections server variable. You can increase this number to support more concurrent connections and keep users from waiting. However, each connection consumes memory, so don’t increase it, unless required. mysql_native_password_proxy_users ', float_val=100.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.10720830410718918, 0.09938544034957886, 0.36903801560401917, 0.18420377373695374, 0.24016445875167847]
Choice: 1
type: 3, value: 100.0, unit: 
Done flag: False
No warmup - hint counter: 50
{'sequence': '100 concurrent connections', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.500812828540802, 0.19058023393154144, 0.1529761105775833, 0.1369350403547287, 0.018695782870054245]}
Decision: Deciding weight of TuningHint(doc_id=70, param=<re.Match object; span=(280, 295), match='max_connections'>, value=<re.Match object; span=(0, 3), match='100'>, recommendation='100 concurrent connections', passage='PostgreSQL supports various types of indexes such as B-Tree (default), Hash, GiST, SP-GiST, and GIN. Here are the detailed steps to create PostgreSQL index.\n5. Increase maximum connections\nBy default, PostgreSQL supports a maximum of 100 concurrent connections. This is stored in max_connections server variable. You can increase this number to support more concurrent connections and keep users from waiting. However, each connection consumes memory, so don’t increase it, unless required. mysql_native_password_proxy_users ', float_val=100.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.018695782870054245, 0.500812828540802, 0.19058023393154144, 0.1529761105775833, 0.1369350403547287]
--- Tuning Updates ---
Minimal time (ms): 0.009358575514691214
Achieved with configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Decision: Deciding adaption of TuningHint(doc_id=70, param=<re.Match object; span=(280, 295), match='max_connections'>, value=<re.Match object; span=(0, 3), match='100'>, recommendation='100 concurrent connections', passage='PostgreSQL supports various types of indexes such as B-Tree (default), Hash, GiST, SP-GiST, and GIN. Here are the detailed steps to create PostgreSQL index.\n5. Increase maximum connections\nBy default, PostgreSQL supports a maximum of 100 concurrent connections. This is stored in max_connections server variable. You can increase this number to support more concurrent connections and keep users from waiting. However, each connection consumes memory, so don’t increase it, unless required. mysql_native_password_proxy_users ', float_val=100.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.10720830410718918, 0.09938544034957886, 0.36903801560401917, 0.18420377373695374, 0.24016445875167847]
Choice: 0
type: 3, value: 100.0, unit: 
Done flag: False
Decision: Deciding weight of TuningHint(doc_id=70, param=<re.Match object; span=(280, 295), match='max_connections'>, value=<re.Match object; span=(0, 3), match='100'>, recommendation='100 concurrent connections', passage='PostgreSQL supports various types of indexes such as B-Tree (default), Hash, GiST, SP-GiST, and GIN. Here are the detailed steps to create PostgreSQL index.\n5. Increase maximum connections\nBy default, PostgreSQL supports a maximum of 100 concurrent connections. This is stored in max_connections server variable. You can increase this number to support more concurrent connections and keep users from waiting. However, each connection consumes memory, so don’t increase it, unless required. mysql_native_password_proxy_users ', float_val=100.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.018695782870054245, 0.500812828540802, 0.19058023393154144, 0.1529761105775833, 0.1369350403547287]
Choice: 2
Trying assigning max_connections to 25
Assignment ('max_connections', '25') was rejected
Hint counter: 51
Episode hint counter before: 0
Episode hint counter: 1
Hints per episode: 5
Done flag: False
No warmup - hint counter: 51
{'sequence': '4,294,967,295', 'labels': ['Use recommendation', 'Increase recommendation strongly', 'Decrease recommendation strongly', 'Increase recommendation', 'Decrease recommendation'], 'scores': [0.2988579571247101, 0.2480342537164688, 0.171305313706398, 0.1532406061887741, 0.12856192886829376]}
Decision: Deciding adaption of TuningHint(doc_id=97, param=<re.Match object; span=(1185, 1200), match='max_connections'>, value=<re.Match object; span=(0, 1), match='4'>, recommendation='4,294,967,295', passage='Get-NetTCPConnection -LocalPort 443 | Measure-ObjectSo, obviously bigger servers will need more threads, but how many? The old school logic when doing IIS tuning for Connectwise Automate is to have half as many worker processes as you have CPU cores (so a server with 8 cores/vCPUs would have 4 worker threads). The idea behind this is to prevent resource starvation. However, there are settings inside of IIS for controlling CPU usage by the worker threads, and they provide much more granular control over the resource utilization.For most partners starting with the old school method is advisable, but if performance is still lacking (or the threads/connections ratio is still disproportionate) it would be worth gradually adding more worker processes (with the IIS resource controls) until an optimal balance is reached. As with other concepts in resource allocation, it’s worth noting that more is not always better, and there is a point of diminishing returns (the tipping point is normally when worker processes exceed core count). It’s also worth noting that additional worker processes will open additional database connections, so care should be taken to prevent hitting the max_connections threshold.Queue LengthIIS application pools also have a property known as queue length. This is simply the number of pending web requests the server will queue before returning the HTTP 503 status code (service not available). All requests pass through this queue first as they are processed by the webserver (there are also other queues, but they are out of scope for our discussion here). The queue length plays a role in determining the total number of concurrent connections; as any request that a worker process can’t accept immediately remains in the queue.In an ideal world, the webserver always can process incoming requests rapidly, and this queue never contains a large volume of requests. However, as discussed in our blog post here, there are inherent performance issues with the Automate database — and that can result in web requests waiting for the database, and thus the queue filling up. Because of this tendency, the Automate installer sets the queue length to 11,000 each on the “Labtech” and “CwaRestApi” application pools — a full 11x greater than the default.It’s important to note cause and effect bidirectionally as we look at tuning this setting. In most cases, a high queue length is caused by contention in MySQL. This makes IIS unable to process requests, and the queue fills. However, once MySQL recovers, the queued requests begin to flood in and the application response will still be poor until the server catches up. It’s during these times that the Control Center will lock up and be unresponsive.The million-dollar question of course is: when doing IIS tuning for Connectwise Automate, what should the queue length be? In the spirit of the proper use of the queue, we’d suggest setting it to a count that could hold ~60 seconds worth of requests (normally this is ~30% of the agent count). If it takes longer than 60 seconds to process a web request that indicates that there is a real issue, and it would make sense to start returning the 503 status code.As a simple test to gauge this, set Performance Monitor to watch the queue size and recycle the application pool. This is normally lower than the 30% of agents count, but it’s representative of what a short processing delay on the server should look like. If your queue length is comfortably larger than this amount then all is well. For smaller Automate instances where 30% of the agent count would be less than the default of 1000 sticking with the default setting is the best course of action.Connection LimitIIS also has a connection limit for all requests to a website on the server. The default value for this is 4,294,967,295, and it’s a setting that normally doesn’t get much attention, but it did get the spotlight during the 2020.7 Automate patch. This setting is defined on the website level, and it is the funnel that feeds all of the different application pools.So, why does this setting default to the number of IPv4 addresses in existence? This value is set to the upper limit by default to prevent connections from being denied by default (the developers are hedging a bet that the whole internet won’t be accessing an IIS server simultaneously). However, the idea is that this value could be set to make sure that the sum of all connections to the server doesn’t exceed the available resources.If this setting is left to the default, the connection limits at the application pool layer are the controlling factor. The danger here is that it’s possible for the sum of the application pool connections to be greater than the number of connections the server can accommodate. This appears to be the issue with the 2020.7 patch, where the queue length on the application pool was too large, and thus the website connection limit was used to prevent overloading of the server. Obviously, the conditions of the patch were a rather special case, but in general, it is of benefit to partners to configure their servers to be tolerant against connection spikes.When doing IIS tuning for Connectwise Automate this value should be set to the max number of connections the server can process — however, there are a lot of variables in that calculation. As a starting point, it’s advisable to set this to the sum of the application pool queues once they are properly scaled, and work down from there. Please keep in mind that this value will be the cap of agent communications, web interface users, and API calls — and the normal count of those will be different depending on user count, integrations, and how Automate is used in your particular environment.We hope that this has been helpful for you. Here at Automation Theory, we’re certified MySQL DBAs dedicated exclusively to the Connectwise Automate software stack. Be sure to check out our\xa0integrations\xa0and\xa0services.\nPlease leave this field emptyWant to get the latest from our blog delivered to your inbox?Check your inbox or spam folder to confirm your email! Posted on\nAugust 22, 2020August 31, 2020\nTags\nAutomate Performance\nCategories connect_timeout ', float_val=4.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.171305313706398, 0.12856192886829376, 0.2988579571247101, 0.1532406061887741, 0.2480342537164688]
Choice: 3
type: 3, value: 4.0, unit: 
Done flag: False
No warmup - hint counter: 51
{'sequence': '4,294,967,295', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.4919935166835785, 0.20659217238426208, 0.15910853445529938, 0.12174250930547714, 0.020563332363963127]}
Decision: Deciding weight of TuningHint(doc_id=97, param=<re.Match object; span=(1185, 1200), match='max_connections'>, value=<re.Match object; span=(0, 1), match='4'>, recommendation='4,294,967,295', passage='Get-NetTCPConnection -LocalPort 443 | Measure-ObjectSo, obviously bigger servers will need more threads, but how many? The old school logic when doing IIS tuning for Connectwise Automate is to have half as many worker processes as you have CPU cores (so a server with 8 cores/vCPUs would have 4 worker threads). The idea behind this is to prevent resource starvation. However, there are settings inside of IIS for controlling CPU usage by the worker threads, and they provide much more granular control over the resource utilization.For most partners starting with the old school method is advisable, but if performance is still lacking (or the threads/connections ratio is still disproportionate) it would be worth gradually adding more worker processes (with the IIS resource controls) until an optimal balance is reached. As with other concepts in resource allocation, it’s worth noting that more is not always better, and there is a point of diminishing returns (the tipping point is normally when worker processes exceed core count). It’s also worth noting that additional worker processes will open additional database connections, so care should be taken to prevent hitting the max_connections threshold.Queue LengthIIS application pools also have a property known as queue length. This is simply the number of pending web requests the server will queue before returning the HTTP 503 status code (service not available). All requests pass through this queue first as they are processed by the webserver (there are also other queues, but they are out of scope for our discussion here). The queue length plays a role in determining the total number of concurrent connections; as any request that a worker process can’t accept immediately remains in the queue.In an ideal world, the webserver always can process incoming requests rapidly, and this queue never contains a large volume of requests. However, as discussed in our blog post here, there are inherent performance issues with the Automate database — and that can result in web requests waiting for the database, and thus the queue filling up. Because of this tendency, the Automate installer sets the queue length to 11,000 each on the “Labtech” and “CwaRestApi” application pools — a full 11x greater than the default.It’s important to note cause and effect bidirectionally as we look at tuning this setting. In most cases, a high queue length is caused by contention in MySQL. This makes IIS unable to process requests, and the queue fills. However, once MySQL recovers, the queued requests begin to flood in and the application response will still be poor until the server catches up. It’s during these times that the Control Center will lock up and be unresponsive.The million-dollar question of course is: when doing IIS tuning for Connectwise Automate, what should the queue length be? In the spirit of the proper use of the queue, we’d suggest setting it to a count that could hold ~60 seconds worth of requests (normally this is ~30% of the agent count). If it takes longer than 60 seconds to process a web request that indicates that there is a real issue, and it would make sense to start returning the 503 status code.As a simple test to gauge this, set Performance Monitor to watch the queue size and recycle the application pool. This is normally lower than the 30% of agents count, but it’s representative of what a short processing delay on the server should look like. If your queue length is comfortably larger than this amount then all is well. For smaller Automate instances where 30% of the agent count would be less than the default of 1000 sticking with the default setting is the best course of action.Connection LimitIIS also has a connection limit for all requests to a website on the server. The default value for this is 4,294,967,295, and it’s a setting that normally doesn’t get much attention, but it did get the spotlight during the 2020.7 Automate patch. This setting is defined on the website level, and it is the funnel that feeds all of the different application pools.So, why does this setting default to the number of IPv4 addresses in existence? This value is set to the upper limit by default to prevent connections from being denied by default (the developers are hedging a bet that the whole internet won’t be accessing an IIS server simultaneously). However, the idea is that this value could be set to make sure that the sum of all connections to the server doesn’t exceed the available resources.If this setting is left to the default, the connection limits at the application pool layer are the controlling factor. The danger here is that it’s possible for the sum of the application pool connections to be greater than the number of connections the server can accommodate. This appears to be the issue with the 2020.7 patch, where the queue length on the application pool was too large, and thus the website connection limit was used to prevent overloading of the server. Obviously, the conditions of the patch were a rather special case, but in general, it is of benefit to partners to configure their servers to be tolerant against connection spikes.When doing IIS tuning for Connectwise Automate this value should be set to the max number of connections the server can process — however, there are a lot of variables in that calculation. As a starting point, it’s advisable to set this to the sum of the application pool queues once they are properly scaled, and work down from there. Please keep in mind that this value will be the cap of agent communications, web interface users, and API calls — and the normal count of those will be different depending on user count, integrations, and how Automate is used in your particular environment.We hope that this has been helpful for you. Here at Automation Theory, we’re certified MySQL DBAs dedicated exclusively to the Connectwise Automate software stack. Be sure to check out our\xa0integrations\xa0and\xa0services.\nPlease leave this field emptyWant to get the latest from our blog delivered to your inbox?Check your inbox or spam folder to confirm your email! Posted on\nAugust 22, 2020August 31, 2020\nTags\nAutomate Performance\nCategories connect_timeout ', float_val=4.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.020563332363963127, 0.4919935166835785, 0.20659217238426208, 0.15910853445529938, 0.12174250930547714]
Choice: 0
Trying assigning max_connections to 8
Adding assignment ('max_connections', '8') with weight 1
Assignment ('max_connections', '8') extracted from "Get-NetTCPConnection -LocalPort 443 | Measure-ObjectSo, obviously bigger servers will need more threads, but how many? The old school logic when doing IIS tuning for Connectwise Automate is to have half as many worker processes as you have CPU cores (so a server with 8 cores/vCPUs would have 4 worker threads). The idea behind this is to prevent resource starvation. However, there are settings inside of IIS for controlling CPU usage by the worker threads, and they provide much more granular control over the resource utilization.For most partners starting with the old school method is advisable, but if performance is still lacking (or the threads/connections ratio is still disproportionate) it would be worth gradually adding more worker processes (with the IIS resource controls) until an optimal balance is reached. As with other concepts in resource allocation, it’s worth noting that more is not always better, and there is a point of diminishing returns (the tipping point is normally when worker processes exceed core count). It’s also worth noting that additional worker processes will open additional database connections, so care should be taken to prevent hitting the max_connections threshold.Queue LengthIIS application pools also have a property known as queue length. This is simply the number of pending web requests the server will queue before returning the HTTP 503 status code (service not available). All requests pass through this queue first as they are processed by the webserver (there are also other queues, but they are out of scope for our discussion here). The queue length plays a role in determining the total number of concurrent connections; as any request that a worker process can’t accept immediately remains in the queue.In an ideal world, the webserver always can process incoming requests rapidly, and this queue never contains a large volume of requests. However, as discussed in our blog post here, there are inherent performance issues with the Automate database — and that can result in web requests waiting for the database, and thus the queue filling up. Because of this tendency, the Automate installer sets the queue length to 11,000 each on the “Labtech” and “CwaRestApi” application pools — a full 11x greater than the default.It’s important to note cause and effect bidirectionally as we look at tuning this setting. In most cases, a high queue length is caused by contention in MySQL. This makes IIS unable to process requests, and the queue fills. However, once MySQL recovers, the queued requests begin to flood in and the application response will still be poor until the server catches up. It’s during these times that the Control Center will lock up and be unresponsive.The million-dollar question of course is: when doing IIS tuning for Connectwise Automate, what should the queue length be? In the spirit of the proper use of the queue, we’d suggest setting it to a count that could hold ~60 seconds worth of requests (normally this is ~30% of the agent count). If it takes longer than 60 seconds to process a web request that indicates that there is a real issue, and it would make sense to start returning the 503 status code.As a simple test to gauge this, set Performance Monitor to watch the queue size and recycle the application pool. This is normally lower than the 30% of agents count, but it’s representative of what a short processing delay on the server should look like. If your queue length is comfortably larger than this amount then all is well. For smaller Automate instances where 30% of the agent count would be less than the default of 1000 sticking with the default setting is the best course of action.Connection LimitIIS also has a connection limit for all requests to a website on the server. The default value for this is 4,294,967,295, and it’s a setting that normally doesn’t get much attention, but it did get the spotlight during the 2020.7 Automate patch. This setting is defined on the website level, and it is the funnel that feeds all of the different application pools.So, why does this setting default to the number of IPv4 addresses in existence? This value is set to the upper limit by default to prevent connections from being denied by default (the developers are hedging a bet that the whole internet won’t be accessing an IIS server simultaneously). However, the idea is that this value could be set to make sure that the sum of all connections to the server doesn’t exceed the available resources.If this setting is left to the default, the connection limits at the application pool layer are the controlling factor. The danger here is that it’s possible for the sum of the application pool connections to be greater than the number of connections the server can accommodate. This appears to be the issue with the 2020.7 patch, where the queue length on the application pool was too large, and thus the website connection limit was used to prevent overloading of the server. Obviously, the conditions of the patch were a rather special case, but in general, it is of benefit to partners to configure their servers to be tolerant against connection spikes.When doing IIS tuning for Connectwise Automate this value should be set to the max number of connections the server can process — however, there are a lot of variables in that calculation. As a starting point, it’s advisable to set this to the sum of the application pool queues once they are properly scaled, and work down from there. Please keep in mind that this value will be the cap of agent communications, web interface users, and API calls — and the normal count of those will be different depending on user count, integrations, and how Automate is used in your particular environment.We hope that this has been helpful for you. Here at Automation Theory, we’re certified MySQL DBAs dedicated exclusively to the Connectwise Automate software stack. Be sure to check out our integrations and services.
Please leave this field emptyWant to get the latest from our blog delivered to your inbox?Check your inbox or spam folder to confirm your email! Posted on
August 22, 2020August 31, 2020
Tags
Automate Performance
Categories connect_timeout "
Hint counter: 52
Episode hint counter before: 1
Episode hint counter: 2
Hints per episode: 5
Done flag: False
No warmup - hint counter: 52
{'sequence': '4,294,967,295', 'labels': ['Use recommendation', 'Increase recommendation strongly', 'Decrease recommendation strongly', 'Increase recommendation', 'Decrease recommendation'], 'scores': [0.2988579571247101, 0.2480342537164688, 0.171305313706398, 0.1532406061887741, 0.12856192886829376]}
Decision: Deciding adaption of TuningHint(doc_id=97, param=<re.Match object; span=(1185, 1200), match='max_connections'>, value=<re.Match object; span=(2, 5), match='294'>, recommendation='4,294,967,295', passage='Get-NetTCPConnection -LocalPort 443 | Measure-ObjectSo, obviously bigger servers will need more threads, but how many? The old school logic when doing IIS tuning for Connectwise Automate is to have half as many worker processes as you have CPU cores (so a server with 8 cores/vCPUs would have 4 worker threads). The idea behind this is to prevent resource starvation. However, there are settings inside of IIS for controlling CPU usage by the worker threads, and they provide much more granular control over the resource utilization.For most partners starting with the old school method is advisable, but if performance is still lacking (or the threads/connections ratio is still disproportionate) it would be worth gradually adding more worker processes (with the IIS resource controls) until an optimal balance is reached. As with other concepts in resource allocation, it’s worth noting that more is not always better, and there is a point of diminishing returns (the tipping point is normally when worker processes exceed core count). It’s also worth noting that additional worker processes will open additional database connections, so care should be taken to prevent hitting the max_connections threshold.Queue LengthIIS application pools also have a property known as queue length. This is simply the number of pending web requests the server will queue before returning the HTTP 503 status code (service not available). All requests pass through this queue first as they are processed by the webserver (there are also other queues, but they are out of scope for our discussion here). The queue length plays a role in determining the total number of concurrent connections; as any request that a worker process can’t accept immediately remains in the queue.In an ideal world, the webserver always can process incoming requests rapidly, and this queue never contains a large volume of requests. However, as discussed in our blog post here, there are inherent performance issues with the Automate database — and that can result in web requests waiting for the database, and thus the queue filling up. Because of this tendency, the Automate installer sets the queue length to 11,000 each on the “Labtech” and “CwaRestApi” application pools — a full 11x greater than the default.It’s important to note cause and effect bidirectionally as we look at tuning this setting. In most cases, a high queue length is caused by contention in MySQL. This makes IIS unable to process requests, and the queue fills. However, once MySQL recovers, the queued requests begin to flood in and the application response will still be poor until the server catches up. It’s during these times that the Control Center will lock up and be unresponsive.The million-dollar question of course is: when doing IIS tuning for Connectwise Automate, what should the queue length be? In the spirit of the proper use of the queue, we’d suggest setting it to a count that could hold ~60 seconds worth of requests (normally this is ~30% of the agent count). If it takes longer than 60 seconds to process a web request that indicates that there is a real issue, and it would make sense to start returning the 503 status code.As a simple test to gauge this, set Performance Monitor to watch the queue size and recycle the application pool. This is normally lower than the 30% of agents count, but it’s representative of what a short processing delay on the server should look like. If your queue length is comfortably larger than this amount then all is well. For smaller Automate instances where 30% of the agent count would be less than the default of 1000 sticking with the default setting is the best course of action.Connection LimitIIS also has a connection limit for all requests to a website on the server. The default value for this is 4,294,967,295, and it’s a setting that normally doesn’t get much attention, but it did get the spotlight during the 2020.7 Automate patch. This setting is defined on the website level, and it is the funnel that feeds all of the different application pools.So, why does this setting default to the number of IPv4 addresses in existence? This value is set to the upper limit by default to prevent connections from being denied by default (the developers are hedging a bet that the whole internet won’t be accessing an IIS server simultaneously). However, the idea is that this value could be set to make sure that the sum of all connections to the server doesn’t exceed the available resources.If this setting is left to the default, the connection limits at the application pool layer are the controlling factor. The danger here is that it’s possible for the sum of the application pool connections to be greater than the number of connections the server can accommodate. This appears to be the issue with the 2020.7 patch, where the queue length on the application pool was too large, and thus the website connection limit was used to prevent overloading of the server. Obviously, the conditions of the patch were a rather special case, but in general, it is of benefit to partners to configure their servers to be tolerant against connection spikes.When doing IIS tuning for Connectwise Automate this value should be set to the max number of connections the server can process — however, there are a lot of variables in that calculation. As a starting point, it’s advisable to set this to the sum of the application pool queues once they are properly scaled, and work down from there. Please keep in mind that this value will be the cap of agent communications, web interface users, and API calls — and the normal count of those will be different depending on user count, integrations, and how Automate is used in your particular environment.We hope that this has been helpful for you. Here at Automation Theory, we’re certified MySQL DBAs dedicated exclusively to the Connectwise Automate software stack. Be sure to check out our\xa0integrations\xa0and\xa0services.\nPlease leave this field emptyWant to get the latest from our blog delivered to your inbox?Check your inbox or spam folder to confirm your email! Posted on\nAugust 22, 2020August 31, 2020\nTags\nAutomate Performance\nCategories connect_timeout ', float_val=294.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.171305313706398, 0.12856192886829376, 0.2988579571247101, 0.1532406061887741, 0.2480342537164688]
Choice: 4
type: 3, value: 294.0, unit: 
Done flag: False
No warmup - hint counter: 52
{'sequence': '4,294,967,295', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.4919935166835785, 0.20659217238426208, 0.15910853445529938, 0.12174250930547714, 0.020563332363963127]}
Decision: Deciding weight of TuningHint(doc_id=97, param=<re.Match object; span=(1185, 1200), match='max_connections'>, value=<re.Match object; span=(2, 5), match='294'>, recommendation='4,294,967,295', passage='Get-NetTCPConnection -LocalPort 443 | Measure-ObjectSo, obviously bigger servers will need more threads, but how many? The old school logic when doing IIS tuning for Connectwise Automate is to have half as many worker processes as you have CPU cores (so a server with 8 cores/vCPUs would have 4 worker threads). The idea behind this is to prevent resource starvation. However, there are settings inside of IIS for controlling CPU usage by the worker threads, and they provide much more granular control over the resource utilization.For most partners starting with the old school method is advisable, but if performance is still lacking (or the threads/connections ratio is still disproportionate) it would be worth gradually adding more worker processes (with the IIS resource controls) until an optimal balance is reached. As with other concepts in resource allocation, it’s worth noting that more is not always better, and there is a point of diminishing returns (the tipping point is normally when worker processes exceed core count). It’s also worth noting that additional worker processes will open additional database connections, so care should be taken to prevent hitting the max_connections threshold.Queue LengthIIS application pools also have a property known as queue length. This is simply the number of pending web requests the server will queue before returning the HTTP 503 status code (service not available). All requests pass through this queue first as they are processed by the webserver (there are also other queues, but they are out of scope for our discussion here). The queue length plays a role in determining the total number of concurrent connections; as any request that a worker process can’t accept immediately remains in the queue.In an ideal world, the webserver always can process incoming requests rapidly, and this queue never contains a large volume of requests. However, as discussed in our blog post here, there are inherent performance issues with the Automate database — and that can result in web requests waiting for the database, and thus the queue filling up. Because of this tendency, the Automate installer sets the queue length to 11,000 each on the “Labtech” and “CwaRestApi” application pools — a full 11x greater than the default.It’s important to note cause and effect bidirectionally as we look at tuning this setting. In most cases, a high queue length is caused by contention in MySQL. This makes IIS unable to process requests, and the queue fills. However, once MySQL recovers, the queued requests begin to flood in and the application response will still be poor until the server catches up. It’s during these times that the Control Center will lock up and be unresponsive.The million-dollar question of course is: when doing IIS tuning for Connectwise Automate, what should the queue length be? In the spirit of the proper use of the queue, we’d suggest setting it to a count that could hold ~60 seconds worth of requests (normally this is ~30% of the agent count). If it takes longer than 60 seconds to process a web request that indicates that there is a real issue, and it would make sense to start returning the 503 status code.As a simple test to gauge this, set Performance Monitor to watch the queue size and recycle the application pool. This is normally lower than the 30% of agents count, but it’s representative of what a short processing delay on the server should look like. If your queue length is comfortably larger than this amount then all is well. For smaller Automate instances where 30% of the agent count would be less than the default of 1000 sticking with the default setting is the best course of action.Connection LimitIIS also has a connection limit for all requests to a website on the server. The default value for this is 4,294,967,295, and it’s a setting that normally doesn’t get much attention, but it did get the spotlight during the 2020.7 Automate patch. This setting is defined on the website level, and it is the funnel that feeds all of the different application pools.So, why does this setting default to the number of IPv4 addresses in existence? This value is set to the upper limit by default to prevent connections from being denied by default (the developers are hedging a bet that the whole internet won’t be accessing an IIS server simultaneously). However, the idea is that this value could be set to make sure that the sum of all connections to the server doesn’t exceed the available resources.If this setting is left to the default, the connection limits at the application pool layer are the controlling factor. The danger here is that it’s possible for the sum of the application pool connections to be greater than the number of connections the server can accommodate. This appears to be the issue with the 2020.7 patch, where the queue length on the application pool was too large, and thus the website connection limit was used to prevent overloading of the server. Obviously, the conditions of the patch were a rather special case, but in general, it is of benefit to partners to configure their servers to be tolerant against connection spikes.When doing IIS tuning for Connectwise Automate this value should be set to the max number of connections the server can process — however, there are a lot of variables in that calculation. As a starting point, it’s advisable to set this to the sum of the application pool queues once they are properly scaled, and work down from there. Please keep in mind that this value will be the cap of agent communications, web interface users, and API calls — and the normal count of those will be different depending on user count, integrations, and how Automate is used in your particular environment.We hope that this has been helpful for you. Here at Automation Theory, we’re certified MySQL DBAs dedicated exclusively to the Connectwise Automate software stack. Be sure to check out our\xa0integrations\xa0and\xa0services.\nPlease leave this field emptyWant to get the latest from our blog delivered to your inbox?Check your inbox or spam folder to confirm your email! Posted on\nAugust 22, 2020August 31, 2020\nTags\nAutomate Performance\nCategories connect_timeout ', float_val=294.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.020563332363963127, 0.4919935166835785, 0.20659217238426208, 0.15910853445529938, 0.12174250930547714]
--- Tuning Updates ---
Minimal time (ms): 0.009358575514691214
Achieved with configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Decision: Deciding adaption of TuningHint(doc_id=97, param=<re.Match object; span=(1185, 1200), match='max_connections'>, value=<re.Match object; span=(2, 5), match='294'>, recommendation='4,294,967,295', passage='Get-NetTCPConnection -LocalPort 443 | Measure-ObjectSo, obviously bigger servers will need more threads, but how many? The old school logic when doing IIS tuning for Connectwise Automate is to have half as many worker processes as you have CPU cores (so a server with 8 cores/vCPUs would have 4 worker threads). The idea behind this is to prevent resource starvation. However, there are settings inside of IIS for controlling CPU usage by the worker threads, and they provide much more granular control over the resource utilization.For most partners starting with the old school method is advisable, but if performance is still lacking (or the threads/connections ratio is still disproportionate) it would be worth gradually adding more worker processes (with the IIS resource controls) until an optimal balance is reached. As with other concepts in resource allocation, it’s worth noting that more is not always better, and there is a point of diminishing returns (the tipping point is normally when worker processes exceed core count). It’s also worth noting that additional worker processes will open additional database connections, so care should be taken to prevent hitting the max_connections threshold.Queue LengthIIS application pools also have a property known as queue length. This is simply the number of pending web requests the server will queue before returning the HTTP 503 status code (service not available). All requests pass through this queue first as they are processed by the webserver (there are also other queues, but they are out of scope for our discussion here). The queue length plays a role in determining the total number of concurrent connections; as any request that a worker process can’t accept immediately remains in the queue.In an ideal world, the webserver always can process incoming requests rapidly, and this queue never contains a large volume of requests. However, as discussed in our blog post here, there are inherent performance issues with the Automate database — and that can result in web requests waiting for the database, and thus the queue filling up. Because of this tendency, the Automate installer sets the queue length to 11,000 each on the “Labtech” and “CwaRestApi” application pools — a full 11x greater than the default.It’s important to note cause and effect bidirectionally as we look at tuning this setting. In most cases, a high queue length is caused by contention in MySQL. This makes IIS unable to process requests, and the queue fills. However, once MySQL recovers, the queued requests begin to flood in and the application response will still be poor until the server catches up. It’s during these times that the Control Center will lock up and be unresponsive.The million-dollar question of course is: when doing IIS tuning for Connectwise Automate, what should the queue length be? In the spirit of the proper use of the queue, we’d suggest setting it to a count that could hold ~60 seconds worth of requests (normally this is ~30% of the agent count). If it takes longer than 60 seconds to process a web request that indicates that there is a real issue, and it would make sense to start returning the 503 status code.As a simple test to gauge this, set Performance Monitor to watch the queue size and recycle the application pool. This is normally lower than the 30% of agents count, but it’s representative of what a short processing delay on the server should look like. If your queue length is comfortably larger than this amount then all is well. For smaller Automate instances where 30% of the agent count would be less than the default of 1000 sticking with the default setting is the best course of action.Connection LimitIIS also has a connection limit for all requests to a website on the server. The default value for this is 4,294,967,295, and it’s a setting that normally doesn’t get much attention, but it did get the spotlight during the 2020.7 Automate patch. This setting is defined on the website level, and it is the funnel that feeds all of the different application pools.So, why does this setting default to the number of IPv4 addresses in existence? This value is set to the upper limit by default to prevent connections from being denied by default (the developers are hedging a bet that the whole internet won’t be accessing an IIS server simultaneously). However, the idea is that this value could be set to make sure that the sum of all connections to the server doesn’t exceed the available resources.If this setting is left to the default, the connection limits at the application pool layer are the controlling factor. The danger here is that it’s possible for the sum of the application pool connections to be greater than the number of connections the server can accommodate. This appears to be the issue with the 2020.7 patch, where the queue length on the application pool was too large, and thus the website connection limit was used to prevent overloading of the server. Obviously, the conditions of the patch were a rather special case, but in general, it is of benefit to partners to configure their servers to be tolerant against connection spikes.When doing IIS tuning for Connectwise Automate this value should be set to the max number of connections the server can process — however, there are a lot of variables in that calculation. As a starting point, it’s advisable to set this to the sum of the application pool queues once they are properly scaled, and work down from there. Please keep in mind that this value will be the cap of agent communications, web interface users, and API calls — and the normal count of those will be different depending on user count, integrations, and how Automate is used in your particular environment.We hope that this has been helpful for you. Here at Automation Theory, we’re certified MySQL DBAs dedicated exclusively to the Connectwise Automate software stack. Be sure to check out our\xa0integrations\xa0and\xa0services.\nPlease leave this field emptyWant to get the latest from our blog delivered to your inbox?Check your inbox or spam folder to confirm your email! Posted on\nAugust 22, 2020August 31, 2020\nTags\nAutomate Performance\nCategories connect_timeout ', float_val=294.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.171305313706398, 0.12856192886829376, 0.2988579571247101, 0.1532406061887741, 0.2480342537164688]
Choice: 3
type: 3, value: 294.0, unit: 
Done flag: False
Decision: Deciding weight of TuningHint(doc_id=97, param=<re.Match object; span=(1185, 1200), match='max_connections'>, value=<re.Match object; span=(2, 5), match='294'>, recommendation='4,294,967,295', passage='Get-NetTCPConnection -LocalPort 443 | Measure-ObjectSo, obviously bigger servers will need more threads, but how many? The old school logic when doing IIS tuning for Connectwise Automate is to have half as many worker processes as you have CPU cores (so a server with 8 cores/vCPUs would have 4 worker threads). The idea behind this is to prevent resource starvation. However, there are settings inside of IIS for controlling CPU usage by the worker threads, and they provide much more granular control over the resource utilization.For most partners starting with the old school method is advisable, but if performance is still lacking (or the threads/connections ratio is still disproportionate) it would be worth gradually adding more worker processes (with the IIS resource controls) until an optimal balance is reached. As with other concepts in resource allocation, it’s worth noting that more is not always better, and there is a point of diminishing returns (the tipping point is normally when worker processes exceed core count). It’s also worth noting that additional worker processes will open additional database connections, so care should be taken to prevent hitting the max_connections threshold.Queue LengthIIS application pools also have a property known as queue length. This is simply the number of pending web requests the server will queue before returning the HTTP 503 status code (service not available). All requests pass through this queue first as they are processed by the webserver (there are also other queues, but they are out of scope for our discussion here). The queue length plays a role in determining the total number of concurrent connections; as any request that a worker process can’t accept immediately remains in the queue.In an ideal world, the webserver always can process incoming requests rapidly, and this queue never contains a large volume of requests. However, as discussed in our blog post here, there are inherent performance issues with the Automate database — and that can result in web requests waiting for the database, and thus the queue filling up. Because of this tendency, the Automate installer sets the queue length to 11,000 each on the “Labtech” and “CwaRestApi” application pools — a full 11x greater than the default.It’s important to note cause and effect bidirectionally as we look at tuning this setting. In most cases, a high queue length is caused by contention in MySQL. This makes IIS unable to process requests, and the queue fills. However, once MySQL recovers, the queued requests begin to flood in and the application response will still be poor until the server catches up. It’s during these times that the Control Center will lock up and be unresponsive.The million-dollar question of course is: when doing IIS tuning for Connectwise Automate, what should the queue length be? In the spirit of the proper use of the queue, we’d suggest setting it to a count that could hold ~60 seconds worth of requests (normally this is ~30% of the agent count). If it takes longer than 60 seconds to process a web request that indicates that there is a real issue, and it would make sense to start returning the 503 status code.As a simple test to gauge this, set Performance Monitor to watch the queue size and recycle the application pool. This is normally lower than the 30% of agents count, but it’s representative of what a short processing delay on the server should look like. If your queue length is comfortably larger than this amount then all is well. For smaller Automate instances where 30% of the agent count would be less than the default of 1000 sticking with the default setting is the best course of action.Connection LimitIIS also has a connection limit for all requests to a website on the server. The default value for this is 4,294,967,295, and it’s a setting that normally doesn’t get much attention, but it did get the spotlight during the 2020.7 Automate patch. This setting is defined on the website level, and it is the funnel that feeds all of the different application pools.So, why does this setting default to the number of IPv4 addresses in existence? This value is set to the upper limit by default to prevent connections from being denied by default (the developers are hedging a bet that the whole internet won’t be accessing an IIS server simultaneously). However, the idea is that this value could be set to make sure that the sum of all connections to the server doesn’t exceed the available resources.If this setting is left to the default, the connection limits at the application pool layer are the controlling factor. The danger here is that it’s possible for the sum of the application pool connections to be greater than the number of connections the server can accommodate. This appears to be the issue with the 2020.7 patch, where the queue length on the application pool was too large, and thus the website connection limit was used to prevent overloading of the server. Obviously, the conditions of the patch were a rather special case, but in general, it is of benefit to partners to configure their servers to be tolerant against connection spikes.When doing IIS tuning for Connectwise Automate this value should be set to the max number of connections the server can process — however, there are a lot of variables in that calculation. As a starting point, it’s advisable to set this to the sum of the application pool queues once they are properly scaled, and work down from there. Please keep in mind that this value will be the cap of agent communications, web interface users, and API calls — and the normal count of those will be different depending on user count, integrations, and how Automate is used in your particular environment.We hope that this has been helpful for you. Here at Automation Theory, we’re certified MySQL DBAs dedicated exclusively to the Connectwise Automate software stack. Be sure to check out our\xa0integrations\xa0and\xa0services.\nPlease leave this field emptyWant to get the latest from our blog delivered to your inbox?Check your inbox or spam folder to confirm your email! Posted on\nAugust 22, 2020August 31, 2020\nTags\nAutomate Performance\nCategories connect_timeout ', float_val=294.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.020563332363963127, 0.4919935166835785, 0.20659217238426208, 0.15910853445529938, 0.12174250930547714]
Choice: 0
Trying assigning max_connections to 588
Assignment ('max_connections', '588') was rejected
Hint counter: 53
Episode hint counter before: 2
Episode hint counter: 3
Hints per episode: 5
Done flag: False
No warmup - hint counter: 53
{'sequence': '4,294,967,295', 'labels': ['Use recommendation', 'Increase recommendation strongly', 'Decrease recommendation strongly', 'Increase recommendation', 'Decrease recommendation'], 'scores': [0.2988579571247101, 0.2480342537164688, 0.171305313706398, 0.1532406061887741, 0.12856192886829376]}
Decision: Deciding adaption of TuningHint(doc_id=97, param=<re.Match object; span=(1185, 1200), match='max_connections'>, value=<re.Match object; span=(6, 9), match='967'>, recommendation='4,294,967,295', passage='Get-NetTCPConnection -LocalPort 443 | Measure-ObjectSo, obviously bigger servers will need more threads, but how many? The old school logic when doing IIS tuning for Connectwise Automate is to have half as many worker processes as you have CPU cores (so a server with 8 cores/vCPUs would have 4 worker threads). The idea behind this is to prevent resource starvation. However, there are settings inside of IIS for controlling CPU usage by the worker threads, and they provide much more granular control over the resource utilization.For most partners starting with the old school method is advisable, but if performance is still lacking (or the threads/connections ratio is still disproportionate) it would be worth gradually adding more worker processes (with the IIS resource controls) until an optimal balance is reached. As with other concepts in resource allocation, it’s worth noting that more is not always better, and there is a point of diminishing returns (the tipping point is normally when worker processes exceed core count). It’s also worth noting that additional worker processes will open additional database connections, so care should be taken to prevent hitting the max_connections threshold.Queue LengthIIS application pools also have a property known as queue length. This is simply the number of pending web requests the server will queue before returning the HTTP 503 status code (service not available). All requests pass through this queue first as they are processed by the webserver (there are also other queues, but they are out of scope for our discussion here). The queue length plays a role in determining the total number of concurrent connections; as any request that a worker process can’t accept immediately remains in the queue.In an ideal world, the webserver always can process incoming requests rapidly, and this queue never contains a large volume of requests. However, as discussed in our blog post here, there are inherent performance issues with the Automate database — and that can result in web requests waiting for the database, and thus the queue filling up. Because of this tendency, the Automate installer sets the queue length to 11,000 each on the “Labtech” and “CwaRestApi” application pools — a full 11x greater than the default.It’s important to note cause and effect bidirectionally as we look at tuning this setting. In most cases, a high queue length is caused by contention in MySQL. This makes IIS unable to process requests, and the queue fills. However, once MySQL recovers, the queued requests begin to flood in and the application response will still be poor until the server catches up. It’s during these times that the Control Center will lock up and be unresponsive.The million-dollar question of course is: when doing IIS tuning for Connectwise Automate, what should the queue length be? In the spirit of the proper use of the queue, we’d suggest setting it to a count that could hold ~60 seconds worth of requests (normally this is ~30% of the agent count). If it takes longer than 60 seconds to process a web request that indicates that there is a real issue, and it would make sense to start returning the 503 status code.As a simple test to gauge this, set Performance Monitor to watch the queue size and recycle the application pool. This is normally lower than the 30% of agents count, but it’s representative of what a short processing delay on the server should look like. If your queue length is comfortably larger than this amount then all is well. For smaller Automate instances where 30% of the agent count would be less than the default of 1000 sticking with the default setting is the best course of action.Connection LimitIIS also has a connection limit for all requests to a website on the server. The default value for this is 4,294,967,295, and it’s a setting that normally doesn’t get much attention, but it did get the spotlight during the 2020.7 Automate patch. This setting is defined on the website level, and it is the funnel that feeds all of the different application pools.So, why does this setting default to the number of IPv4 addresses in existence? This value is set to the upper limit by default to prevent connections from being denied by default (the developers are hedging a bet that the whole internet won’t be accessing an IIS server simultaneously). However, the idea is that this value could be set to make sure that the sum of all connections to the server doesn’t exceed the available resources.If this setting is left to the default, the connection limits at the application pool layer are the controlling factor. The danger here is that it’s possible for the sum of the application pool connections to be greater than the number of connections the server can accommodate. This appears to be the issue with the 2020.7 patch, where the queue length on the application pool was too large, and thus the website connection limit was used to prevent overloading of the server. Obviously, the conditions of the patch were a rather special case, but in general, it is of benefit to partners to configure their servers to be tolerant against connection spikes.When doing IIS tuning for Connectwise Automate this value should be set to the max number of connections the server can process — however, there are a lot of variables in that calculation. As a starting point, it’s advisable to set this to the sum of the application pool queues once they are properly scaled, and work down from there. Please keep in mind that this value will be the cap of agent communications, web interface users, and API calls — and the normal count of those will be different depending on user count, integrations, and how Automate is used in your particular environment.We hope that this has been helpful for you. Here at Automation Theory, we’re certified MySQL DBAs dedicated exclusively to the Connectwise Automate software stack. Be sure to check out our\xa0integrations\xa0and\xa0services.\nPlease leave this field emptyWant to get the latest from our blog delivered to your inbox?Check your inbox or spam folder to confirm your email! Posted on\nAugust 22, 2020August 31, 2020\nTags\nAutomate Performance\nCategories connect_timeout ', float_val=967.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.171305313706398, 0.12856192886829376, 0.2988579571247101, 0.1532406061887741, 0.2480342537164688]
Choice: 0
type: 3, value: 967.0, unit: 
Done flag: False
No warmup - hint counter: 53
{'sequence': '4,294,967,295', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.4919935166835785, 0.20659217238426208, 0.15910853445529938, 0.12174250930547714, 0.020563332363963127]}
Decision: Deciding weight of TuningHint(doc_id=97, param=<re.Match object; span=(1185, 1200), match='max_connections'>, value=<re.Match object; span=(6, 9), match='967'>, recommendation='4,294,967,295', passage='Get-NetTCPConnection -LocalPort 443 | Measure-ObjectSo, obviously bigger servers will need more threads, but how many? The old school logic when doing IIS tuning for Connectwise Automate is to have half as many worker processes as you have CPU cores (so a server with 8 cores/vCPUs would have 4 worker threads). The idea behind this is to prevent resource starvation. However, there are settings inside of IIS for controlling CPU usage by the worker threads, and they provide much more granular control over the resource utilization.For most partners starting with the old school method is advisable, but if performance is still lacking (or the threads/connections ratio is still disproportionate) it would be worth gradually adding more worker processes (with the IIS resource controls) until an optimal balance is reached. As with other concepts in resource allocation, it’s worth noting that more is not always better, and there is a point of diminishing returns (the tipping point is normally when worker processes exceed core count). It’s also worth noting that additional worker processes will open additional database connections, so care should be taken to prevent hitting the max_connections threshold.Queue LengthIIS application pools also have a property known as queue length. This is simply the number of pending web requests the server will queue before returning the HTTP 503 status code (service not available). All requests pass through this queue first as they are processed by the webserver (there are also other queues, but they are out of scope for our discussion here). The queue length plays a role in determining the total number of concurrent connections; as any request that a worker process can’t accept immediately remains in the queue.In an ideal world, the webserver always can process incoming requests rapidly, and this queue never contains a large volume of requests. However, as discussed in our blog post here, there are inherent performance issues with the Automate database — and that can result in web requests waiting for the database, and thus the queue filling up. Because of this tendency, the Automate installer sets the queue length to 11,000 each on the “Labtech” and “CwaRestApi” application pools — a full 11x greater than the default.It’s important to note cause and effect bidirectionally as we look at tuning this setting. In most cases, a high queue length is caused by contention in MySQL. This makes IIS unable to process requests, and the queue fills. However, once MySQL recovers, the queued requests begin to flood in and the application response will still be poor until the server catches up. It’s during these times that the Control Center will lock up and be unresponsive.The million-dollar question of course is: when doing IIS tuning for Connectwise Automate, what should the queue length be? In the spirit of the proper use of the queue, we’d suggest setting it to a count that could hold ~60 seconds worth of requests (normally this is ~30% of the agent count). If it takes longer than 60 seconds to process a web request that indicates that there is a real issue, and it would make sense to start returning the 503 status code.As a simple test to gauge this, set Performance Monitor to watch the queue size and recycle the application pool. This is normally lower than the 30% of agents count, but it’s representative of what a short processing delay on the server should look like. If your queue length is comfortably larger than this amount then all is well. For smaller Automate instances where 30% of the agent count would be less than the default of 1000 sticking with the default setting is the best course of action.Connection LimitIIS also has a connection limit for all requests to a website on the server. The default value for this is 4,294,967,295, and it’s a setting that normally doesn’t get much attention, but it did get the spotlight during the 2020.7 Automate patch. This setting is defined on the website level, and it is the funnel that feeds all of the different application pools.So, why does this setting default to the number of IPv4 addresses in existence? This value is set to the upper limit by default to prevent connections from being denied by default (the developers are hedging a bet that the whole internet won’t be accessing an IIS server simultaneously). However, the idea is that this value could be set to make sure that the sum of all connections to the server doesn’t exceed the available resources.If this setting is left to the default, the connection limits at the application pool layer are the controlling factor. The danger here is that it’s possible for the sum of the application pool connections to be greater than the number of connections the server can accommodate. This appears to be the issue with the 2020.7 patch, where the queue length on the application pool was too large, and thus the website connection limit was used to prevent overloading of the server. Obviously, the conditions of the patch were a rather special case, but in general, it is of benefit to partners to configure their servers to be tolerant against connection spikes.When doing IIS tuning for Connectwise Automate this value should be set to the max number of connections the server can process — however, there are a lot of variables in that calculation. As a starting point, it’s advisable to set this to the sum of the application pool queues once they are properly scaled, and work down from there. Please keep in mind that this value will be the cap of agent communications, web interface users, and API calls — and the normal count of those will be different depending on user count, integrations, and how Automate is used in your particular environment.We hope that this has been helpful for you. Here at Automation Theory, we’re certified MySQL DBAs dedicated exclusively to the Connectwise Automate software stack. Be sure to check out our\xa0integrations\xa0and\xa0services.\nPlease leave this field emptyWant to get the latest from our blog delivered to your inbox?Check your inbox or spam folder to confirm your email! Posted on\nAugust 22, 2020August 31, 2020\nTags\nAutomate Performance\nCategories connect_timeout ', float_val=967.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.020563332363963127, 0.4919935166835785, 0.20659217238426208, 0.15910853445529938, 0.12174250930547714]
Choice: 1
Trying assigning max_connections to 241
Adding assignment ('max_connections', '241') with weight 2
Assignment ('max_connections', '241') extracted from "Get-NetTCPConnection -LocalPort 443 | Measure-ObjectSo, obviously bigger servers will need more threads, but how many? The old school logic when doing IIS tuning for Connectwise Automate is to have half as many worker processes as you have CPU cores (so a server with 8 cores/vCPUs would have 4 worker threads). The idea behind this is to prevent resource starvation. However, there are settings inside of IIS for controlling CPU usage by the worker threads, and they provide much more granular control over the resource utilization.For most partners starting with the old school method is advisable, but if performance is still lacking (or the threads/connections ratio is still disproportionate) it would be worth gradually adding more worker processes (with the IIS resource controls) until an optimal balance is reached. As with other concepts in resource allocation, it’s worth noting that more is not always better, and there is a point of diminishing returns (the tipping point is normally when worker processes exceed core count). It’s also worth noting that additional worker processes will open additional database connections, so care should be taken to prevent hitting the max_connections threshold.Queue LengthIIS application pools also have a property known as queue length. This is simply the number of pending web requests the server will queue before returning the HTTP 503 status code (service not available). All requests pass through this queue first as they are processed by the webserver (there are also other queues, but they are out of scope for our discussion here). The queue length plays a role in determining the total number of concurrent connections; as any request that a worker process can’t accept immediately remains in the queue.In an ideal world, the webserver always can process incoming requests rapidly, and this queue never contains a large volume of requests. However, as discussed in our blog post here, there are inherent performance issues with the Automate database — and that can result in web requests waiting for the database, and thus the queue filling up. Because of this tendency, the Automate installer sets the queue length to 11,000 each on the “Labtech” and “CwaRestApi” application pools — a full 11x greater than the default.It’s important to note cause and effect bidirectionally as we look at tuning this setting. In most cases, a high queue length is caused by contention in MySQL. This makes IIS unable to process requests, and the queue fills. However, once MySQL recovers, the queued requests begin to flood in and the application response will still be poor until the server catches up. It’s during these times that the Control Center will lock up and be unresponsive.The million-dollar question of course is: when doing IIS tuning for Connectwise Automate, what should the queue length be? In the spirit of the proper use of the queue, we’d suggest setting it to a count that could hold ~60 seconds worth of requests (normally this is ~30% of the agent count). If it takes longer than 60 seconds to process a web request that indicates that there is a real issue, and it would make sense to start returning the 503 status code.As a simple test to gauge this, set Performance Monitor to watch the queue size and recycle the application pool. This is normally lower than the 30% of agents count, but it’s representative of what a short processing delay on the server should look like. If your queue length is comfortably larger than this amount then all is well. For smaller Automate instances where 30% of the agent count would be less than the default of 1000 sticking with the default setting is the best course of action.Connection LimitIIS also has a connection limit for all requests to a website on the server. The default value for this is 4,294,967,295, and it’s a setting that normally doesn’t get much attention, but it did get the spotlight during the 2020.7 Automate patch. This setting is defined on the website level, and it is the funnel that feeds all of the different application pools.So, why does this setting default to the number of IPv4 addresses in existence? This value is set to the upper limit by default to prevent connections from being denied by default (the developers are hedging a bet that the whole internet won’t be accessing an IIS server simultaneously). However, the idea is that this value could be set to make sure that the sum of all connections to the server doesn’t exceed the available resources.If this setting is left to the default, the connection limits at the application pool layer are the controlling factor. The danger here is that it’s possible for the sum of the application pool connections to be greater than the number of connections the server can accommodate. This appears to be the issue with the 2020.7 patch, where the queue length on the application pool was too large, and thus the website connection limit was used to prevent overloading of the server. Obviously, the conditions of the patch were a rather special case, but in general, it is of benefit to partners to configure their servers to be tolerant against connection spikes.When doing IIS tuning for Connectwise Automate this value should be set to the max number of connections the server can process — however, there are a lot of variables in that calculation. As a starting point, it’s advisable to set this to the sum of the application pool queues once they are properly scaled, and work down from there. Please keep in mind that this value will be the cap of agent communications, web interface users, and API calls — and the normal count of those will be different depending on user count, integrations, and how Automate is used in your particular environment.We hope that this has been helpful for you. Here at Automation Theory, we’re certified MySQL DBAs dedicated exclusively to the Connectwise Automate software stack. Be sure to check out our integrations and services.
Please leave this field emptyWant to get the latest from our blog delivered to your inbox?Check your inbox or spam folder to confirm your email! Posted on
August 22, 2020August 31, 2020
Tags
Automate Performance
Categories connect_timeout "
Hint counter: 54
Episode hint counter before: 3
Episode hint counter: 4
Hints per episode: 5
Done flag: False
No warmup - hint counter: 54
{'sequence': '4,294,967,295', 'labels': ['Use recommendation', 'Increase recommendation strongly', 'Decrease recommendation strongly', 'Increase recommendation', 'Decrease recommendation'], 'scores': [0.2988579571247101, 0.2480342537164688, 0.171305313706398, 0.1532406061887741, 0.12856192886829376]}
Decision: Deciding adaption of TuningHint(doc_id=97, param=<re.Match object; span=(1185, 1200), match='max_connections'>, value=<re.Match object; span=(10, 13), match='295'>, recommendation='4,294,967,295', passage='Get-NetTCPConnection -LocalPort 443 | Measure-ObjectSo, obviously bigger servers will need more threads, but how many? The old school logic when doing IIS tuning for Connectwise Automate is to have half as many worker processes as you have CPU cores (so a server with 8 cores/vCPUs would have 4 worker threads). The idea behind this is to prevent resource starvation. However, there are settings inside of IIS for controlling CPU usage by the worker threads, and they provide much more granular control over the resource utilization.For most partners starting with the old school method is advisable, but if performance is still lacking (or the threads/connections ratio is still disproportionate) it would be worth gradually adding more worker processes (with the IIS resource controls) until an optimal balance is reached. As with other concepts in resource allocation, it’s worth noting that more is not always better, and there is a point of diminishing returns (the tipping point is normally when worker processes exceed core count). It’s also worth noting that additional worker processes will open additional database connections, so care should be taken to prevent hitting the max_connections threshold.Queue LengthIIS application pools also have a property known as queue length. This is simply the number of pending web requests the server will queue before returning the HTTP 503 status code (service not available). All requests pass through this queue first as they are processed by the webserver (there are also other queues, but they are out of scope for our discussion here). The queue length plays a role in determining the total number of concurrent connections; as any request that a worker process can’t accept immediately remains in the queue.In an ideal world, the webserver always can process incoming requests rapidly, and this queue never contains a large volume of requests. However, as discussed in our blog post here, there are inherent performance issues with the Automate database — and that can result in web requests waiting for the database, and thus the queue filling up. Because of this tendency, the Automate installer sets the queue length to 11,000 each on the “Labtech” and “CwaRestApi” application pools — a full 11x greater than the default.It’s important to note cause and effect bidirectionally as we look at tuning this setting. In most cases, a high queue length is caused by contention in MySQL. This makes IIS unable to process requests, and the queue fills. However, once MySQL recovers, the queued requests begin to flood in and the application response will still be poor until the server catches up. It’s during these times that the Control Center will lock up and be unresponsive.The million-dollar question of course is: when doing IIS tuning for Connectwise Automate, what should the queue length be? In the spirit of the proper use of the queue, we’d suggest setting it to a count that could hold ~60 seconds worth of requests (normally this is ~30% of the agent count). If it takes longer than 60 seconds to process a web request that indicates that there is a real issue, and it would make sense to start returning the 503 status code.As a simple test to gauge this, set Performance Monitor to watch the queue size and recycle the application pool. This is normally lower than the 30% of agents count, but it’s representative of what a short processing delay on the server should look like. If your queue length is comfortably larger than this amount then all is well. For smaller Automate instances where 30% of the agent count would be less than the default of 1000 sticking with the default setting is the best course of action.Connection LimitIIS also has a connection limit for all requests to a website on the server. The default value for this is 4,294,967,295, and it’s a setting that normally doesn’t get much attention, but it did get the spotlight during the 2020.7 Automate patch. This setting is defined on the website level, and it is the funnel that feeds all of the different application pools.So, why does this setting default to the number of IPv4 addresses in existence? This value is set to the upper limit by default to prevent connections from being denied by default (the developers are hedging a bet that the whole internet won’t be accessing an IIS server simultaneously). However, the idea is that this value could be set to make sure that the sum of all connections to the server doesn’t exceed the available resources.If this setting is left to the default, the connection limits at the application pool layer are the controlling factor. The danger here is that it’s possible for the sum of the application pool connections to be greater than the number of connections the server can accommodate. This appears to be the issue with the 2020.7 patch, where the queue length on the application pool was too large, and thus the website connection limit was used to prevent overloading of the server. Obviously, the conditions of the patch were a rather special case, but in general, it is of benefit to partners to configure their servers to be tolerant against connection spikes.When doing IIS tuning for Connectwise Automate this value should be set to the max number of connections the server can process — however, there are a lot of variables in that calculation. As a starting point, it’s advisable to set this to the sum of the application pool queues once they are properly scaled, and work down from there. Please keep in mind that this value will be the cap of agent communications, web interface users, and API calls — and the normal count of those will be different depending on user count, integrations, and how Automate is used in your particular environment.We hope that this has been helpful for you. Here at Automation Theory, we’re certified MySQL DBAs dedicated exclusively to the Connectwise Automate software stack. Be sure to check out our\xa0integrations\xa0and\xa0services.\nPlease leave this field emptyWant to get the latest from our blog delivered to your inbox?Check your inbox or spam folder to confirm your email! Posted on\nAugust 22, 2020August 31, 2020\nTags\nAutomate Performance\nCategories connect_timeout ', float_val=295.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.171305313706398, 0.12856192886829376, 0.2988579571247101, 0.1532406061887741, 0.2480342537164688]
Choice: 2
type: 3, value: 295.0, unit: 
Done flag: False
No warmup - hint counter: 54
{'sequence': '4,294,967,295', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.4919935166835785, 0.20659217238426208, 0.15910853445529938, 0.12174250930547714, 0.020563332363963127]}
Decision: Deciding weight of TuningHint(doc_id=97, param=<re.Match object; span=(1185, 1200), match='max_connections'>, value=<re.Match object; span=(10, 13), match='295'>, recommendation='4,294,967,295', passage='Get-NetTCPConnection -LocalPort 443 | Measure-ObjectSo, obviously bigger servers will need more threads, but how many? The old school logic when doing IIS tuning for Connectwise Automate is to have half as many worker processes as you have CPU cores (so a server with 8 cores/vCPUs would have 4 worker threads). The idea behind this is to prevent resource starvation. However, there are settings inside of IIS for controlling CPU usage by the worker threads, and they provide much more granular control over the resource utilization.For most partners starting with the old school method is advisable, but if performance is still lacking (or the threads/connections ratio is still disproportionate) it would be worth gradually adding more worker processes (with the IIS resource controls) until an optimal balance is reached. As with other concepts in resource allocation, it’s worth noting that more is not always better, and there is a point of diminishing returns (the tipping point is normally when worker processes exceed core count). It’s also worth noting that additional worker processes will open additional database connections, so care should be taken to prevent hitting the max_connections threshold.Queue LengthIIS application pools also have a property known as queue length. This is simply the number of pending web requests the server will queue before returning the HTTP 503 status code (service not available). All requests pass through this queue first as they are processed by the webserver (there are also other queues, but they are out of scope for our discussion here). The queue length plays a role in determining the total number of concurrent connections; as any request that a worker process can’t accept immediately remains in the queue.In an ideal world, the webserver always can process incoming requests rapidly, and this queue never contains a large volume of requests. However, as discussed in our blog post here, there are inherent performance issues with the Automate database — and that can result in web requests waiting for the database, and thus the queue filling up. Because of this tendency, the Automate installer sets the queue length to 11,000 each on the “Labtech” and “CwaRestApi” application pools — a full 11x greater than the default.It’s important to note cause and effect bidirectionally as we look at tuning this setting. In most cases, a high queue length is caused by contention in MySQL. This makes IIS unable to process requests, and the queue fills. However, once MySQL recovers, the queued requests begin to flood in and the application response will still be poor until the server catches up. It’s during these times that the Control Center will lock up and be unresponsive.The million-dollar question of course is: when doing IIS tuning for Connectwise Automate, what should the queue length be? In the spirit of the proper use of the queue, we’d suggest setting it to a count that could hold ~60 seconds worth of requests (normally this is ~30% of the agent count). If it takes longer than 60 seconds to process a web request that indicates that there is a real issue, and it would make sense to start returning the 503 status code.As a simple test to gauge this, set Performance Monitor to watch the queue size and recycle the application pool. This is normally lower than the 30% of agents count, but it’s representative of what a short processing delay on the server should look like. If your queue length is comfortably larger than this amount then all is well. For smaller Automate instances where 30% of the agent count would be less than the default of 1000 sticking with the default setting is the best course of action.Connection LimitIIS also has a connection limit for all requests to a website on the server. The default value for this is 4,294,967,295, and it’s a setting that normally doesn’t get much attention, but it did get the spotlight during the 2020.7 Automate patch. This setting is defined on the website level, and it is the funnel that feeds all of the different application pools.So, why does this setting default to the number of IPv4 addresses in existence? This value is set to the upper limit by default to prevent connections from being denied by default (the developers are hedging a bet that the whole internet won’t be accessing an IIS server simultaneously). However, the idea is that this value could be set to make sure that the sum of all connections to the server doesn’t exceed the available resources.If this setting is left to the default, the connection limits at the application pool layer are the controlling factor. The danger here is that it’s possible for the sum of the application pool connections to be greater than the number of connections the server can accommodate. This appears to be the issue with the 2020.7 patch, where the queue length on the application pool was too large, and thus the website connection limit was used to prevent overloading of the server. Obviously, the conditions of the patch were a rather special case, but in general, it is of benefit to partners to configure their servers to be tolerant against connection spikes.When doing IIS tuning for Connectwise Automate this value should be set to the max number of connections the server can process — however, there are a lot of variables in that calculation. As a starting point, it’s advisable to set this to the sum of the application pool queues once they are properly scaled, and work down from there. Please keep in mind that this value will be the cap of agent communications, web interface users, and API calls — and the normal count of those will be different depending on user count, integrations, and how Automate is used in your particular environment.We hope that this has been helpful for you. Here at Automation Theory, we’re certified MySQL DBAs dedicated exclusively to the Connectwise Automate software stack. Be sure to check out our\xa0integrations\xa0and\xa0services.\nPlease leave this field emptyWant to get the latest from our blog delivered to your inbox?Check your inbox or spam folder to confirm your email! Posted on\nAugust 22, 2020August 31, 2020\nTags\nAutomate Performance\nCategories connect_timeout ', float_val=295.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.020563332363963127, 0.4919935166835785, 0.20659217238426208, 0.15910853445529938, 0.12174250930547714]
--- Tuning Updates ---
Minimal time (ms): 0.009358575514691214
Achieved with configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Decision: Deciding adaption of TuningHint(doc_id=97, param=<re.Match object; span=(1185, 1200), match='max_connections'>, value=<re.Match object; span=(10, 13), match='295'>, recommendation='4,294,967,295', passage='Get-NetTCPConnection -LocalPort 443 | Measure-ObjectSo, obviously bigger servers will need more threads, but how many? The old school logic when doing IIS tuning for Connectwise Automate is to have half as many worker processes as you have CPU cores (so a server with 8 cores/vCPUs would have 4 worker threads). The idea behind this is to prevent resource starvation. However, there are settings inside of IIS for controlling CPU usage by the worker threads, and they provide much more granular control over the resource utilization.For most partners starting with the old school method is advisable, but if performance is still lacking (or the threads/connections ratio is still disproportionate) it would be worth gradually adding more worker processes (with the IIS resource controls) until an optimal balance is reached. As with other concepts in resource allocation, it’s worth noting that more is not always better, and there is a point of diminishing returns (the tipping point is normally when worker processes exceed core count). It’s also worth noting that additional worker processes will open additional database connections, so care should be taken to prevent hitting the max_connections threshold.Queue LengthIIS application pools also have a property known as queue length. This is simply the number of pending web requests the server will queue before returning the HTTP 503 status code (service not available). All requests pass through this queue first as they are processed by the webserver (there are also other queues, but they are out of scope for our discussion here). The queue length plays a role in determining the total number of concurrent connections; as any request that a worker process can’t accept immediately remains in the queue.In an ideal world, the webserver always can process incoming requests rapidly, and this queue never contains a large volume of requests. However, as discussed in our blog post here, there are inherent performance issues with the Automate database — and that can result in web requests waiting for the database, and thus the queue filling up. Because of this tendency, the Automate installer sets the queue length to 11,000 each on the “Labtech” and “CwaRestApi” application pools — a full 11x greater than the default.It’s important to note cause and effect bidirectionally as we look at tuning this setting. In most cases, a high queue length is caused by contention in MySQL. This makes IIS unable to process requests, and the queue fills. However, once MySQL recovers, the queued requests begin to flood in and the application response will still be poor until the server catches up. It’s during these times that the Control Center will lock up and be unresponsive.The million-dollar question of course is: when doing IIS tuning for Connectwise Automate, what should the queue length be? In the spirit of the proper use of the queue, we’d suggest setting it to a count that could hold ~60 seconds worth of requests (normally this is ~30% of the agent count). If it takes longer than 60 seconds to process a web request that indicates that there is a real issue, and it would make sense to start returning the 503 status code.As a simple test to gauge this, set Performance Monitor to watch the queue size and recycle the application pool. This is normally lower than the 30% of agents count, but it’s representative of what a short processing delay on the server should look like. If your queue length is comfortably larger than this amount then all is well. For smaller Automate instances where 30% of the agent count would be less than the default of 1000 sticking with the default setting is the best course of action.Connection LimitIIS also has a connection limit for all requests to a website on the server. The default value for this is 4,294,967,295, and it’s a setting that normally doesn’t get much attention, but it did get the spotlight during the 2020.7 Automate patch. This setting is defined on the website level, and it is the funnel that feeds all of the different application pools.So, why does this setting default to the number of IPv4 addresses in existence? This value is set to the upper limit by default to prevent connections from being denied by default (the developers are hedging a bet that the whole internet won’t be accessing an IIS server simultaneously). However, the idea is that this value could be set to make sure that the sum of all connections to the server doesn’t exceed the available resources.If this setting is left to the default, the connection limits at the application pool layer are the controlling factor. The danger here is that it’s possible for the sum of the application pool connections to be greater than the number of connections the server can accommodate. This appears to be the issue with the 2020.7 patch, where the queue length on the application pool was too large, and thus the website connection limit was used to prevent overloading of the server. Obviously, the conditions of the patch were a rather special case, but in general, it is of benefit to partners to configure their servers to be tolerant against connection spikes.When doing IIS tuning for Connectwise Automate this value should be set to the max number of connections the server can process — however, there are a lot of variables in that calculation. As a starting point, it’s advisable to set this to the sum of the application pool queues once they are properly scaled, and work down from there. Please keep in mind that this value will be the cap of agent communications, web interface users, and API calls — and the normal count of those will be different depending on user count, integrations, and how Automate is used in your particular environment.We hope that this has been helpful for you. Here at Automation Theory, we’re certified MySQL DBAs dedicated exclusively to the Connectwise Automate software stack. Be sure to check out our\xa0integrations\xa0and\xa0services.\nPlease leave this field emptyWant to get the latest from our blog delivered to your inbox?Check your inbox or spam folder to confirm your email! Posted on\nAugust 22, 2020August 31, 2020\nTags\nAutomate Performance\nCategories connect_timeout ', float_val=295.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.171305313706398, 0.12856192886829376, 0.2988579571247101, 0.1532406061887741, 0.2480342537164688]
Choice: 0
type: 3, value: 295.0, unit: 
Done flag: False
Decision: Deciding weight of TuningHint(doc_id=97, param=<re.Match object; span=(1185, 1200), match='max_connections'>, value=<re.Match object; span=(10, 13), match='295'>, recommendation='4,294,967,295', passage='Get-NetTCPConnection -LocalPort 443 | Measure-ObjectSo, obviously bigger servers will need more threads, but how many? The old school logic when doing IIS tuning for Connectwise Automate is to have half as many worker processes as you have CPU cores (so a server with 8 cores/vCPUs would have 4 worker threads). The idea behind this is to prevent resource starvation. However, there are settings inside of IIS for controlling CPU usage by the worker threads, and they provide much more granular control over the resource utilization.For most partners starting with the old school method is advisable, but if performance is still lacking (or the threads/connections ratio is still disproportionate) it would be worth gradually adding more worker processes (with the IIS resource controls) until an optimal balance is reached. As with other concepts in resource allocation, it’s worth noting that more is not always better, and there is a point of diminishing returns (the tipping point is normally when worker processes exceed core count). It’s also worth noting that additional worker processes will open additional database connections, so care should be taken to prevent hitting the max_connections threshold.Queue LengthIIS application pools also have a property known as queue length. This is simply the number of pending web requests the server will queue before returning the HTTP 503 status code (service not available). All requests pass through this queue first as they are processed by the webserver (there are also other queues, but they are out of scope for our discussion here). The queue length plays a role in determining the total number of concurrent connections; as any request that a worker process can’t accept immediately remains in the queue.In an ideal world, the webserver always can process incoming requests rapidly, and this queue never contains a large volume of requests. However, as discussed in our blog post here, there are inherent performance issues with the Automate database — and that can result in web requests waiting for the database, and thus the queue filling up. Because of this tendency, the Automate installer sets the queue length to 11,000 each on the “Labtech” and “CwaRestApi” application pools — a full 11x greater than the default.It’s important to note cause and effect bidirectionally as we look at tuning this setting. In most cases, a high queue length is caused by contention in MySQL. This makes IIS unable to process requests, and the queue fills. However, once MySQL recovers, the queued requests begin to flood in and the application response will still be poor until the server catches up. It’s during these times that the Control Center will lock up and be unresponsive.The million-dollar question of course is: when doing IIS tuning for Connectwise Automate, what should the queue length be? In the spirit of the proper use of the queue, we’d suggest setting it to a count that could hold ~60 seconds worth of requests (normally this is ~30% of the agent count). If it takes longer than 60 seconds to process a web request that indicates that there is a real issue, and it would make sense to start returning the 503 status code.As a simple test to gauge this, set Performance Monitor to watch the queue size and recycle the application pool. This is normally lower than the 30% of agents count, but it’s representative of what a short processing delay on the server should look like. If your queue length is comfortably larger than this amount then all is well. For smaller Automate instances where 30% of the agent count would be less than the default of 1000 sticking with the default setting is the best course of action.Connection LimitIIS also has a connection limit for all requests to a website on the server. The default value for this is 4,294,967,295, and it’s a setting that normally doesn’t get much attention, but it did get the spotlight during the 2020.7 Automate patch. This setting is defined on the website level, and it is the funnel that feeds all of the different application pools.So, why does this setting default to the number of IPv4 addresses in existence? This value is set to the upper limit by default to prevent connections from being denied by default (the developers are hedging a bet that the whole internet won’t be accessing an IIS server simultaneously). However, the idea is that this value could be set to make sure that the sum of all connections to the server doesn’t exceed the available resources.If this setting is left to the default, the connection limits at the application pool layer are the controlling factor. The danger here is that it’s possible for the sum of the application pool connections to be greater than the number of connections the server can accommodate. This appears to be the issue with the 2020.7 patch, where the queue length on the application pool was too large, and thus the website connection limit was used to prevent overloading of the server. Obviously, the conditions of the patch were a rather special case, but in general, it is of benefit to partners to configure their servers to be tolerant against connection spikes.When doing IIS tuning for Connectwise Automate this value should be set to the max number of connections the server can process — however, there are a lot of variables in that calculation. As a starting point, it’s advisable to set this to the sum of the application pool queues once they are properly scaled, and work down from there. Please keep in mind that this value will be the cap of agent communications, web interface users, and API calls — and the normal count of those will be different depending on user count, integrations, and how Automate is used in your particular environment.We hope that this has been helpful for you. Here at Automation Theory, we’re certified MySQL DBAs dedicated exclusively to the Connectwise Automate software stack. Be sure to check out our\xa0integrations\xa0and\xa0services.\nPlease leave this field emptyWant to get the latest from our blog delivered to your inbox?Check your inbox or spam folder to confirm your email! Posted on\nAugust 22, 2020August 31, 2020\nTags\nAutomate Performance\nCategories connect_timeout ', float_val=295.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.020563332363963127, 0.4919935166835785, 0.20659217238426208, 0.15910853445529938, 0.12174250930547714]
Choice: 1
Trying assigning max_connections to 73
Assignment ('max_connections', '73') was rejected
Hint counter: 55
Episode hint counter before: 4
Episode hint counter: 5
Hints per episode: 5
Episode finished!
Done flag: True
Finalizing episode!
Weighted hints: defaultdict(<function NlpTuningEnv._finalize_episode.<locals>.<lambda> at 0x7f86e0ca3d40>, {('max_connections', '8'): 1, ('max_connections', '241'): 2})
Selected configurations: [{'max_connections': '241'}, {'max_connections': '8'}]
Trying configuration: {'max_connections': '241'}
--- Tuning Updates ---
Minimal time (ms): 0.009358575514691214
Achieved with configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Reward -0.49952824485376623 with {'max_connections': '241'}
Trying configuration: {'max_connections': '8'}
--- Tuning Updates ---
Minimal time (ms): 0.009358575514691214
Achieved with configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Reward -0.4467939725635174 with {'max_connections': '8'}
Obtained 0 by configuration {}
Achieved unscaled reward of 0 using {}.
No warmup - hint counter: 55
{'sequence': '=2', 'labels': ['Use recommendation', 'Decrease recommendation', 'Increase recommendation', 'Increase recommendation strongly', 'Decrease recommendation strongly'], 'scores': [0.22771672904491425, 0.2139659821987152, 0.1904487907886505, 0.18513177335262299, 0.18273678421974182]}
Decision: Deciding adaption of TuningHint(doc_id=13, param=<re.Match object; span=(42, 72), match='innodb_flush_log_at_trx_commit'>, value=<re.Match object; span=(1, 2), match='2'>, recommendation='=2', passage='This assumes lots of RAM Tweaks for MySQL innodb_flush_log_at_trx_commit=2 skip-innodb_doublewrite Tweaks for ZFS zfs set primarycache=metadata tank/db zfs set atime=off tank/db zfs set recordsize=16k tank/db/innodb zfs set recordsize=128k tank/db/logs zfs set zfs:zfs_nocacheflush = 1 zfs set sync=disabled tank/db Note: MySQL 5.6.6 and newer (and related MariaDB / Percona forks)\nhas innodb_file_per_table\xa0=\xa0on as default, so IBD files are not created under tank/db/innodb (defined by innodb_data_home_dir in your my.cnf), they are created under tank/db/<db_name>/ and you should use recordsize=16k on this dataset too or switch back to innodb_file_per_table\xa0=\xa0off References MySQL Innodb ZFS Best Practices (Oracle) log_slow_admin_statements ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.18273678421974182, 0.2139659821987152, 0.22771672904491425, 0.1904487907886505, 0.18513177335262299]
--- Tuning Updates ---
Minimal time (ms): 0.009358575514691214
Achieved with configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Decision: Deciding adaption of TuningHint(doc_id=13, param=<re.Match object; span=(42, 72), match='innodb_flush_log_at_trx_commit'>, value=<re.Match object; span=(1, 2), match='2'>, recommendation='=2', passage='This assumes lots of RAM Tweaks for MySQL innodb_flush_log_at_trx_commit=2 skip-innodb_doublewrite Tweaks for ZFS zfs set primarycache=metadata tank/db zfs set atime=off tank/db zfs set recordsize=16k tank/db/innodb zfs set recordsize=128k tank/db/logs zfs set zfs:zfs_nocacheflush = 1 zfs set sync=disabled tank/db Note: MySQL 5.6.6 and newer (and related MariaDB / Percona forks)\nhas innodb_file_per_table\xa0=\xa0on as default, so IBD files are not created under tank/db/innodb (defined by innodb_data_home_dir in your my.cnf), they are created under tank/db/<db_name>/ and you should use recordsize=16k on this dataset too or switch back to innodb_file_per_table\xa0=\xa0off References MySQL Innodb ZFS Best Practices (Oracle) log_slow_admin_statements ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.18273678421974182, 0.2139659821987152, 0.22771672904491425, 0.1904487907886505, 0.18513177335262299]
Choice: 3
type: 3, value: 2.0, unit: 
Done flag: False
No warmup - hint counter: 55
{'sequence': '=2', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.45343008637428284, 0.20156356692314148, 0.16910067200660706, 0.14621882140636444, 0.029686912894248962]}
Decision: Deciding weight of TuningHint(doc_id=13, param=<re.Match object; span=(42, 72), match='innodb_flush_log_at_trx_commit'>, value=<re.Match object; span=(1, 2), match='2'>, recommendation='=2', passage='This assumes lots of RAM Tweaks for MySQL innodb_flush_log_at_trx_commit=2 skip-innodb_doublewrite Tweaks for ZFS zfs set primarycache=metadata tank/db zfs set atime=off tank/db zfs set recordsize=16k tank/db/innodb zfs set recordsize=128k tank/db/logs zfs set zfs:zfs_nocacheflush = 1 zfs set sync=disabled tank/db Note: MySQL 5.6.6 and newer (and related MariaDB / Percona forks)\nhas innodb_file_per_table\xa0=\xa0on as default, so IBD files are not created under tank/db/innodb (defined by innodb_data_home_dir in your my.cnf), they are created under tank/db/<db_name>/ and you should use recordsize=16k on this dataset too or switch back to innodb_file_per_table\xa0=\xa0off References MySQL Innodb ZFS Best Practices (Oracle) log_slow_admin_statements ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.029686912894248962, 0.45343008637428284, 0.20156356692314148, 0.16910067200660706, 0.14621882140636444]
Choice: 4
Trying assigning innodb_flush_log_at_trx_commit to 4
Adding assignment ('innodb_flush_log_at_trx_commit', '4') with weight 16
Assignment ('innodb_flush_log_at_trx_commit', '4') extracted from "This assumes lots of RAM Tweaks for MySQL innodb_flush_log_at_trx_commit=2 skip-innodb_doublewrite Tweaks for ZFS zfs set primarycache=metadata tank/db zfs set atime=off tank/db zfs set recordsize=16k tank/db/innodb zfs set recordsize=128k tank/db/logs zfs set zfs:zfs_nocacheflush = 1 zfs set sync=disabled tank/db Note: MySQL 5.6.6 and newer (and related MariaDB / Percona forks)
has innodb_file_per_table = on as default, so IBD files are not created under tank/db/innodb (defined by innodb_data_home_dir in your my.cnf), they are created under tank/db/<db_name>/ and you should use recordsize=16k on this dataset too or switch back to innodb_file_per_table = off References MySQL Innodb ZFS Best Practices (Oracle) log_slow_admin_statements "
Hint counter: 56
Episode hint counter before: 0
Episode hint counter: 1
Hints per episode: 5
Done flag: False
No warmup - hint counter: 56
{'sequence': '1', 'labels': ['Use recommendation', 'Increase recommendation strongly', 'Increase recommendation', 'Decrease recommendation strongly', 'Decrease recommendation'], 'scores': [0.26459449529647827, 0.2524179518222809, 0.18136543035507202, 0.16976365447044373, 0.1318584829568863]}
Decision: Deciding adaption of TuningHint(doc_id=49, param=<re.Match object; span=(513, 543), match='innodb_flush_log_at_trx_commit'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation='1', passage='Will all the methods improve your insert performance?How to measure SQL Server performanceOptimizing MySQL InnoDB storage engineBuy a fast serverWhat is a virtual CPUUsing a Dedicated server for MySQLMySQL serverUsing SSD instead of magnetic drivesUsing RAID 5/6 for Database DurabilityTweak MySQL memory settingsinnodb_buffer_pool_sizeinnodb_buffer_pool_instancesOther Memory settingsTweak commit mechanismWhat is MySQL transactionWhat is MySQL commitMySQL inserts with a transactionChanging the commit mechanisminnodb_flush_log_at_trx_commit=1innodb_flush_log_at_trx_commit=0innodb_flush_log_at_trx_commit=2innodb_flush_log_at_timeoutUsing precalculated primary key for stringChanging the Database’s flush methodUsing file system compressionDo you need that index?Dropping the indexUsing partitions to improve MySQL insert slow ratePlacing a table on a different driveUsing MySQL bulk insertRegular insert (single row)MySQL insert multiple rows (Extended inserts)Using replace into or insert ignoreMySQL Replace intoMySQL Insert ignoreInserting from multiple threadsUsing load from file (MySQL bulk insert)Using application-level cacheAdjusting char/varchar collationUsing MySQL clusterUsing a custom engineUsing a custom solutionBonus sectionImprove select speedThread concurrencyUsing replicationUsing prepared statementsDisabling foreign keyConnection reuseNumber of available connectionsSummary\nEvery database deployment is different, which means that some of the suggestions here can slow down your insert performance; that’s why you need to benchmark each modification to see the effect it has.\nHow to measure SQL Server performance\nBefore we try to tweak our performance, we must know we improved the performance. innodb_write_io_threads ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.16976365447044373, 0.1318584829568863, 0.26459449529647827, 0.18136543035507202, 0.2524179518222809]
Choice: 2
type: 3, value: 1.0, unit: 
Done flag: False
No warmup - hint counter: 56
{'sequence': '1', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.4530346393585205, 0.20463339984416962, 0.16576817631721497, 0.1469561606645584, 0.02960764616727829]}
Decision: Deciding weight of TuningHint(doc_id=49, param=<re.Match object; span=(513, 543), match='innodb_flush_log_at_trx_commit'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation='1', passage='Will all the methods improve your insert performance?How to measure SQL Server performanceOptimizing MySQL InnoDB storage engineBuy a fast serverWhat is a virtual CPUUsing a Dedicated server for MySQLMySQL serverUsing SSD instead of magnetic drivesUsing RAID 5/6 for Database DurabilityTweak MySQL memory settingsinnodb_buffer_pool_sizeinnodb_buffer_pool_instancesOther Memory settingsTweak commit mechanismWhat is MySQL transactionWhat is MySQL commitMySQL inserts with a transactionChanging the commit mechanisminnodb_flush_log_at_trx_commit=1innodb_flush_log_at_trx_commit=0innodb_flush_log_at_trx_commit=2innodb_flush_log_at_timeoutUsing precalculated primary key for stringChanging the Database’s flush methodUsing file system compressionDo you need that index?Dropping the indexUsing partitions to improve MySQL insert slow ratePlacing a table on a different driveUsing MySQL bulk insertRegular insert (single row)MySQL insert multiple rows (Extended inserts)Using replace into or insert ignoreMySQL Replace intoMySQL Insert ignoreInserting from multiple threadsUsing load from file (MySQL bulk insert)Using application-level cacheAdjusting char/varchar collationUsing MySQL clusterUsing a custom engineUsing a custom solutionBonus sectionImprove select speedThread concurrencyUsing replicationUsing prepared statementsDisabling foreign keyConnection reuseNumber of available connectionsSummary\nEvery database deployment is different, which means that some of the suggestions here can slow down your insert performance; that’s why you need to benchmark each modification to see the effect it has.\nHow to measure SQL Server performance\nBefore we try to tweak our performance, we must know we improved the performance. innodb_write_io_threads ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.02960764616727829, 0.4530346393585205, 0.20463339984416962, 0.16576817631721497, 0.1469561606645584]
--- Tuning Updates ---
Minimal time (ms): 0.009358575514691214
Achieved with configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Decision: Deciding adaption of TuningHint(doc_id=49, param=<re.Match object; span=(513, 543), match='innodb_flush_log_at_trx_commit'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation='1', passage='Will all the methods improve your insert performance?How to measure SQL Server performanceOptimizing MySQL InnoDB storage engineBuy a fast serverWhat is a virtual CPUUsing a Dedicated server for MySQLMySQL serverUsing SSD instead of magnetic drivesUsing RAID 5/6 for Database DurabilityTweak MySQL memory settingsinnodb_buffer_pool_sizeinnodb_buffer_pool_instancesOther Memory settingsTweak commit mechanismWhat is MySQL transactionWhat is MySQL commitMySQL inserts with a transactionChanging the commit mechanisminnodb_flush_log_at_trx_commit=1innodb_flush_log_at_trx_commit=0innodb_flush_log_at_trx_commit=2innodb_flush_log_at_timeoutUsing precalculated primary key for stringChanging the Database’s flush methodUsing file system compressionDo you need that index?Dropping the indexUsing partitions to improve MySQL insert slow ratePlacing a table on a different driveUsing MySQL bulk insertRegular insert (single row)MySQL insert multiple rows (Extended inserts)Using replace into or insert ignoreMySQL Replace intoMySQL Insert ignoreInserting from multiple threadsUsing load from file (MySQL bulk insert)Using application-level cacheAdjusting char/varchar collationUsing MySQL clusterUsing a custom engineUsing a custom solutionBonus sectionImprove select speedThread concurrencyUsing replicationUsing prepared statementsDisabling foreign keyConnection reuseNumber of available connectionsSummary\nEvery database deployment is different, which means that some of the suggestions here can slow down your insert performance; that’s why you need to benchmark each modification to see the effect it has.\nHow to measure SQL Server performance\nBefore we try to tweak our performance, we must know we improved the performance. innodb_write_io_threads ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.16976365447044373, 0.1318584829568863, 0.26459449529647827, 0.18136543035507202, 0.2524179518222809]
Choice: 0
type: 3, value: 1.0, unit: 
Done flag: False
Decision: Deciding weight of TuningHint(doc_id=49, param=<re.Match object; span=(513, 543), match='innodb_flush_log_at_trx_commit'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation='1', passage='Will all the methods improve your insert performance?How to measure SQL Server performanceOptimizing MySQL InnoDB storage engineBuy a fast serverWhat is a virtual CPUUsing a Dedicated server for MySQLMySQL serverUsing SSD instead of magnetic drivesUsing RAID 5/6 for Database DurabilityTweak MySQL memory settingsinnodb_buffer_pool_sizeinnodb_buffer_pool_instancesOther Memory settingsTweak commit mechanismWhat is MySQL transactionWhat is MySQL commitMySQL inserts with a transactionChanging the commit mechanisminnodb_flush_log_at_trx_commit=1innodb_flush_log_at_trx_commit=0innodb_flush_log_at_trx_commit=2innodb_flush_log_at_timeoutUsing precalculated primary key for stringChanging the Database’s flush methodUsing file system compressionDo you need that index?Dropping the indexUsing partitions to improve MySQL insert slow ratePlacing a table on a different driveUsing MySQL bulk insertRegular insert (single row)MySQL insert multiple rows (Extended inserts)Using replace into or insert ignoreMySQL Replace intoMySQL Insert ignoreInserting from multiple threadsUsing load from file (MySQL bulk insert)Using application-level cacheAdjusting char/varchar collationUsing MySQL clusterUsing a custom engineUsing a custom solutionBonus sectionImprove select speedThread concurrencyUsing replicationUsing prepared statementsDisabling foreign keyConnection reuseNumber of available connectionsSummary\nEvery database deployment is different, which means that some of the suggestions here can slow down your insert performance; that’s why you need to benchmark each modification to see the effect it has.\nHow to measure SQL Server performance\nBefore we try to tweak our performance, we must know we improved the performance. innodb_write_io_threads ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.02960764616727829, 0.4530346393585205, 0.20463339984416962, 0.16576817631721497, 0.1469561606645584]
Choice: 1
Trying assigning innodb_flush_log_at_trx_commit to 0
Adding assignment ('innodb_flush_log_at_trx_commit', '0') with weight 2
Assignment ('innodb_flush_log_at_trx_commit', '0') extracted from "Will all the methods improve your insert performance?How to measure SQL Server performanceOptimizing MySQL InnoDB storage engineBuy a fast serverWhat is a virtual CPUUsing a Dedicated server for MySQLMySQL serverUsing SSD instead of magnetic drivesUsing RAID 5/6 for Database DurabilityTweak MySQL memory settingsinnodb_buffer_pool_sizeinnodb_buffer_pool_instancesOther Memory settingsTweak commit mechanismWhat is MySQL transactionWhat is MySQL commitMySQL inserts with a transactionChanging the commit mechanisminnodb_flush_log_at_trx_commit=1innodb_flush_log_at_trx_commit=0innodb_flush_log_at_trx_commit=2innodb_flush_log_at_timeoutUsing precalculated primary key for stringChanging the Database’s flush methodUsing file system compressionDo you need that index?Dropping the indexUsing partitions to improve MySQL insert slow ratePlacing a table on a different driveUsing MySQL bulk insertRegular insert (single row)MySQL insert multiple rows (Extended inserts)Using replace into or insert ignoreMySQL Replace intoMySQL Insert ignoreInserting from multiple threadsUsing load from file (MySQL bulk insert)Using application-level cacheAdjusting char/varchar collationUsing MySQL clusterUsing a custom engineUsing a custom solutionBonus sectionImprove select speedThread concurrencyUsing replicationUsing prepared statementsDisabling foreign keyConnection reuseNumber of available connectionsSummary
Every database deployment is different, which means that some of the suggestions here can slow down your insert performance; that’s why you need to benchmark each modification to see the effect it has.
How to measure SQL Server performance
Before we try to tweak our performance, we must know we improved the performance. innodb_write_io_threads "
Hint counter: 57
Episode hint counter before: 1
Episode hint counter: 2
Hints per episode: 5
Done flag: False
No warmup - hint counter: 57
{'sequence': '768MB', 'labels': ['Use recommendation', 'Increase recommendation strongly', 'Decrease recommendation strongly', 'Increase recommendation', 'Decrease recommendation'], 'scores': [0.29551634192466736, 0.2258414328098297, 0.20162628591060638, 0.1414114236831665, 0.13560456037521362]}
Decision: Deciding adaption of TuningHint(doc_id=21, param=<re.Match object; span=(144, 159), match='key_buffer_size'>, value=<re.Match object; span=(0, 5), match='768MB'>, recommendation='768MB', passage='+-------------------+-------------+Code language: SQL (Structured Query Language) (sql)\nThese two variables and values relate to the configured key_buffer_size\nIn this old example, the database server has 4GB of RAM and a configured key_buffer_size of 512MB. The ratio (Key_read_requests / Key_reads) is approximately 1/1275, which is good but the key_buffer_size value may be increased to 768MB. Even though this is not yet necessary. key_buffer_size ', float_val=768.0, val_unit='MB', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.20162628591060638, 0.13560456037521362, 0.29551634192466736, 0.1414114236831665, 0.2258414328098297]
Choice: 4
type: 3, value: 768.0, unit: MB
Done flag: False
No warmup - hint counter: 57
{'sequence': '768MB', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.4864690899848938, 0.19838297367095947, 0.1505724936723709, 0.13435855507850647, 0.030216867104172707]}
Decision: Deciding weight of TuningHint(doc_id=21, param=<re.Match object; span=(144, 159), match='key_buffer_size'>, value=<re.Match object; span=(0, 5), match='768MB'>, recommendation='768MB', passage='+-------------------+-------------+Code language: SQL (Structured Query Language) (sql)\nThese two variables and values relate to the configured key_buffer_size\nIn this old example, the database server has 4GB of RAM and a configured key_buffer_size of 512MB. The ratio (Key_read_requests / Key_reads) is approximately 1/1275, which is good but the key_buffer_size value may be increased to 768MB. Even though this is not yet necessary. key_buffer_size ', float_val=768.0, val_unit='MB', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.030216867104172707, 0.4864690899848938, 0.19838297367095947, 0.1505724936723709, 0.13435855507850647]
Choice: 1
Trying assigning key_buffer_size to 3072MB
Assignment ('key_buffer_size', '3072MB') was rejected
Hint counter: 58
Episode hint counter before: 2
Episode hint counter: 3
Hints per episode: 5
Done flag: False
No warmup - hint counter: 58
{'sequence': '512M', 'labels': ['Use recommendation', 'Increase recommendation strongly', 'Decrease recommendation strongly', 'Decrease recommendation', 'Increase recommendation'], 'scores': [0.2714363634586334, 0.19987469911575317, 0.19939805567264557, 0.171909898519516, 0.15738099813461304]}
Decision: Deciding adaption of TuningHint(doc_id=51, param=<re.Match object; span=(109, 124), match='key_buffer_size'>, value=<re.Match object; span=(0, 4), match='512M'>, recommendation='512M', passage='long_query_time=5\n# Physical RAM is 32G (8-core)\ninnodb_buffer_pool_size =24G\ninnodb_buffer_pool_instances=6\nkey_buffer_size=512M\nnnodb_write_io_threads=8 innodb_buffer_pool_size ', float_val=512.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.19939805567264557, 0.171909898519516, 0.2714363634586334, 0.15738099813461304, 0.19987469911575317]
Choice: 3
type: 3, value: 512.0, unit: M
Done flag: False
No warmup - hint counter: 58
{'sequence': '512M', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.45348823070526123, 0.20669890940189362, 0.17552338540554047, 0.14287002384662628, 0.02141939103603363]}
Decision: Deciding weight of TuningHint(doc_id=51, param=<re.Match object; span=(109, 124), match='key_buffer_size'>, value=<re.Match object; span=(0, 4), match='512M'>, recommendation='512M', passage='long_query_time=5\n# Physical RAM is 32G (8-core)\ninnodb_buffer_pool_size =24G\ninnodb_buffer_pool_instances=6\nkey_buffer_size=512M\nnnodb_write_io_threads=8 innodb_buffer_pool_size ', float_val=512.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.02141939103603363, 0.45348823070526123, 0.20669890940189362, 0.17552338540554047, 0.14287002384662628]
--- Tuning Updates ---
Minimal time (ms): 0.009358575514691214
Achieved with configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Decision: Deciding adaption of TuningHint(doc_id=51, param=<re.Match object; span=(109, 124), match='key_buffer_size'>, value=<re.Match object; span=(0, 4), match='512M'>, recommendation='512M', passage='long_query_time=5\n# Physical RAM is 32G (8-core)\ninnodb_buffer_pool_size =24G\ninnodb_buffer_pool_instances=6\nkey_buffer_size=512M\nnnodb_write_io_threads=8 innodb_buffer_pool_size ', float_val=512.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.19939805567264557, 0.171909898519516, 0.2714363634586334, 0.15738099813461304, 0.19987469911575317]
Choice: 2
type: 3, value: 512.0, unit: M
Done flag: False
Decision: Deciding weight of TuningHint(doc_id=51, param=<re.Match object; span=(109, 124), match='key_buffer_size'>, value=<re.Match object; span=(0, 4), match='512M'>, recommendation='512M', passage='long_query_time=5\n# Physical RAM is 32G (8-core)\ninnodb_buffer_pool_size =24G\ninnodb_buffer_pool_instances=6\nkey_buffer_size=512M\nnnodb_write_io_threads=8 innodb_buffer_pool_size ', float_val=512.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.02141939103603363, 0.45348823070526123, 0.20669890940189362, 0.17552338540554047, 0.14287002384662628]
Choice: 1
Trying assigning key_buffer_size to 512M
Assignment ('key_buffer_size', '512M') was rejected
Hint counter: 59
Episode hint counter before: 3
Episode hint counter: 4
Hints per episode: 5
Done flag: False
No warmup - hint counter: 59
{'sequence': '512 M\n', 'labels': ['Decrease recommendation', 'Use recommendation', 'Decrease recommendation strongly', 'Increase recommendation', 'Increase recommendation strongly'], 'scores': [0.2537602484226227, 0.20101849734783173, 0.19408679008483887, 0.19136649370193481, 0.15976792573928833]}
Decision: Deciding adaption of TuningHint(doc_id=51, param=<re.Match object; span=(54, 69), match='key_buffer_size'>, value=<re.Match object; span=(0, 3), match='512'>, recommendation='512 M\n', passage='KEY BUFFER\nCurrent MyISAM index space = 638 K\nCurrent key_buffer_size = 512 M\nKey cache miss rate is 1 : 144181\nKey buffer free ratio = 81 %\nYour key_buffer_size seems to be too high.\nPerhaps you can use these resources elsewhere key_buffer_size ', float_val=512.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.19408679008483887, 0.2537602484226227, 0.20101849734783173, 0.19136649370193481, 0.15976792573928833]
Choice: 2
type: 3, value: 512.0, unit: 
Done flag: False
No warmup - hint counter: 59
{'sequence': '512 M\n', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.47545427083969116, 0.1839362382888794, 0.1693054437637329, 0.14964286983013153, 0.021661153063178062]}
Decision: Deciding weight of TuningHint(doc_id=51, param=<re.Match object; span=(54, 69), match='key_buffer_size'>, value=<re.Match object; span=(0, 3), match='512'>, recommendation='512 M\n', passage='KEY BUFFER\nCurrent MyISAM index space = 638 K\nCurrent key_buffer_size = 512 M\nKey cache miss rate is 1 : 144181\nKey buffer free ratio = 81 %\nYour key_buffer_size seems to be too high.\nPerhaps you can use these resources elsewhere key_buffer_size ', float_val=512.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.021661153063178062, 0.47545427083969116, 0.1839362382888794, 0.1693054437637329, 0.14964286983013153]
Choice: 0
Trying assigning key_buffer_size to 512
Adding assignment ('key_buffer_size', '512') with weight 1
Assignment ('key_buffer_size', '512') extracted from "KEY BUFFER
Current MyISAM index space = 638 K
Current key_buffer_size = 512 M
Key cache miss rate is 1 : 144181
Key buffer free ratio = 81 %
Your key_buffer_size seems to be too high.
Perhaps you can use these resources elsewhere key_buffer_size "
Hint counter: 60
Episode hint counter before: 4
Episode hint counter: 5
Hints per episode: 5
Episode finished!
Done flag: True
Finalizing episode!
Weighted hints: defaultdict(<function NlpTuningEnv._finalize_episode.<locals>.<lambda> at 0x7f86e0c8b560>, {('innodb_flush_log_at_trx_commit', '4'): 16, ('innodb_flush_log_at_trx_commit', '0'): 2, ('key_buffer_size', '512'): 1})
Selected configurations: [{'innodb_flush_log_at_trx_commit': '4', 'key_buffer_size': '512'}, {'innodb_flush_log_at_trx_commit': '0', 'key_buffer_size': '512'}]
Trying configuration: {'innodb_flush_log_at_trx_commit': '4', 'key_buffer_size': '512'}
--- Tuning Updates ---
Minimal time (ms): 0.009358575514691214
Achieved with configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Reward 0.3715752918828015 with {'innodb_flush_log_at_trx_commit': '4', 'key_buffer_size': '512'}
Trying configuration: {'innodb_flush_log_at_trx_commit': '0', 'key_buffer_size': '512'}
--- Tuning Updates ---
Minimal time (ms): 0.009358575514691214
Achieved with configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Reward -0.2913251974017287 with {'innodb_flush_log_at_trx_commit': '0', 'key_buffer_size': '512'}
Obtained 0.3715752918828015 by configuration {'innodb_flush_log_at_trx_commit': '4', 'key_buffer_size': '512'}
Achieved unscaled reward of 0.3715752918828015 using {'innodb_flush_log_at_trx_commit': '4', 'key_buffer_size': '512'}.
No warmup - hint counter: 60
{'sequence': '2', 'labels': ['Use recommendation', 'Increase recommendation strongly', 'Increase recommendation', 'Decrease recommendation strongly', 'Decrease recommendation'], 'scores': [0.24640516936779022, 0.22665807604789734, 0.18964026868343353, 0.1801619827747345, 0.1571345180273056]}
Decision: Deciding adaption of TuningHint(doc_id=21, param=<re.Match object; span=(98, 117), match='max_delayed_threads'>, value=<re.Match object; span=(0, 1), match='2'>, recommendation='2', passage='| Threads_cached\n| 0\n| Threads_connected | 76\n| Threads_created\n| 6234040 |\n| Threads_running\n| 2 max_delayed_threads ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.1801619827747345, 0.1571345180273056, 0.24640516936779022, 0.18964026868343353, 0.22665807604789734]
--- Tuning Updates ---
Minimal time (ms): 0.009358575514691214
Achieved with configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Decision: Deciding adaption of TuningHint(doc_id=21, param=<re.Match object; span=(98, 117), match='max_delayed_threads'>, value=<re.Match object; span=(0, 1), match='2'>, recommendation='2', passage='| Threads_cached\n| 0\n| Threads_connected | 76\n| Threads_created\n| 6234040 |\n| Threads_running\n| 2 max_delayed_threads ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.1801619827747345, 0.1571345180273056, 0.24640516936779022, 0.18964026868343353, 0.22665807604789734]
Choice: 4
type: 3, value: 2.0, unit: 
Done flag: False
No warmup - hint counter: 60
{'sequence': '2', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.48118799924850464, 0.19468733668327332, 0.15864619612693787, 0.13557277619838715, 0.0299057774245739]}
Decision: Deciding weight of TuningHint(doc_id=21, param=<re.Match object; span=(98, 117), match='max_delayed_threads'>, value=<re.Match object; span=(0, 1), match='2'>, recommendation='2', passage='| Threads_cached\n| 0\n| Threads_connected | 76\n| Threads_created\n| 6234040 |\n| Threads_running\n| 2 max_delayed_threads ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.0299057774245739, 0.48118799924850464, 0.19468733668327332, 0.15864619612693787, 0.13557277619838715]
--- Tuning Updates ---
Minimal time (ms): 0.009358575514691214
Achieved with configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Decision: Deciding adaption of TuningHint(doc_id=21, param=<re.Match object; span=(98, 117), match='max_delayed_threads'>, value=<re.Match object; span=(0, 1), match='2'>, recommendation='2', passage='| Threads_cached\n| 0\n| Threads_connected | 76\n| Threads_created\n| 6234040 |\n| Threads_running\n| 2 max_delayed_threads ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.1801619827747345, 0.1571345180273056, 0.24640516936779022, 0.18964026868343353, 0.22665807604789734]
Choice: 1
type: 3, value: 2.0, unit: 
Done flag: False
Decision: Deciding weight of TuningHint(doc_id=21, param=<re.Match object; span=(98, 117), match='max_delayed_threads'>, value=<re.Match object; span=(0, 1), match='2'>, recommendation='2', passage='| Threads_cached\n| 0\n| Threads_connected | 76\n| Threads_created\n| 6234040 |\n| Threads_running\n| 2 max_delayed_threads ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.0299057774245739, 0.48118799924850464, 0.19468733668327332, 0.15864619612693787, 0.13557277619838715]
Choice: 1
Trying assigning max_delayed_threads to 1
Adding assignment ('max_delayed_threads', '1') with weight 2
Assignment ('max_delayed_threads', '1') extracted from "| Threads_cached
| 0
| Threads_connected | 76
| Threads_created
| 6234040 |
| Threads_running
| 2 max_delayed_threads "
Hint counter: 61
Episode hint counter before: 0
Episode hint counter: 1
Hints per episode: 5
Done flag: False
No warmup - hint counter: 61
{'sequence': '1', 'labels': ['Use recommendation', 'Increase recommendation strongly', 'Increase recommendation', 'Decrease recommendation strongly', 'Decrease recommendation'], 'scores': [0.26459449529647827, 0.2524179518222809, 0.18136543035507202, 0.16976365447044373, 0.1318584829568863]}
Decision: Deciding adaption of TuningHint(doc_id=21, param=<re.Match object; span=(94, 113), match='max_delayed_threads'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation='1', passage='| Threads_cached\n| 14\n| Threads_connected | 98\n| Threads_created\n| 2896\n| Threads_running\n| 1 max_delayed_threads ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.16976365447044373, 0.1318584829568863, 0.26459449529647827, 0.18136543035507202, 0.2524179518222809]
Choice: 3
type: 3, value: 1.0, unit: 
Done flag: False
No warmup - hint counter: 61
{'sequence': '1', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.4530346393585205, 0.20463339984416962, 0.16576817631721497, 0.1469561606645584, 0.02960764616727829]}
Decision: Deciding weight of TuningHint(doc_id=21, param=<re.Match object; span=(94, 113), match='max_delayed_threads'>, value=<re.Match object; span=(0, 1), match='1'>, recommendation='1', passage='| Threads_cached\n| 14\n| Threads_connected | 98\n| Threads_created\n| 2896\n| Threads_running\n| 1 max_delayed_threads ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.02960764616727829, 0.4530346393585205, 0.20463339984416962, 0.16576817631721497, 0.1469561606645584]
Choice: 2
Trying assigning max_delayed_threads to 2
Adding assignment ('max_delayed_threads', '2') with weight 4
Assignment ('max_delayed_threads', '2') extracted from "| Threads_cached
| 14
| Threads_connected | 98
| Threads_created
| 2896
| Threads_running
| 1 max_delayed_threads "
Hint counter: 62
Episode hint counter before: 1
Episode hint counter: 2
Hints per episode: 5
Done flag: False
No warmup - hint counter: 62
{'sequence': '2', 'labels': ['Use recommendation', 'Increase recommendation strongly', 'Increase recommendation', 'Decrease recommendation strongly', 'Decrease recommendation'], 'scores': [0.24640516936779022, 0.22665807604789734, 0.18964026868343353, 0.1801619827747345, 0.1571345180273056]}
Decision: Deciding adaption of TuningHint(doc_id=67, param=<re.Match object; span=(301, 320), match='max_delayed_threads'>, value=<re.Match object; span=(0, 1), match='2'>, recommendation='2', passage='# watch CPU usage per igb0:que. Multiple network queues will trigger more total\n# interrupts compared to a single network queue, but the processing of each of\n# those queues will be spread over multiple CPU cores allowing the system to\n# handle increased network traffic loads.\n#hw.igb.num_queues="2" max_delayed_threads ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.1801619827747345, 0.1571345180273056, 0.24640516936779022, 0.18964026868343353, 0.22665807604789734]
Choice: 3
type: 3, value: 2.0, unit: 
Done flag: False
No warmup - hint counter: 62
{'sequence': '2', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.48118799924850464, 0.19468733668327332, 0.15864619612693787, 0.13557277619838715, 0.0299057774245739]}
Decision: Deciding weight of TuningHint(doc_id=67, param=<re.Match object; span=(301, 320), match='max_delayed_threads'>, value=<re.Match object; span=(0, 1), match='2'>, recommendation='2', passage='# watch CPU usage per igb0:que. Multiple network queues will trigger more total\n# interrupts compared to a single network queue, but the processing of each of\n# those queues will be spread over multiple CPU cores allowing the system to\n# handle increased network traffic loads.\n#hw.igb.num_queues="2" max_delayed_threads ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.0299057774245739, 0.48118799924850464, 0.19468733668327332, 0.15864619612693787, 0.13557277619838715]
--- Tuning Updates ---
Minimal time (ms): 0.009358575514691214
Achieved with configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Decision: Deciding adaption of TuningHint(doc_id=67, param=<re.Match object; span=(301, 320), match='max_delayed_threads'>, value=<re.Match object; span=(0, 1), match='2'>, recommendation='2', passage='# watch CPU usage per igb0:que. Multiple network queues will trigger more total\n# interrupts compared to a single network queue, but the processing of each of\n# those queues will be spread over multiple CPU cores allowing the system to\n# handle increased network traffic loads.\n#hw.igb.num_queues="2" max_delayed_threads ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.1801619827747345, 0.1571345180273056, 0.24640516936779022, 0.18964026868343353, 0.22665807604789734]
Choice: 1
type: 3, value: 2.0, unit: 
Done flag: False
Decision: Deciding weight of TuningHint(doc_id=67, param=<re.Match object; span=(301, 320), match='max_delayed_threads'>, value=<re.Match object; span=(0, 1), match='2'>, recommendation='2', passage='# watch CPU usage per igb0:que. Multiple network queues will trigger more total\n# interrupts compared to a single network queue, but the processing of each of\n# those queues will be spread over multiple CPU cores allowing the system to\n# handle increased network traffic loads.\n#hw.igb.num_queues="2" max_delayed_threads ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.0299057774245739, 0.48118799924850464, 0.19468733668327332, 0.15864619612693787, 0.13557277619838715]
Choice: 1
Trying assigning max_delayed_threads to 1
Adding assignment ('max_delayed_threads', '1') with weight 2
Assignment ('max_delayed_threads', '1') extracted from "# watch CPU usage per igb0:que. Multiple network queues will trigger more total
# interrupts compared to a single network queue, but the processing of each of
# those queues will be spread over multiple CPU cores allowing the system to
# handle increased network traffic loads.
#hw.igb.num_queues="2" max_delayed_threads "
Hint counter: 63
Episode hint counter before: 2
Episode hint counter: 3
Hints per episode: 5
Done flag: False
No warmup - hint counter: 63
{'sequence': 'zero(0)', 'labels': ['Decrease recommendation', 'Decrease recommendation strongly', 'Use recommendation', 'Increase recommendation strongly', 'Increase recommendation'], 'scores': [0.32560691237449646, 0.2861291170120239, 0.2538962662220001, 0.09182469546794891, 0.042542945593595505]}
Decision: Deciding adaption of TuningHint(doc_id=67, param=<re.Match object; span=(297, 316), match='max_delayed_threads'>, value=<re.Match object; span=(5, 6), match='0'>, recommendation='zero(0)', passage='# Intel i350-T2 igb(4): the rx_budget sets the maximum number of receive\n# packets to process in an interrupt. If the budget is reached, the\n# remaining/pending packets will be processed later in a scheduled taskqueue.\n# The default of zero(0) indicates a FreeBSD 12 default of sixteen(16) frames max_delayed_threads ', float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.2861291170120239, 0.32560691237449646, 0.2538962662220001, 0.042542945593595505, 0.09182469546794891]
Choice: 2
type: 3, value: 0.0, unit: 
Done flag: False
No warmup - hint counter: 63
{'sequence': 'zero(0)', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.475010484457016, 0.20858532190322876, 0.15920676290988922, 0.12102645635604858, 0.036170948296785355]}
Decision: Deciding weight of TuningHint(doc_id=67, param=<re.Match object; span=(297, 316), match='max_delayed_threads'>, value=<re.Match object; span=(5, 6), match='0'>, recommendation='zero(0)', passage='# Intel i350-T2 igb(4): the rx_budget sets the maximum number of receive\n# packets to process in an interrupt. If the budget is reached, the\n# remaining/pending packets will be processed later in a scheduled taskqueue.\n# The default of zero(0) indicates a FreeBSD 12 default of sixteen(16) frames max_delayed_threads ', float_val=0.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.036170948296785355, 0.475010484457016, 0.20858532190322876, 0.15920676290988922, 0.12102645635604858]
Choice: 2
Trying assigning max_delayed_threads to 0
Assignment ('max_delayed_threads', '0') was rejected
Hint counter: 64
Episode hint counter before: 3
Episode hint counter: 4
Hints per episode: 5
Done flag: False
No warmup - hint counter: 64
{'sequence': '16M', 'labels': ['Use recommendation', 'Increase recommendation strongly', 'Decrease recommendation strongly', 'Decrease recommendation', 'Increase recommendation'], 'scores': [0.269285649061203, 0.20589277148246765, 0.18481634557247162, 0.17571312189102173, 0.1642920970916748]}
Decision: Deciding adaption of TuningHint(doc_id=24, param=<re.Match object; span=(131, 147), match='sort_buffer_size'>, value=<re.Match object; span=(0, 3), match='16M'>, recommendation='16M', passage='dl.file.entry.read.count.enabled=false\n4 Database\n4.1 My.cnf\n#Each session that needs to do a sort allocates a buffer of this size\nsort_buffer_size=16M\n#Each thread that does a sequential scan for a MyISAM table allocates a buffer of this size (in bytes) for each table it scans read_rnd_buffer_size ', float_val=16.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.18481634557247162, 0.17571312189102173, 0.269285649061203, 0.1642920970916748, 0.20589277148246765]
Choice: 2
type: 3, value: 16.0, unit: M
Done flag: False
No warmup - hint counter: 64
{'sequence': '16M', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.4479618966579437, 0.20477630198001862, 0.16790500283241272, 0.1591813862323761, 0.02017541602253914]}
Decision: Deciding weight of TuningHint(doc_id=24, param=<re.Match object; span=(131, 147), match='sort_buffer_size'>, value=<re.Match object; span=(0, 3), match='16M'>, recommendation='16M', passage='dl.file.entry.read.count.enabled=false\n4 Database\n4.1 My.cnf\n#Each session that needs to do a sort allocates a buffer of this size\nsort_buffer_size=16M\n#Each thread that does a sequential scan for a MyISAM table allocates a buffer of this size (in bytes) for each table it scans read_rnd_buffer_size ', float_val=16.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.02017541602253914, 0.4479618966579437, 0.20477630198001862, 0.16790500283241272, 0.1591813862323761]
--- Tuning Updates ---
Minimal time (ms): 0.009358575514691214
Achieved with configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Decision: Deciding adaption of TuningHint(doc_id=24, param=<re.Match object; span=(131, 147), match='sort_buffer_size'>, value=<re.Match object; span=(0, 3), match='16M'>, recommendation='16M', passage='dl.file.entry.read.count.enabled=false\n4 Database\n4.1 My.cnf\n#Each session that needs to do a sort allocates a buffer of this size\nsort_buffer_size=16M\n#Each thread that does a sequential scan for a MyISAM table allocates a buffer of this size (in bytes) for each table it scans read_rnd_buffer_size ', float_val=16.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.18481634557247162, 0.17571312189102173, 0.269285649061203, 0.1642920970916748, 0.20589277148246765]
Choice: 2
type: 3, value: 16.0, unit: M
Done flag: False
Decision: Deciding weight of TuningHint(doc_id=24, param=<re.Match object; span=(131, 147), match='sort_buffer_size'>, value=<re.Match object; span=(0, 3), match='16M'>, recommendation='16M', passage='dl.file.entry.read.count.enabled=false\n4 Database\n4.1 My.cnf\n#Each session that needs to do a sort allocates a buffer of this size\nsort_buffer_size=16M\n#Each thread that does a sequential scan for a MyISAM table allocates a buffer of this size (in bytes) for each table it scans read_rnd_buffer_size ', float_val=16.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.02017541602253914, 0.4479618966579437, 0.20477630198001862, 0.16790500283241272, 0.1591813862323761]
Choice: 0
Trying assigning sort_buffer_size to 16M
Assignment ('sort_buffer_size', '16M') was rejected
Hint counter: 65
Episode hint counter before: 4
Episode hint counter: 5
Hints per episode: 5
Episode finished!
Done flag: True
Finalizing episode!
Weighted hints: defaultdict(<function NlpTuningEnv._finalize_episode.<locals>.<lambda> at 0x7f86e0cbe170>, {('max_delayed_threads', '1'): 4, ('max_delayed_threads', '2'): 4})
Selected configurations: [{'max_delayed_threads': '1'}, {'max_delayed_threads': '2'}]
Trying configuration: {'max_delayed_threads': '1'}
--- Tuning Updates ---
Minimal time (ms): 0.009358575514691214
Achieved with configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Reward -0.3243826364700866 with {'max_delayed_threads': '1'}
Trying configuration: {'max_delayed_threads': '2'}
--- Tuning Updates ---
Minimal time (ms): 0.009358575514691214
Achieved with configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Reward 0.21295966324069426 with {'max_delayed_threads': '2'}
Obtained 0.21295966324069426 by configuration {'max_delayed_threads': '2'}
Achieved unscaled reward of 0.21295966324069426 using {'max_delayed_threads': '2'}.
No warmup - hint counter: 65
{'sequence': '2M', 'labels': ['Use recommendation', 'Increase recommendation strongly', 'Increase recommendation', 'Decrease recommendation strongly', 'Decrease recommendation'], 'scores': [0.2710579037666321, 0.21805454790592194, 0.20360739529132843, 0.17044711112976074, 0.136833056807518]}
Decision: Deciding adaption of TuningHint(doc_id=51, param=<re.Match object; span=(0, 16), match='sort_buffer_size'>, value=<re.Match object; span=(0, 2), match='2M'>, recommendation='2M', passage='sort_buffer_size = 2M\njoin_buffer_size = 256K\nread_buffer_size=128K\nread_rnd_buffer_size = 256M\ntransaction-isolation=READ-COMMITTED\nlog_warnings\nslow_query_log sort_buffer_size ', float_val=2.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.17044711112976074, 0.136833056807518, 0.2710579037666321, 0.20360739529132843, 0.21805454790592194]
--- Tuning Updates ---
Minimal time (ms): 0.009358575514691214
Achieved with configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Decision: Deciding adaption of TuningHint(doc_id=51, param=<re.Match object; span=(0, 16), match='sort_buffer_size'>, value=<re.Match object; span=(0, 2), match='2M'>, recommendation='2M', passage='sort_buffer_size = 2M\njoin_buffer_size = 256K\nread_buffer_size=128K\nread_rnd_buffer_size = 256M\ntransaction-isolation=READ-COMMITTED\nlog_warnings\nslow_query_log sort_buffer_size ', float_val=2.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.17044711112976074, 0.136833056807518, 0.2710579037666321, 0.20360739529132843, 0.21805454790592194]
Choice: 3
type: 3, value: 2.0, unit: M
Done flag: False
No warmup - hint counter: 65
{'sequence': '2M', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.4534042775630951, 0.20097090303897858, 0.1713137924671173, 0.15179763734340668, 0.022513343021273613]}
Decision: Deciding weight of TuningHint(doc_id=51, param=<re.Match object; span=(0, 16), match='sort_buffer_size'>, value=<re.Match object; span=(0, 2), match='2M'>, recommendation='2M', passage='sort_buffer_size = 2M\njoin_buffer_size = 256K\nread_buffer_size=128K\nread_rnd_buffer_size = 256M\ntransaction-isolation=READ-COMMITTED\nlog_warnings\nslow_query_log sort_buffer_size ', float_val=2.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.022513343021273613, 0.4534042775630951, 0.20097090303897858, 0.1713137924671173, 0.15179763734340668]
Choice: 3
Trying assigning sort_buffer_size to 4M
Assignment ('sort_buffer_size', '4M') was rejected
Hint counter: 66
Episode hint counter before: 0
Episode hint counter: 1
Hints per episode: 5
Done flag: False
No warmup - hint counter: 66
{'sequence': '2 M', 'labels': ['Use recommendation', 'Increase recommendation', 'Increase recommendation strongly', 'Decrease recommendation strongly', 'Decrease recommendation'], 'scores': [0.24788297712802887, 0.19793567061424255, 0.19519926607608795, 0.17970263957977295, 0.1792794018983841]}
Decision: Deciding adaption of TuningHint(doc_id=51, param=<re.Match object; span=(121, 137), match='sort_buffer_size'>, value=<re.Match object; span=(0, 1), match='2'>, recommendation='2 M', passage='QUERY CACHE\nQuery cache is supported but not enabled\nPerhaps you should set the query_cache_size\nSORT OPERATIONS\nCurrent sort_buffer_size = 2 M\nCurrent read_rnd_buffer_size = 256 M\nSort buffer seems to be fine query_cache_size ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.17970263957977295, 0.1792794018983841, 0.24788297712802887, 0.19793567061424255, 0.19519926607608795]
Choice: 1
type: 3, value: 2.0, unit: 
Done flag: False
No warmup - hint counter: 66
{'sequence': '2 M', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.46470487117767334, 0.1968546062707901, 0.1633264422416687, 0.15368150174617767, 0.0214325450360775]}
Decision: Deciding weight of TuningHint(doc_id=51, param=<re.Match object; span=(121, 137), match='sort_buffer_size'>, value=<re.Match object; span=(0, 1), match='2'>, recommendation='2 M', passage='QUERY CACHE\nQuery cache is supported but not enabled\nPerhaps you should set the query_cache_size\nSORT OPERATIONS\nCurrent sort_buffer_size = 2 M\nCurrent read_rnd_buffer_size = 256 M\nSort buffer seems to be fine query_cache_size ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.0214325450360775, 0.46470487117767334, 0.1968546062707901, 0.1633264422416687, 0.15368150174617767]
--- Tuning Updates ---
Minimal time (ms): 0.009358575514691214
Achieved with configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Decision: Deciding adaption of TuningHint(doc_id=51, param=<re.Match object; span=(121, 137), match='sort_buffer_size'>, value=<re.Match object; span=(0, 1), match='2'>, recommendation='2 M', passage='QUERY CACHE\nQuery cache is supported but not enabled\nPerhaps you should set the query_cache_size\nSORT OPERATIONS\nCurrent sort_buffer_size = 2 M\nCurrent read_rnd_buffer_size = 256 M\nSort buffer seems to be fine query_cache_size ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.17970263957977295, 0.1792794018983841, 0.24788297712802887, 0.19793567061424255, 0.19519926607608795]
Choice: 2
type: 3, value: 2.0, unit: 
Done flag: False
Decision: Deciding weight of TuningHint(doc_id=51, param=<re.Match object; span=(121, 137), match='sort_buffer_size'>, value=<re.Match object; span=(0, 1), match='2'>, recommendation='2 M', passage='QUERY CACHE\nQuery cache is supported but not enabled\nPerhaps you should set the query_cache_size\nSORT OPERATIONS\nCurrent sort_buffer_size = 2 M\nCurrent read_rnd_buffer_size = 256 M\nSort buffer seems to be fine query_cache_size ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.0214325450360775, 0.46470487117767334, 0.1968546062707901, 0.1633264422416687, 0.15368150174617767]
Choice: 3
Trying assigning sort_buffer_size to 2
Adding assignment ('sort_buffer_size', '2') with weight 8
Assignment ('sort_buffer_size', '2') extracted from "QUERY CACHE
Query cache is supported but not enabled
Perhaps you should set the query_cache_size
SORT OPERATIONS
Current sort_buffer_size = 2 M
Current read_rnd_buffer_size = 256 M
Sort buffer seems to be fine query_cache_size "
Hint counter: 67
Episode hint counter before: 1
Episode hint counter: 2
Hints per episode: 5
Done flag: False
No warmup - hint counter: 67
{'sequence': '2 M', 'labels': ['Use recommendation', 'Increase recommendation', 'Increase recommendation strongly', 'Decrease recommendation strongly', 'Decrease recommendation'], 'scores': [0.24788297712802887, 0.19793567061424255, 0.19519926607608795, 0.17970263957977295, 0.1792794018983841]}
Decision: Deciding adaption of TuningHint(doc_id=51, param=<re.Match object; span=(167, 183), match='sort_buffer_size'>, value=<re.Match object; span=(0, 1), match='2'>, recommendation='2 M', passage='Perhaps you can use these resources elsewhere\nQUERY CACHE\nQuery cache is supported but not enabled\nPerhaps you should set the query_cache_size\nSORT OPERATIONS\nCurrent sort_buffer_size = 2 M\nCurrent read_rnd_buffer_size = 256 K query_cache_size ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.17970263957977295, 0.1792794018983841, 0.24788297712802887, 0.19793567061424255, 0.19519926607608795]
Choice: 2
type: 3, value: 2.0, unit: 
Done flag: False
No warmup - hint counter: 67
{'sequence': '2 M', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.46470487117767334, 0.1968546062707901, 0.1633264422416687, 0.15368150174617767, 0.0214325450360775]}
Decision: Deciding weight of TuningHint(doc_id=51, param=<re.Match object; span=(167, 183), match='sort_buffer_size'>, value=<re.Match object; span=(0, 1), match='2'>, recommendation='2 M', passage='Perhaps you can use these resources elsewhere\nQUERY CACHE\nQuery cache is supported but not enabled\nPerhaps you should set the query_cache_size\nSORT OPERATIONS\nCurrent sort_buffer_size = 2 M\nCurrent read_rnd_buffer_size = 256 K query_cache_size ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.0214325450360775, 0.46470487117767334, 0.1968546062707901, 0.1633264422416687, 0.15368150174617767]
Choice: 0
Trying assigning sort_buffer_size to 2
Adding assignment ('sort_buffer_size', '2') with weight 1
Assignment ('sort_buffer_size', '2') extracted from "Perhaps you can use these resources elsewhere
QUERY CACHE
Query cache is supported but not enabled
Perhaps you should set the query_cache_size
SORT OPERATIONS
Current sort_buffer_size = 2 M
Current read_rnd_buffer_size = 256 K query_cache_size "
Hint counter: 68
Episode hint counter before: 2
Episode hint counter: 3
Hints per episode: 5
Done flag: False
No warmup - hint counter: 68
{'sequence': '256M', 'labels': ['Use recommendation', 'Increase recommendation strongly', 'Decrease recommendation strongly', 'Decrease recommendation', 'Increase recommendation'], 'scores': [0.2737073302268982, 0.20963145792484283, 0.2070138305425644, 0.16035620868206024, 0.14929115772247314]}
Decision: Deciding adaption of TuningHint(doc_id=24, param=<re.Match object; span=(0, 16), match='join_buffer_size'>, value=<re.Match object; span=(0, 4), match='256M'>, recommendation='256M', passage='join_buffer_size = 256M\n#The number of open tables for all threads.\ntable_open_cache = 400\n#The amount of memory allocated for caching query results.\nquery_cache_size=32M\n* Reference:\xa0http://www.packtpub.com/liferay-portal-performance-best-practices/book thread_cache_size ', float_val=256.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.2070138305425644, 0.16035620868206024, 0.2737073302268982, 0.14929115772247314, 0.20963145792484283]
Choice: 1
type: 3, value: 256.0, unit: M
Done flag: False
No warmup - hint counter: 68
{'sequence': '256M', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.4415969252586365, 0.2193228304386139, 0.17226210236549377, 0.14815089106559753, 0.018667317926883698]}
Decision: Deciding weight of TuningHint(doc_id=24, param=<re.Match object; span=(0, 16), match='join_buffer_size'>, value=<re.Match object; span=(0, 4), match='256M'>, recommendation='256M', passage='join_buffer_size = 256M\n#The number of open tables for all threads.\ntable_open_cache = 400\n#The amount of memory allocated for caching query results.\nquery_cache_size=32M\n* Reference:\xa0http://www.packtpub.com/liferay-portal-performance-best-practices/book thread_cache_size ', float_val=256.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.018667317926883698, 0.4415969252586365, 0.2193228304386139, 0.17226210236549377, 0.14815089106559753]
--- Tuning Updates ---
Minimal time (ms): 0.009358575514691214
Achieved with configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Decision: Deciding adaption of TuningHint(doc_id=24, param=<re.Match object; span=(0, 16), match='join_buffer_size'>, value=<re.Match object; span=(0, 4), match='256M'>, recommendation='256M', passage='join_buffer_size = 256M\n#The number of open tables for all threads.\ntable_open_cache = 400\n#The amount of memory allocated for caching query results.\nquery_cache_size=32M\n* Reference:\xa0http://www.packtpub.com/liferay-portal-performance-best-practices/book thread_cache_size ', float_val=256.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.2070138305425644, 0.16035620868206024, 0.2737073302268982, 0.14929115772247314, 0.20963145792484283]
Choice: 0
type: 3, value: 256.0, unit: M
Done flag: False
Decision: Deciding weight of TuningHint(doc_id=24, param=<re.Match object; span=(0, 16), match='join_buffer_size'>, value=<re.Match object; span=(0, 4), match='256M'>, recommendation='256M', passage='join_buffer_size = 256M\n#The number of open tables for all threads.\ntable_open_cache = 400\n#The amount of memory allocated for caching query results.\nquery_cache_size=32M\n* Reference:\xa0http://www.packtpub.com/liferay-portal-performance-best-practices/book thread_cache_size ', float_val=256.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.018667317926883698, 0.4415969252586365, 0.2193228304386139, 0.17226210236549377, 0.14815089106559753]
Choice: 0
Trying assigning join_buffer_size to 64M
Adding assignment ('join_buffer_size', '64M') with weight 1
Assignment ('join_buffer_size', '64M') extracted from "join_buffer_size = 256M
#The number of open tables for all threads.
table_open_cache = 400
#The amount of memory allocated for caching query results.
query_cache_size=32M
* Reference: http://www.packtpub.com/liferay-portal-performance-best-practices/book thread_cache_size "
Hint counter: 69
Episode hint counter before: 3
Episode hint counter: 4
Hints per episode: 5
Done flag: False
No warmup - hint counter: 69
{'sequence': '256K', 'labels': ['Use recommendation', 'Increase recommendation strongly', 'Decrease recommendation strongly', 'Increase recommendation', 'Decrease recommendation'], 'scores': [0.27637049555778503, 0.2110208421945572, 0.20166806876659393, 0.15943355858325958, 0.15150701999664307]}
Decision: Deciding adaption of TuningHint(doc_id=51, param=<re.Match object; span=(22, 38), match='join_buffer_size'>, value=<re.Match object; span=(0, 4), match='256K'>, recommendation='256K', passage='sort_buffer_size = 2M\njoin_buffer_size = 256K\nread_buffer_size=128K\nread_rnd_buffer_size = 256M\ntransaction-isolation=READ-COMMITTED\nlog_warnings\nslow_query_log sort_buffer_size ', float_val=256.0, val_unit='K', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.20166806876659393, 0.15150701999664307, 0.27637049555778503, 0.15943355858325958, 0.2110208421945572]
Choice: 3
type: 3, value: 256.0, unit: K
Done flag: False
No warmup - hint counter: 69
{'sequence': '256K', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.4390260577201843, 0.22590969502925873, 0.17350929975509644, 0.1410510092973709, 0.020503981038928032]}
Decision: Deciding weight of TuningHint(doc_id=51, param=<re.Match object; span=(22, 38), match='join_buffer_size'>, value=<re.Match object; span=(0, 4), match='256K'>, recommendation='256K', passage='sort_buffer_size = 2M\njoin_buffer_size = 256K\nread_buffer_size=128K\nread_rnd_buffer_size = 256M\ntransaction-isolation=READ-COMMITTED\nlog_warnings\nslow_query_log sort_buffer_size ', float_val=256.0, val_unit='K', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.020503981038928032, 0.4390260577201843, 0.22590969502925873, 0.17350929975509644, 0.1410510092973709]
Choice: 2
Trying assigning join_buffer_size to 512K
Assignment ('join_buffer_size', '512K') was rejected
Hint counter: 70
Episode hint counter before: 4
Episode hint counter: 5
Hints per episode: 5
Episode finished!
Done flag: True
Finalizing episode!
Weighted hints: defaultdict(<function NlpTuningEnv._finalize_episode.<locals>.<lambda> at 0x7f86e0cbfb00>, {('sort_buffer_size', '2'): 9, ('join_buffer_size', '64M'): 1})
Selected configurations: [{'sort_buffer_size': '2', 'join_buffer_size': '64M'}, {'sort_buffer_size': '2', 'join_buffer_size': '64M'}]
Trying configuration: {'sort_buffer_size': '2', 'join_buffer_size': '64M'}
--- Tuning Updates ---
Minimal time (ms): 0.009358575514691214
Achieved with configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Reward 0.13873545363611728 with {'sort_buffer_size': '2', 'join_buffer_size': '64M'}
Trying configuration: {'sort_buffer_size': '2', 'join_buffer_size': '64M'}
--- Tuning Updates ---
Minimal time (ms): 0.009358575514691214
Achieved with configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Reward 0.3325991213544115 with {'sort_buffer_size': '2', 'join_buffer_size': '64M'}
Obtained 0.3325991213544115 by configuration {'sort_buffer_size': '2', 'join_buffer_size': '64M'}
Achieved unscaled reward of 0.3325991213544115 using {'sort_buffer_size': '2', 'join_buffer_size': '64M'}.
No warmup - hint counter: 70
{'sequence': '400', 'labels': ['Use recommendation', 'Decrease recommendation strongly', 'Increase recommendation strongly', 'Increase recommendation', 'Decrease recommendation'], 'scores': [0.26616019010543823, 0.1984330415725708, 0.19179195165634155, 0.17960214614868164, 0.16401270031929016]}
Decision: Deciding adaption of TuningHint(doc_id=24, param=<re.Match object; span=(68, 84), match='table_open_cache'>, value=<re.Match object; span=(0, 3), match='400'>, recommendation='400', passage='join_buffer_size = 256M\n#The number of open tables for all threads.\ntable_open_cache = 400\n#The amount of memory allocated for caching query results.\nquery_cache_size=32M\n* Reference:\xa0http://www.packtpub.com/liferay-portal-performance-best-practices/book thread_cache_size ', float_val=400.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.1984330415725708, 0.16401270031929016, 0.26616019010543823, 0.17960214614868164, 0.19179195165634155]
--- Tuning Updates ---
Minimal time (ms): 0.009358575514691214
Achieved with configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Decision: Deciding adaption of TuningHint(doc_id=24, param=<re.Match object; span=(68, 84), match='table_open_cache'>, value=<re.Match object; span=(0, 3), match='400'>, recommendation='400', passage='join_buffer_size = 256M\n#The number of open tables for all threads.\ntable_open_cache = 400\n#The amount of memory allocated for caching query results.\nquery_cache_size=32M\n* Reference:\xa0http://www.packtpub.com/liferay-portal-performance-best-practices/book thread_cache_size ', float_val=400.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.1984330415725708, 0.16401270031929016, 0.26616019010543823, 0.17960214614868164, 0.19179195165634155]
Choice: 0
type: 3, value: 400.0, unit: 
Done flag: False
No warmup - hint counter: 70
{'sequence': '400', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.454190731048584, 0.20262932777404785, 0.16742676496505737, 0.15167906880378723, 0.024074094370007515]}
Decision: Deciding weight of TuningHint(doc_id=24, param=<re.Match object; span=(68, 84), match='table_open_cache'>, value=<re.Match object; span=(0, 3), match='400'>, recommendation='400', passage='join_buffer_size = 256M\n#The number of open tables for all threads.\ntable_open_cache = 400\n#The amount of memory allocated for caching query results.\nquery_cache_size=32M\n* Reference:\xa0http://www.packtpub.com/liferay-portal-performance-best-practices/book thread_cache_size ', float_val=400.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.024074094370007515, 0.454190731048584, 0.20262932777404785, 0.16742676496505737, 0.15167906880378723]
--- Tuning Updates ---
Minimal time (ms): 0.009358575514691214
Achieved with configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Decision: Deciding adaption of TuningHint(doc_id=24, param=<re.Match object; span=(68, 84), match='table_open_cache'>, value=<re.Match object; span=(0, 3), match='400'>, recommendation='400', passage='join_buffer_size = 256M\n#The number of open tables for all threads.\ntable_open_cache = 400\n#The amount of memory allocated for caching query results.\nquery_cache_size=32M\n* Reference:\xa0http://www.packtpub.com/liferay-portal-performance-best-practices/book thread_cache_size ', float_val=400.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.1984330415725708, 0.16401270031929016, 0.26616019010543823, 0.17960214614868164, 0.19179195165634155]
Choice: 4
type: 3, value: 400.0, unit: 
Done flag: False
Decision: Deciding weight of TuningHint(doc_id=24, param=<re.Match object; span=(68, 84), match='table_open_cache'>, value=<re.Match object; span=(0, 3), match='400'>, recommendation='400', passage='join_buffer_size = 256M\n#The number of open tables for all threads.\ntable_open_cache = 400\n#The amount of memory allocated for caching query results.\nquery_cache_size=32M\n* Reference:\xa0http://www.packtpub.com/liferay-portal-performance-best-practices/book thread_cache_size ', float_val=400.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.024074094370007515, 0.454190731048584, 0.20262932777404785, 0.16742676496505737, 0.15167906880378723]
Choice: 2
Trying assigning table_open_cache to 1600
Adding assignment ('table_open_cache', '1600') with weight 4
Assignment ('table_open_cache', '1600') extracted from "join_buffer_size = 256M
#The number of open tables for all threads.
table_open_cache = 400
#The amount of memory allocated for caching query results.
query_cache_size=32M
* Reference: http://www.packtpub.com/liferay-portal-performance-best-practices/book thread_cache_size "
Hint counter: 71
Episode hint counter before: 0
Episode hint counter: 1
Hints per episode: 5
Done flag: False
No warmup - hint counter: 71
{'sequence': '4096', 'labels': ['Use recommendation', 'Decrease recommendation', 'Decrease recommendation strongly', 'Increase recommendation strongly', 'Increase recommendation'], 'scores': [0.27467966079711914, 0.20756569504737854, 0.19290445744991302, 0.16955101490020752, 0.15529918670654297]}
Decision: Deciding adaption of TuningHint(doc_id=51, param=<re.Match object; span=(90, 106), match='table_open_cache'>, value=<re.Match object; span=(0, 4), match='4096'>, recommendation='4096', passage='query_cache_type=0\nquery_cache_size=0\n#query_cache_limit = 4M\ndefault_table_type = InnoDB\ntable_open_cache = 4096\nopen_files_limit = 8192\nmax_connections = 800 query_cache_limit ', float_val=4096.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.19290445744991302, 0.20756569504737854, 0.27467966079711914, 0.15529918670654297, 0.16955101490020752]
Choice: 0
type: 3, value: 4096.0, unit: 
Done flag: False
No warmup - hint counter: 71
{'sequence': '4096', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.45370060205459595, 0.2012118101119995, 0.1711978167295456, 0.1447930634021759, 0.029096689075231552]}
Decision: Deciding weight of TuningHint(doc_id=51, param=<re.Match object; span=(90, 106), match='table_open_cache'>, value=<re.Match object; span=(0, 4), match='4096'>, recommendation='4096', passage='query_cache_type=0\nquery_cache_size=0\n#query_cache_limit = 4M\ndefault_table_type = InnoDB\ntable_open_cache = 4096\nopen_files_limit = 8192\nmax_connections = 800 query_cache_limit ', float_val=4096.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.029096689075231552, 0.45370060205459595, 0.2012118101119995, 0.1711978167295456, 0.1447930634021759]
Choice: 4
Trying assigning table_open_cache to 1024
Adding assignment ('table_open_cache', '1024') with weight 16
Assignment ('table_open_cache', '1024') extracted from "query_cache_type=0
query_cache_size=0
#query_cache_limit = 4M
default_table_type = InnoDB
table_open_cache = 4096
open_files_limit = 8192
max_connections = 800 query_cache_limit "
Hint counter: 72
Episode hint counter before: 1
Episode hint counter: 2
Hints per episode: 5
Done flag: False
No warmup - hint counter: 72
{'sequence': '1000', 'labels': ['Use recommendation', 'Increase recommendation', 'Decrease recommendation', 'Increase recommendation strongly', 'Decrease recommendation strongly'], 'scores': [0.2824251055717468, 0.1909082680940628, 0.18482309579849243, 0.17559102177619934, 0.16625255346298218]}
Decision: Deciding adaption of TuningHint(doc_id=35, param=<re.Match object; span=(11242, 11256), match='max_input_vars'>, value=<re.Match object; span=(0, 4), match='1000'>, recommendation='1000', passage='Having a fast business website is essential for both Google ranking and overall conversion rate. Due to Kissmetrics, 40% of site visitors will abandon a page that takes three or more seconds to load. Earlier, the BBC calculated that they lost an additional 10% of users for every extra second their site took to load.\xa0In order to help our readers and customers in gaining higher speed results, we decided to publish a set of articles dedicated to the improvement of website performance using great hints from The Ultimate WordPress Speed Optimization Guide written by Johnny Nguyen.\xa0“Faster websites make more money, rank better, and improve overall user experience!” says Johnny.Today we will start with the web hosting optimization part. Each point will be marked with the level of required skills to implement and the impact it will bring.SKILL:BEGINNER – can Google and follow instructions.INTERMEDIATE – working as WordPress contractor.ADVANCED – programmer or server-admin.IMPACT:LOW – maybe 100-200ms difference. Possibly unnoticeable.MEDIUM – around 500ms difference.HIGH – 1 second difference or more.Your webhosting speed determines how fast it can process code, and how many visitors it can handle. Compare your website to a car. To make a car go faster, you either A) get a stronger engine and/or B) lighten the weight. For websites, the web-server is the “engine” and the code is the”weight”.The goal is to improve our web-server “engine” while decreasing code “weight”, ok?Changing your webhosting is one of the easiest ways to improve speed. Those of you on cheap $5/month shared webhosting will benefit the most from moving to a managed hosting service or even your own VPS. The difference will be night and day without any site changes. Moving from managed hosting to an optimized VPS or dedicated “bare metal” server will be another night-and-day jump.\xa0The difference isn’t only speed but also a matter of cost (savings). A fast server can handle more visitors than a slow one. If your server can handle double the traffic, theoretically the bill can be twice as cheap. Not a big deal for a small site but what about a huge ecommerce site with a $1k/month server bill? 50% cost reduction sounds mighty attractive!1. Choose nearby datacenter location (BEG, LOW-MED)Obviously, you should pick a server location that’s closest to your visitors. Ideally, you don’t want your DNS ping time more than 100ms from the server to your visitor’s computer. There are many implications depending on your needs.Local businesses should get a server as close to their visitors as possible. Keep it within 100ms or less, within 50ms is better. Check ping times with WonderNetwork.The USA is about 80ms from coast to coast. Canada and Mexico are close enough as well.All of Western Europe is only 40-50ms, very close.Asia is within 80ms between most countries.India/Pakistan, Australia/NZ, Africa are somewhat isolated. Local businesses there need a local datacenter. Even Singapore to Australia is borderline “far” by DNS standards (~150ms).South America can be unreliable infrastructure. For that reason, many companies in Central/South America still use US-based datacenters like in California, Texas, or Florida (Miami).If you have worldwide traffic (including Asia/Pacific) and no particular core region, I like USA west coast as perfect location for fast traffic to Europe and Asia.If you have only USA & Europe traffic and no particular core region, I like USA east coast for fast traffic to Europe.It’s also good to have a webhosting company on the same timezone as your core audience. That way they can (quickly) support or troubleshoot issues when most of your visitors are awake.Those of you thinking a CDN can make up for far server location (that’s not necessarily true!)Those of you hunting for dedicated nodes…the best is TIER-4 datacenter with four 9’s (99.9999% uptime guarantee). But good luck getting those guaranteed!Uptime calculator (99.9% uptime means 43min downtime per month)Nearest.host – cool site showing nearby server companies.2. Choose the right website hosting service (BEG, HIGH)Shared hosting ($5-30/month) – fine for small sites and low traffic up to 100k hits/month. No access to server configurations.VPS/cloud hosting ($30-300/month) – great for medium sites and traffic up to 30 million hits/month.Dedicated (bare metal) server ($200/month & up) – great for large sites with TONS of traffic.Buy the best that you can comfortably afford. A small website doesn’t need much power but it’s still noticeable when you get a better server and appreciated more than you think. Think of a new phone that opens apps just a fraction of a second quicker. You really can feel the difference and it improves user experience tremendously.Shared webhosting is usually slow because they stuff hundreds of customers/websites onto the same server (maximize profits). This increases slowdowns, unexpected crashes or server restarts, security attacks, and your email IP getting marked as spam.Shared hosting environments are also slow because they load many scripts/modules to maximize compatibility for as many users as possible. And without dedicated resources, your visitors end up waiting in line while the server is busy handling other websites first.VPS/Dedicated servers are faster because there’s more resources available per account and your resources are serving only your websites. You have more control over your environment, can configure it for your needs. VPS/dedicated can be costly or difficult to manage for regular users. There are cloud-panel services to help manage it and also fully-managed services where they take care of everything for you.Those unable to handle technical responsibilities of VPS can go for “premium shared hosting”. They don’t crowd the server as much but the performance (while better than regular shared hosting) will still be far behind a VPS.3. Choose a high performance web server (INT-ADV, HIGH)Use any web server software but Apache. The best is NGINX or LiteSpeed, or highly-optimized Apache (rare to find). The higher your traffic, the more noticeable the difference.NGINX shines at simple sites. Just set it and go. Not much settings to optimize. But once you have a complicated site, NGINX is a mixed bag. Some NGINX features aren’t easy to configure. If you have a server-admin to fine-tune, it’s great but many people don’t.LiteSpeed has more easy-accessible features than NGINX. Like when you need some things cached but not others, or dealing with server-level redirects via htaccess. LiteSpeed also has a WordPress cache plugin which NGINX doesn’t. That’s a HUGE advantage. (I personally prefer LiteSpeed.)OpenLiteSpeed is the free community version of LiteSpeed. It’s a great alternative for those wanting the free price of NGINX but the powerful LiteSpeed cache plugin.Some webhosts have the Apache+NGINX hybrid stack. I feel those are outdated now and makes for unnecessarily slower/heavier stack.If using Apache, MPM events are best (compared to worker or prefork).Keep your webserver updated. Later versions can speed up certain protocols and processes noticeably.4. Web server configuration (ADV, MED-HIGH)Most web servers come with safe/functional configurations right off the bat. Adequate for the average small site with little traffic. It’s when you get more traffic and more security attacks, or have more demanding apps that fine-tuning the configurations makes a big difference.Timeout – 30 to 60 seconds is a safe start. You can increase up to 600 or beyond if needed for long processes (import, export, backups). Keep in mind that allows poorly-coded processes or hack exploits to run out your server resources.# of child processes allowed – depends on the server environment. Default should be fine.Concurrent connections allowed – anywhere from 1-20k. Higher is not necessarily better!Keep alive – on, off, or LiteSpeed’s “smart keep-alive”. I think “on” is safer. If you have LiteSpeed, the smart keep-alive is awesome!Keep alive timeout – 3-5 seconds is a safe start. Increase if needed.How many threads, body/buffer size, workers, clients, etc….all that you can look up online. It depends on your server size and use scenario. Jump on forums and ask around or have a sys-admin configure for you. Keep in mind different admins have their own ways of configuring.The most important distinction for me is to decide whether this server should be set aggressive or conservative:AGGRESSIVE configuration – gives every site as much resources as possible. Good for low-tenant or dedicated servers.CONSERVATIVE configuration – gives every site as little resources as possible. Good for high-tenant or shared servers.5. Disable unused services (INT, HIGH)Many servers are automatically set up with all features running to make things easy for you. But they’re just like brand new computers with pre-installed software. Get rid of the ones you don’t use. Even if they don’t use much memory, they can still be bombarded by hackers and that eats resources.DNS – disable if you’re using external DNS service. (Cloudflare, DNSME, etc.)Email – disable if you’re using 3rd-party email. (G-Suite, MXroute, etc.)FTP/SFTP – disable if not using.Memcache/Redis – disable if you don’t use it.Other services – Varnish, Elastipress, etc.If you want to be OCD, scan your system for all listening ports and services.6. Remove unused server modules (ADV, LOW)Want to be even more OCD? Disable every single module not used by the server. Some of them are junk unused server stuff; others are unused Linux distro stuff. Old school Apache-compatible stacks or unoptimized control panels tend to have many unused modules enabled by default (while also not enabling ones you might need).Read documentation and check online before blindly removing or replacing them. The danger is you disable things you need (or worse, one that improves performance). You should make a list of disabled services/modules to reference later or give to a contractor when troubleshooting.7. Use the latest PHP version (INT-ADV, HIGH)The PHP version alone makes a HUGE difference.Use the latest PHP version possible! (Easily-configured from your webhosting control panel)For example, PHP 7.0 is 3 times faster than PHP 5.6.Even PHP 7.3 is 10% faster than PHP 7.2.At the time of this writing, PHP 7.4 is available.Be wary of any webhosts still using old PHP!Keeping your website PHP version updated is not only for speed but also security. The only issue is some themes or plugins may not be compatible with the latest PHP version. You’ll know because your site doesn’t work right, or looks weird. So test carefully and keep themes/plugins updated, which helps them stay compatible with the latest PHP.8. Recommended php.ini configurations (INT, MED)Most of you (on shared hosting) won’t even have access to these settings or know how to set them. But nonetheless, here are my recommendations.max_execution_time – lower (30-60 sec) is better to prevent resources hogs from lagging out the server. But you may need higher execution times for long processes like imports, exports, backups.max_input_time – lower (60 sec) is better. Increase only if you’re trying to import something that takes forever.max_input_vars – set to “1000”, unless some plugins need higher.memory_limit – try “256M” to be safe. Raise if you have heavy plugins. I like to set lower so I’m notified immediately when there are memory hogs. The “error_log” will tell you if you need more.zlib.output_compression – may or may not help. I leave it off.9. Use an updated MySQL fork version (INT-ADV, LOW)Most people only know of MySQL, which is now acquired/owned by Oracle. There’s also MariaDB (a fork of MySQL by its original creators) and Percona, and also others.MySQL 8 is much better than MySQL 5.7.But it’s better if you can use MariaDB over MySQL. Community-friendly and better performance than vanilla MySQL 5.7.Use the latest MariaDB version that you can.Whatever you do, just don’t use MySQL 5.7.What about Percona? What about the other 3rd-party MySQL-compatible forks? For most sites, it makes little difference if any. Don’t forget to backup your database before changing or upgrading MySQL.MySQL vs MariaDB vs Percona10. Convert MySQL tables from MyISAM to InnoDB (BEG, LOW)Make sure your tables are set to InnoDB instead of MyISAM.InnoDB is newer and regarded as being better overall (faster, safer).MyISAM can be faster in some scenarios (when mostly read-only).You can convert manually in phpMyAdmin or use a plugin (Servebolt Optimizer or LiteSpeed Cache). Can delete the plugin afterwards if you don’t need it.11. Tuning MySQL configurations (ADV, LOW)Usually not required (or noticeably-beneficial) for the average site but can help tremendously for large sites with high traffic and varying query lengths.You can run MySQLTuner for general recommendations or ask around the sys-admin community to see what everyone else uses.Buffer size, packet size, cache, connections, cache, stack, etc…are all among the general things to tune.Simple Linode guide.When trying out random configurations online or copying somebody else’s, please make sure their environment is similar to yours. The main distinctions are:server size, resources availablehow many clients/sites on serverhow many end users on serverhow much traffichow big are the siteswhat kind of read/write behaviorIt’s important to know whether their settings are for efficiency (high-tenant webhost) or aggressive performance (low-tenant webserver).12. Server full-page caching (ADV, HIGH)Full-page caching can help speed-up any website. But caching directly from the server is much more powerful and resource-efficient than PHP/application-level caching done through a plugin.Some Apache or NGINX servers use Varnish – ugghhh, outdated. Don’t use Varnish proxy. Just upgrade to pure-LiteSpeed or pure-NGINX stack.LiteSpeed servers can use LiteSpeed cache – powerful, many features, and comes with a handy WordPress cache plugin (called “LiteSpeed Cache”).NGINX servers can use FastCGI – great, super fast! While there’s no official NGINX cache plugin for WordPress, there are various “NGINX helper” plugins to facilitate basic cache functions (like purging).To be safe, you should disable caching on pages with forms, carts, or checkouts. Private pages (for logged-in users) CAN be cached but don’t mess with that unless you have that much private traffic and ready to spend hours configuring private cache.You can only enable server-level caching if you own or have access to the server. Otherwise, your webhost decides what caching options you have.Shared hosting usually allows all caching plugins.Managed hosting usually limits you to only their proprietary one.13. Memory object-caching (ADV, LOW-HIGH)Object-caching caches only the database queries instead of the entire page html. This technically makes it “slower” than full-page caching (since you’re not caching the entire page) but useful for speeding up dynamic pages or private pages (logged-in users, admin backend) that can’t be static-cached.Any site with lots of constantly-refreshed data on frontend, or lots of numbers and reports on backend…would stand to benefit from object caching. Mostly-static sites or low-traffic sites would not benefit from object-caching at all; don’t use it on them…it can make them slower!Redis is the gold standard in object caching now. It’s superior to the older memcache in almost every way.Memcache is only used in rare situations where Redis doesn’t work or is slower.If your data doesn’t change much, you can set longer object caching times (e.g. 60 mins and up). Longer times means fewer database queries.Otherwise, stick with the default 5-10 mins to be safe…unless you don’t mind users seeing stale data.Object caching can be managed by WordPress plugins. Most ideal if you have one cache plugin to manage both full-page caching and object caching.You can get ~25% faster object caching by using a Unix SocketUNIX sockets are run from a lower-level layer on the OSI networking model and therefore faster than standard TCP sockets.Redis and Memcache UNIX socket configuration guides for CentOS.Redis and Memcache UNIX socket configuration guides for Ubuntu.Note: with UNIX socket enabled, only one server user account (and presumably all sites by that user) can use object caching. So you can’t use this if you plan to have multiple server users deploying object cache.Some background on memory-caching…Memory-caching is the gold standard in caching, because cache runs faster from memory than than from disk. The issue is we have limited amounts of memory (most of it already used for applications) so we can’t store the entire site cache in there. It matters less nowadays anyway since server disks are so much faster now (thanks to SSD technology).Sure memory is more abundant now too but then again, applications are bigger. You may have heard of others loading their entire site into memory…some using the cache route, others by mounting their WordPress directory into memory. It works great if your site is small enough but for most people: your memory is only big enough to store database queries, anything else you want to cache will be stored on your disk.14. Use the latest HTTP protocol (BEG, HIGH)HTTP/2 loads browser requests so much faster than HTTP/1 (thanks to parallelization). It feels like 3 times faster to me.You should be using HTTP/2 or even HTTP/3 (recently released).Avoid older web servers still on the archaic HTTP/1.Check your site for HTTP/2 and HTTP/3.Using HTTP/2 requires HTTPS/SSL. If your site isn’t in HTTPS, do it now!15. Content encoding (INT, HIGH)GZIP is so 2016. Every web-server should have BROTLI compression nowadays. It’s superior to GZIP (produces smaller files AND in less time). But shockingly, BROTLI still isn’t available on all web-servers.If using BROTLI – set static compression to 4.If using GZIP – set dynamic compression to 1, static compression to 6.You can push static compression levels higher if your CPU is strong (or low-usage server) and/or your static content is cached for a long time (long expiry times). If you’re using a CDN or Cloudflare, make sure you enable BROTLI compression there as well.16. Control-panel (INT, HIGH)This issue matters only for VPS users. Control panels used to be critiqued for the initial weight they put on the server. That’s because control panels were originally designed for large dedicated servers, but have since been optimized for smaller VPS. While it’s true that having no control panel is lighter than having one, it makes day-to-day tasks harder. Their footprint is now negligible considering how useful panels can be.The best performing control panel is one that fits your needs.Allows you to pick the web server of your choice – NGINX or LiteSpeed.Easily configure redirects at server level – instead of slower PHP-level redirection plugin.Easily configure granular caching rules – choosing what and what not to cache.Easy to manage – for you or your sys-admin.Can cage users – preventing resource-hogs on high-tenant servers.Secure against hacks – as hacking attempts eat many resources.Easy to use – for you or your clients.17. Use external DNS service (INT, LOW)Lower DNS latency (small benefit)Easy to update DNS (convenience)Will using an external DNS like Cloudflare or DNS Made Easy make a world of difference in terms of webhosting speed? I think it improves lookup time but not so noticeable unless your previous DNS server was a piece of junk by cheap webhost.The main benefit for me is how quickly I can redirect things. Suppose you get hacked and need to redirect through a security proxy. Or maybe you’re switching certain aspects of your site to another server. In moments like this, having a DNS service is so convenient. You can switch things over with very little downtime, and even switch them back quickly if there’s an issue.DNS services may seem like an extra hassle to setup, but once in place they allow you to integrate new services and mitigate performance issues so much faster.18. Run WP-cron from your server (BEG, MED)Many WordPress tasks need a trigger to function. Such as sending out system emails, run backups, release scheduled posts. By default, WordPress uses a function called WP-Cron (conveniently located at yourdomain.com/wp-cron.php). It works by checking (and executing) for any pending tasks any time someone visits the website. It’s great for small sites, but terrible if you have tons of traffic (triggering many unnecessary cron-checks). Also an obvious DDOS vulnerability.The sensible thing is to disable WP-cron and use a real cron job whether from your server or an external cron service. Some cron jobs visit the website directly. Others go through the Linux directory. Use whichever one works. I think a 5-minute interval is good.19. Caging users & resource limits (ADV, MED-HIGH)Do you have many sites or clients on the same machine? Are you unable to police them all effectively? If you’re losing control of your tenants, it’s probably time to limit their resources. I’ll start you off with a few tactics below. You look up the rest.Cloudlinux & CageFS – limit CPU and memory usageServer-wide bans on cache-prebuilding, broken-link checkers, and other resource hogs.Decrease php execution time.Global configs blocking the usual offenders, bots, etc.Worst-case scenario, just split off some clients onto another server. Split them up by size, space usage, traffic amount, whatever you want.19. Caging users & resource limits (ADV, MED-HIGH)Do you have many sites or clients on the same machine? Are you unable to police them all effectively? If you’re losing control of your tenants, it’s probably time to limit their resources. I’ll start you off with a few tactics below. You look up the rest.Cloudlinux & CageFS – limit CPU and memory usageServer-wide bans on cache-prebuilding, broken-link checkers, and other resource hogs.Decrease php execution time.Global configs blocking the usual offenders, bots, etc.Worst-case scenario, just split off some clients onto another server. Split them up by size, space usage, traffic amount, whatever you want.20. Tracking down resource hogs (ADV, MED-HIGH)We often run into slow server issues with no obvious clue of where to look. Today, it’s this client. Tomorrow, it’s that client. It seems any site can be the culprit on any given day. When you have so many clients, and none of them can afford switching plugins on and off, it is really really difficult to track down the problem.Here are some ideas:Check server logs – are you being hacked? Are there excessive requests?Check server monitors – which users are hogging the CPU, memory, and bandwidth?Once you know which site it is…check WordPress error log. Run Query Monitor.Of course, it might not even happen all the time. You have to track down what users or processes were doing when the slowdown happened.Sometimes you’ll need more of a developer mentality. What plugin was updated last? Any new themes or plugins that were custom-coded? (Check for memory-exhaustive commands.) Yes, you can use applications monitors like New Relic but for me, it’s overkill. The trickiest problems are when it seems like every site is the problem. Or also when the server load is low but the sites are still slow. Good luck!In the next part of this blog series we’ll cover caching optimization for your websites, so stay tuned. For a full version of the article go to The Ultimate WordPress Speed Optimization Guide.Need an optimized WordPress hosting that meets the needs of your project? Get in touch with Jelastic for choosing the best option and receiving technical assistance while migration.Related ArticlesEnterprise WordPress Hosting: Automatic Scaling and High AvailabilityWordPress Hosting in Elastic Standalone ContainerHow to Migrate a WordPress Site to Jelastic PaaSSetup WordPress Multisite Network with Domain Mapping and CDNWebinar Summary: WordPress Cluster for Enterprise High Availability and On-Demand ScalingSubscribe to get the latest updates\nGET STARTED FOR FREE\nE-mail\nSearch\nCategoriesDevelopmentHosting BusinessMulti-CloudWordPressDatabasesJavaContainersKubernetesUse CasesNews and ReleasesSolution innodb_page_cleaners ', float_val=1000.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.16625255346298218, 0.18482309579849243, 0.2824251055717468, 0.1909082680940628, 0.17559102177619934]
Choice: 0
type: 3, value: 1000.0, unit: 
Done flag: False
No warmup - hint counter: 72
{'sequence': '1000', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.43016517162323, 0.2093134969472885, 0.17483586072921753, 0.16804374754428864, 0.017641693353652954]}
Decision: Deciding weight of TuningHint(doc_id=35, param=<re.Match object; span=(11242, 11256), match='max_input_vars'>, value=<re.Match object; span=(0, 4), match='1000'>, recommendation='1000', passage='Having a fast business website is essential for both Google ranking and overall conversion rate. Due to Kissmetrics, 40% of site visitors will abandon a page that takes three or more seconds to load. Earlier, the BBC calculated that they lost an additional 10% of users for every extra second their site took to load.\xa0In order to help our readers and customers in gaining higher speed results, we decided to publish a set of articles dedicated to the improvement of website performance using great hints from The Ultimate WordPress Speed Optimization Guide written by Johnny Nguyen.\xa0“Faster websites make more money, rank better, and improve overall user experience!” says Johnny.Today we will start with the web hosting optimization part. Each point will be marked with the level of required skills to implement and the impact it will bring.SKILL:BEGINNER – can Google and follow instructions.INTERMEDIATE – working as WordPress contractor.ADVANCED – programmer or server-admin.IMPACT:LOW – maybe 100-200ms difference. Possibly unnoticeable.MEDIUM – around 500ms difference.HIGH – 1 second difference or more.Your webhosting speed determines how fast it can process code, and how many visitors it can handle. Compare your website to a car. To make a car go faster, you either A) get a stronger engine and/or B) lighten the weight. For websites, the web-server is the “engine” and the code is the”weight”.The goal is to improve our web-server “engine” while decreasing code “weight”, ok?Changing your webhosting is one of the easiest ways to improve speed. Those of you on cheap $5/month shared webhosting will benefit the most from moving to a managed hosting service or even your own VPS. The difference will be night and day without any site changes. Moving from managed hosting to an optimized VPS or dedicated “bare metal” server will be another night-and-day jump.\xa0The difference isn’t only speed but also a matter of cost (savings). A fast server can handle more visitors than a slow one. If your server can handle double the traffic, theoretically the bill can be twice as cheap. Not a big deal for a small site but what about a huge ecommerce site with a $1k/month server bill? 50% cost reduction sounds mighty attractive!1. Choose nearby datacenter location (BEG, LOW-MED)Obviously, you should pick a server location that’s closest to your visitors. Ideally, you don’t want your DNS ping time more than 100ms from the server to your visitor’s computer. There are many implications depending on your needs.Local businesses should get a server as close to their visitors as possible. Keep it within 100ms or less, within 50ms is better. Check ping times with WonderNetwork.The USA is about 80ms from coast to coast. Canada and Mexico are close enough as well.All of Western Europe is only 40-50ms, very close.Asia is within 80ms between most countries.India/Pakistan, Australia/NZ, Africa are somewhat isolated. Local businesses there need a local datacenter. Even Singapore to Australia is borderline “far” by DNS standards (~150ms).South America can be unreliable infrastructure. For that reason, many companies in Central/South America still use US-based datacenters like in California, Texas, or Florida (Miami).If you have worldwide traffic (including Asia/Pacific) and no particular core region, I like USA west coast as perfect location for fast traffic to Europe and Asia.If you have only USA & Europe traffic and no particular core region, I like USA east coast for fast traffic to Europe.It’s also good to have a webhosting company on the same timezone as your core audience. That way they can (quickly) support or troubleshoot issues when most of your visitors are awake.Those of you thinking a CDN can make up for far server location (that’s not necessarily true!)Those of you hunting for dedicated nodes…the best is TIER-4 datacenter with four 9’s (99.9999% uptime guarantee). But good luck getting those guaranteed!Uptime calculator (99.9% uptime means 43min downtime per month)Nearest.host – cool site showing nearby server companies.2. Choose the right website hosting service (BEG, HIGH)Shared hosting ($5-30/month) – fine for small sites and low traffic up to 100k hits/month. No access to server configurations.VPS/cloud hosting ($30-300/month) – great for medium sites and traffic up to 30 million hits/month.Dedicated (bare metal) server ($200/month & up) – great for large sites with TONS of traffic.Buy the best that you can comfortably afford. A small website doesn’t need much power but it’s still noticeable when you get a better server and appreciated more than you think. Think of a new phone that opens apps just a fraction of a second quicker. You really can feel the difference and it improves user experience tremendously.Shared webhosting is usually slow because they stuff hundreds of customers/websites onto the same server (maximize profits). This increases slowdowns, unexpected crashes or server restarts, security attacks, and your email IP getting marked as spam.Shared hosting environments are also slow because they load many scripts/modules to maximize compatibility for as many users as possible. And without dedicated resources, your visitors end up waiting in line while the server is busy handling other websites first.VPS/Dedicated servers are faster because there’s more resources available per account and your resources are serving only your websites. You have more control over your environment, can configure it for your needs. VPS/dedicated can be costly or difficult to manage for regular users. There are cloud-panel services to help manage it and also fully-managed services where they take care of everything for you.Those unable to handle technical responsibilities of VPS can go for “premium shared hosting”. They don’t crowd the server as much but the performance (while better than regular shared hosting) will still be far behind a VPS.3. Choose a high performance web server (INT-ADV, HIGH)Use any web server software but Apache. The best is NGINX or LiteSpeed, or highly-optimized Apache (rare to find). The higher your traffic, the more noticeable the difference.NGINX shines at simple sites. Just set it and go. Not much settings to optimize. But once you have a complicated site, NGINX is a mixed bag. Some NGINX features aren’t easy to configure. If you have a server-admin to fine-tune, it’s great but many people don’t.LiteSpeed has more easy-accessible features than NGINX. Like when you need some things cached but not others, or dealing with server-level redirects via htaccess. LiteSpeed also has a WordPress cache plugin which NGINX doesn’t. That’s a HUGE advantage. (I personally prefer LiteSpeed.)OpenLiteSpeed is the free community version of LiteSpeed. It’s a great alternative for those wanting the free price of NGINX but the powerful LiteSpeed cache plugin.Some webhosts have the Apache+NGINX hybrid stack. I feel those are outdated now and makes for unnecessarily slower/heavier stack.If using Apache, MPM events are best (compared to worker or prefork).Keep your webserver updated. Later versions can speed up certain protocols and processes noticeably.4. Web server configuration (ADV, MED-HIGH)Most web servers come with safe/functional configurations right off the bat. Adequate for the average small site with little traffic. It’s when you get more traffic and more security attacks, or have more demanding apps that fine-tuning the configurations makes a big difference.Timeout – 30 to 60 seconds is a safe start. You can increase up to 600 or beyond if needed for long processes (import, export, backups). Keep in mind that allows poorly-coded processes or hack exploits to run out your server resources.# of child processes allowed – depends on the server environment. Default should be fine.Concurrent connections allowed – anywhere from 1-20k. Higher is not necessarily better!Keep alive – on, off, or LiteSpeed’s “smart keep-alive”. I think “on” is safer. If you have LiteSpeed, the smart keep-alive is awesome!Keep alive timeout – 3-5 seconds is a safe start. Increase if needed.How many threads, body/buffer size, workers, clients, etc….all that you can look up online. It depends on your server size and use scenario. Jump on forums and ask around or have a sys-admin configure for you. Keep in mind different admins have their own ways of configuring.The most important distinction for me is to decide whether this server should be set aggressive or conservative:AGGRESSIVE configuration – gives every site as much resources as possible. Good for low-tenant or dedicated servers.CONSERVATIVE configuration – gives every site as little resources as possible. Good for high-tenant or shared servers.5. Disable unused services (INT, HIGH)Many servers are automatically set up with all features running to make things easy for you. But they’re just like brand new computers with pre-installed software. Get rid of the ones you don’t use. Even if they don’t use much memory, they can still be bombarded by hackers and that eats resources.DNS – disable if you’re using external DNS service. (Cloudflare, DNSME, etc.)Email – disable if you’re using 3rd-party email. (G-Suite, MXroute, etc.)FTP/SFTP – disable if not using.Memcache/Redis – disable if you don’t use it.Other services – Varnish, Elastipress, etc.If you want to be OCD, scan your system for all listening ports and services.6. Remove unused server modules (ADV, LOW)Want to be even more OCD? Disable every single module not used by the server. Some of them are junk unused server stuff; others are unused Linux distro stuff. Old school Apache-compatible stacks or unoptimized control panels tend to have many unused modules enabled by default (while also not enabling ones you might need).Read documentation and check online before blindly removing or replacing them. The danger is you disable things you need (or worse, one that improves performance). You should make a list of disabled services/modules to reference later or give to a contractor when troubleshooting.7. Use the latest PHP version (INT-ADV, HIGH)The PHP version alone makes a HUGE difference.Use the latest PHP version possible! (Easily-configured from your webhosting control panel)For example, PHP 7.0 is 3 times faster than PHP 5.6.Even PHP 7.3 is 10% faster than PHP 7.2.At the time of this writing, PHP 7.4 is available.Be wary of any webhosts still using old PHP!Keeping your website PHP version updated is not only for speed but also security. The only issue is some themes or plugins may not be compatible with the latest PHP version. You’ll know because your site doesn’t work right, or looks weird. So test carefully and keep themes/plugins updated, which helps them stay compatible with the latest PHP.8. Recommended php.ini configurations (INT, MED)Most of you (on shared hosting) won’t even have access to these settings or know how to set them. But nonetheless, here are my recommendations.max_execution_time – lower (30-60 sec) is better to prevent resources hogs from lagging out the server. But you may need higher execution times for long processes like imports, exports, backups.max_input_time – lower (60 sec) is better. Increase only if you’re trying to import something that takes forever.max_input_vars – set to “1000”, unless some plugins need higher.memory_limit – try “256M” to be safe. Raise if you have heavy plugins. I like to set lower so I’m notified immediately when there are memory hogs. The “error_log” will tell you if you need more.zlib.output_compression – may or may not help. I leave it off.9. Use an updated MySQL fork version (INT-ADV, LOW)Most people only know of MySQL, which is now acquired/owned by Oracle. There’s also MariaDB (a fork of MySQL by its original creators) and Percona, and also others.MySQL 8 is much better than MySQL 5.7.But it’s better if you can use MariaDB over MySQL. Community-friendly and better performance than vanilla MySQL 5.7.Use the latest MariaDB version that you can.Whatever you do, just don’t use MySQL 5.7.What about Percona? What about the other 3rd-party MySQL-compatible forks? For most sites, it makes little difference if any. Don’t forget to backup your database before changing or upgrading MySQL.MySQL vs MariaDB vs Percona10. Convert MySQL tables from MyISAM to InnoDB (BEG, LOW)Make sure your tables are set to InnoDB instead of MyISAM.InnoDB is newer and regarded as being better overall (faster, safer).MyISAM can be faster in some scenarios (when mostly read-only).You can convert manually in phpMyAdmin or use a plugin (Servebolt Optimizer or LiteSpeed Cache). Can delete the plugin afterwards if you don’t need it.11. Tuning MySQL configurations (ADV, LOW)Usually not required (or noticeably-beneficial) for the average site but can help tremendously for large sites with high traffic and varying query lengths.You can run MySQLTuner for general recommendations or ask around the sys-admin community to see what everyone else uses.Buffer size, packet size, cache, connections, cache, stack, etc…are all among the general things to tune.Simple Linode guide.When trying out random configurations online or copying somebody else’s, please make sure their environment is similar to yours. The main distinctions are:server size, resources availablehow many clients/sites on serverhow many end users on serverhow much traffichow big are the siteswhat kind of read/write behaviorIt’s important to know whether their settings are for efficiency (high-tenant webhost) or aggressive performance (low-tenant webserver).12. Server full-page caching (ADV, HIGH)Full-page caching can help speed-up any website. But caching directly from the server is much more powerful and resource-efficient than PHP/application-level caching done through a plugin.Some Apache or NGINX servers use Varnish – ugghhh, outdated. Don’t use Varnish proxy. Just upgrade to pure-LiteSpeed or pure-NGINX stack.LiteSpeed servers can use LiteSpeed cache – powerful, many features, and comes with a handy WordPress cache plugin (called “LiteSpeed Cache”).NGINX servers can use FastCGI – great, super fast! While there’s no official NGINX cache plugin for WordPress, there are various “NGINX helper” plugins to facilitate basic cache functions (like purging).To be safe, you should disable caching on pages with forms, carts, or checkouts. Private pages (for logged-in users) CAN be cached but don’t mess with that unless you have that much private traffic and ready to spend hours configuring private cache.You can only enable server-level caching if you own or have access to the server. Otherwise, your webhost decides what caching options you have.Shared hosting usually allows all caching plugins.Managed hosting usually limits you to only their proprietary one.13. Memory object-caching (ADV, LOW-HIGH)Object-caching caches only the database queries instead of the entire page html. This technically makes it “slower” than full-page caching (since you’re not caching the entire page) but useful for speeding up dynamic pages or private pages (logged-in users, admin backend) that can’t be static-cached.Any site with lots of constantly-refreshed data on frontend, or lots of numbers and reports on backend…would stand to benefit from object caching. Mostly-static sites or low-traffic sites would not benefit from object-caching at all; don’t use it on them…it can make them slower!Redis is the gold standard in object caching now. It’s superior to the older memcache in almost every way.Memcache is only used in rare situations where Redis doesn’t work or is slower.If your data doesn’t change much, you can set longer object caching times (e.g. 60 mins and up). Longer times means fewer database queries.Otherwise, stick with the default 5-10 mins to be safe…unless you don’t mind users seeing stale data.Object caching can be managed by WordPress plugins. Most ideal if you have one cache plugin to manage both full-page caching and object caching.You can get ~25% faster object caching by using a Unix SocketUNIX sockets are run from a lower-level layer on the OSI networking model and therefore faster than standard TCP sockets.Redis and Memcache UNIX socket configuration guides for CentOS.Redis and Memcache UNIX socket configuration guides for Ubuntu.Note: with UNIX socket enabled, only one server user account (and presumably all sites by that user) can use object caching. So you can’t use this if you plan to have multiple server users deploying object cache.Some background on memory-caching…Memory-caching is the gold standard in caching, because cache runs faster from memory than than from disk. The issue is we have limited amounts of memory (most of it already used for applications) so we can’t store the entire site cache in there. It matters less nowadays anyway since server disks are so much faster now (thanks to SSD technology).Sure memory is more abundant now too but then again, applications are bigger. You may have heard of others loading their entire site into memory…some using the cache route, others by mounting their WordPress directory into memory. It works great if your site is small enough but for most people: your memory is only big enough to store database queries, anything else you want to cache will be stored on your disk.14. Use the latest HTTP protocol (BEG, HIGH)HTTP/2 loads browser requests so much faster than HTTP/1 (thanks to parallelization). It feels like 3 times faster to me.You should be using HTTP/2 or even HTTP/3 (recently released).Avoid older web servers still on the archaic HTTP/1.Check your site for HTTP/2 and HTTP/3.Using HTTP/2 requires HTTPS/SSL. If your site isn’t in HTTPS, do it now!15. Content encoding (INT, HIGH)GZIP is so 2016. Every web-server should have BROTLI compression nowadays. It’s superior to GZIP (produces smaller files AND in less time). But shockingly, BROTLI still isn’t available on all web-servers.If using BROTLI – set static compression to 4.If using GZIP – set dynamic compression to 1, static compression to 6.You can push static compression levels higher if your CPU is strong (or low-usage server) and/or your static content is cached for a long time (long expiry times). If you’re using a CDN or Cloudflare, make sure you enable BROTLI compression there as well.16. Control-panel (INT, HIGH)This issue matters only for VPS users. Control panels used to be critiqued for the initial weight they put on the server. That’s because control panels were originally designed for large dedicated servers, but have since been optimized for smaller VPS. While it’s true that having no control panel is lighter than having one, it makes day-to-day tasks harder. Their footprint is now negligible considering how useful panels can be.The best performing control panel is one that fits your needs.Allows you to pick the web server of your choice – NGINX or LiteSpeed.Easily configure redirects at server level – instead of slower PHP-level redirection plugin.Easily configure granular caching rules – choosing what and what not to cache.Easy to manage – for you or your sys-admin.Can cage users – preventing resource-hogs on high-tenant servers.Secure against hacks – as hacking attempts eat many resources.Easy to use – for you or your clients.17. Use external DNS service (INT, LOW)Lower DNS latency (small benefit)Easy to update DNS (convenience)Will using an external DNS like Cloudflare or DNS Made Easy make a world of difference in terms of webhosting speed? I think it improves lookup time but not so noticeable unless your previous DNS server was a piece of junk by cheap webhost.The main benefit for me is how quickly I can redirect things. Suppose you get hacked and need to redirect through a security proxy. Or maybe you’re switching certain aspects of your site to another server. In moments like this, having a DNS service is so convenient. You can switch things over with very little downtime, and even switch them back quickly if there’s an issue.DNS services may seem like an extra hassle to setup, but once in place they allow you to integrate new services and mitigate performance issues so much faster.18. Run WP-cron from your server (BEG, MED)Many WordPress tasks need a trigger to function. Such as sending out system emails, run backups, release scheduled posts. By default, WordPress uses a function called WP-Cron (conveniently located at yourdomain.com/wp-cron.php). It works by checking (and executing) for any pending tasks any time someone visits the website. It’s great for small sites, but terrible if you have tons of traffic (triggering many unnecessary cron-checks). Also an obvious DDOS vulnerability.The sensible thing is to disable WP-cron and use a real cron job whether from your server or an external cron service. Some cron jobs visit the website directly. Others go through the Linux directory. Use whichever one works. I think a 5-minute interval is good.19. Caging users & resource limits (ADV, MED-HIGH)Do you have many sites or clients on the same machine? Are you unable to police them all effectively? If you’re losing control of your tenants, it’s probably time to limit their resources. I’ll start you off with a few tactics below. You look up the rest.Cloudlinux & CageFS – limit CPU and memory usageServer-wide bans on cache-prebuilding, broken-link checkers, and other resource hogs.Decrease php execution time.Global configs blocking the usual offenders, bots, etc.Worst-case scenario, just split off some clients onto another server. Split them up by size, space usage, traffic amount, whatever you want.19. Caging users & resource limits (ADV, MED-HIGH)Do you have many sites or clients on the same machine? Are you unable to police them all effectively? If you’re losing control of your tenants, it’s probably time to limit their resources. I’ll start you off with a few tactics below. You look up the rest.Cloudlinux & CageFS – limit CPU and memory usageServer-wide bans on cache-prebuilding, broken-link checkers, and other resource hogs.Decrease php execution time.Global configs blocking the usual offenders, bots, etc.Worst-case scenario, just split off some clients onto another server. Split them up by size, space usage, traffic amount, whatever you want.20. Tracking down resource hogs (ADV, MED-HIGH)We often run into slow server issues with no obvious clue of where to look. Today, it’s this client. Tomorrow, it’s that client. It seems any site can be the culprit on any given day. When you have so many clients, and none of them can afford switching plugins on and off, it is really really difficult to track down the problem.Here are some ideas:Check server logs – are you being hacked? Are there excessive requests?Check server monitors – which users are hogging the CPU, memory, and bandwidth?Once you know which site it is…check WordPress error log. Run Query Monitor.Of course, it might not even happen all the time. You have to track down what users or processes were doing when the slowdown happened.Sometimes you’ll need more of a developer mentality. What plugin was updated last? Any new themes or plugins that were custom-coded? (Check for memory-exhaustive commands.) Yes, you can use applications monitors like New Relic but for me, it’s overkill. The trickiest problems are when it seems like every site is the problem. Or also when the server load is low but the sites are still slow. Good luck!In the next part of this blog series we’ll cover caching optimization for your websites, so stay tuned. For a full version of the article go to The Ultimate WordPress Speed Optimization Guide.Need an optimized WordPress hosting that meets the needs of your project? Get in touch with Jelastic for choosing the best option and receiving technical assistance while migration.Related ArticlesEnterprise WordPress Hosting: Automatic Scaling and High AvailabilityWordPress Hosting in Elastic Standalone ContainerHow to Migrate a WordPress Site to Jelastic PaaSSetup WordPress Multisite Network with Domain Mapping and CDNWebinar Summary: WordPress Cluster for Enterprise High Availability and On-Demand ScalingSubscribe to get the latest updates\nGET STARTED FOR FREE\nE-mail\nSearch\nCategoriesDevelopmentHosting BusinessMulti-CloudWordPressDatabasesJavaContainersKubernetesUse CasesNews and ReleasesSolution innodb_page_cleaners ', float_val=1000.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.017641693353652954, 0.43016517162323, 0.2093134969472885, 0.17483586072921753, 0.16804374754428864]
--- Tuning Updates ---
Minimal time (ms): 0.009358575514691214
Achieved with configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Decision: Deciding adaption of TuningHint(doc_id=35, param=<re.Match object; span=(11242, 11256), match='max_input_vars'>, value=<re.Match object; span=(0, 4), match='1000'>, recommendation='1000', passage='Having a fast business website is essential for both Google ranking and overall conversion rate. Due to Kissmetrics, 40% of site visitors will abandon a page that takes three or more seconds to load. Earlier, the BBC calculated that they lost an additional 10% of users for every extra second their site took to load.\xa0In order to help our readers and customers in gaining higher speed results, we decided to publish a set of articles dedicated to the improvement of website performance using great hints from The Ultimate WordPress Speed Optimization Guide written by Johnny Nguyen.\xa0“Faster websites make more money, rank better, and improve overall user experience!” says Johnny.Today we will start with the web hosting optimization part. Each point will be marked with the level of required skills to implement and the impact it will bring.SKILL:BEGINNER – can Google and follow instructions.INTERMEDIATE – working as WordPress contractor.ADVANCED – programmer or server-admin.IMPACT:LOW – maybe 100-200ms difference. Possibly unnoticeable.MEDIUM – around 500ms difference.HIGH – 1 second difference or more.Your webhosting speed determines how fast it can process code, and how many visitors it can handle. Compare your website to a car. To make a car go faster, you either A) get a stronger engine and/or B) lighten the weight. For websites, the web-server is the “engine” and the code is the”weight”.The goal is to improve our web-server “engine” while decreasing code “weight”, ok?Changing your webhosting is one of the easiest ways to improve speed. Those of you on cheap $5/month shared webhosting will benefit the most from moving to a managed hosting service or even your own VPS. The difference will be night and day without any site changes. Moving from managed hosting to an optimized VPS or dedicated “bare metal” server will be another night-and-day jump.\xa0The difference isn’t only speed but also a matter of cost (savings). A fast server can handle more visitors than a slow one. If your server can handle double the traffic, theoretically the bill can be twice as cheap. Not a big deal for a small site but what about a huge ecommerce site with a $1k/month server bill? 50% cost reduction sounds mighty attractive!1. Choose nearby datacenter location (BEG, LOW-MED)Obviously, you should pick a server location that’s closest to your visitors. Ideally, you don’t want your DNS ping time more than 100ms from the server to your visitor’s computer. There are many implications depending on your needs.Local businesses should get a server as close to their visitors as possible. Keep it within 100ms or less, within 50ms is better. Check ping times with WonderNetwork.The USA is about 80ms from coast to coast. Canada and Mexico are close enough as well.All of Western Europe is only 40-50ms, very close.Asia is within 80ms between most countries.India/Pakistan, Australia/NZ, Africa are somewhat isolated. Local businesses there need a local datacenter. Even Singapore to Australia is borderline “far” by DNS standards (~150ms).South America can be unreliable infrastructure. For that reason, many companies in Central/South America still use US-based datacenters like in California, Texas, or Florida (Miami).If you have worldwide traffic (including Asia/Pacific) and no particular core region, I like USA west coast as perfect location for fast traffic to Europe and Asia.If you have only USA & Europe traffic and no particular core region, I like USA east coast for fast traffic to Europe.It’s also good to have a webhosting company on the same timezone as your core audience. That way they can (quickly) support or troubleshoot issues when most of your visitors are awake.Those of you thinking a CDN can make up for far server location (that’s not necessarily true!)Those of you hunting for dedicated nodes…the best is TIER-4 datacenter with four 9’s (99.9999% uptime guarantee). But good luck getting those guaranteed!Uptime calculator (99.9% uptime means 43min downtime per month)Nearest.host – cool site showing nearby server companies.2. Choose the right website hosting service (BEG, HIGH)Shared hosting ($5-30/month) – fine for small sites and low traffic up to 100k hits/month. No access to server configurations.VPS/cloud hosting ($30-300/month) – great for medium sites and traffic up to 30 million hits/month.Dedicated (bare metal) server ($200/month & up) – great for large sites with TONS of traffic.Buy the best that you can comfortably afford. A small website doesn’t need much power but it’s still noticeable when you get a better server and appreciated more than you think. Think of a new phone that opens apps just a fraction of a second quicker. You really can feel the difference and it improves user experience tremendously.Shared webhosting is usually slow because they stuff hundreds of customers/websites onto the same server (maximize profits). This increases slowdowns, unexpected crashes or server restarts, security attacks, and your email IP getting marked as spam.Shared hosting environments are also slow because they load many scripts/modules to maximize compatibility for as many users as possible. And without dedicated resources, your visitors end up waiting in line while the server is busy handling other websites first.VPS/Dedicated servers are faster because there’s more resources available per account and your resources are serving only your websites. You have more control over your environment, can configure it for your needs. VPS/dedicated can be costly or difficult to manage for regular users. There are cloud-panel services to help manage it and also fully-managed services where they take care of everything for you.Those unable to handle technical responsibilities of VPS can go for “premium shared hosting”. They don’t crowd the server as much but the performance (while better than regular shared hosting) will still be far behind a VPS.3. Choose a high performance web server (INT-ADV, HIGH)Use any web server software but Apache. The best is NGINX or LiteSpeed, or highly-optimized Apache (rare to find). The higher your traffic, the more noticeable the difference.NGINX shines at simple sites. Just set it and go. Not much settings to optimize. But once you have a complicated site, NGINX is a mixed bag. Some NGINX features aren’t easy to configure. If you have a server-admin to fine-tune, it’s great but many people don’t.LiteSpeed has more easy-accessible features than NGINX. Like when you need some things cached but not others, or dealing with server-level redirects via htaccess. LiteSpeed also has a WordPress cache plugin which NGINX doesn’t. That’s a HUGE advantage. (I personally prefer LiteSpeed.)OpenLiteSpeed is the free community version of LiteSpeed. It’s a great alternative for those wanting the free price of NGINX but the powerful LiteSpeed cache plugin.Some webhosts have the Apache+NGINX hybrid stack. I feel those are outdated now and makes for unnecessarily slower/heavier stack.If using Apache, MPM events are best (compared to worker or prefork).Keep your webserver updated. Later versions can speed up certain protocols and processes noticeably.4. Web server configuration (ADV, MED-HIGH)Most web servers come with safe/functional configurations right off the bat. Adequate for the average small site with little traffic. It’s when you get more traffic and more security attacks, or have more demanding apps that fine-tuning the configurations makes a big difference.Timeout – 30 to 60 seconds is a safe start. You can increase up to 600 or beyond if needed for long processes (import, export, backups). Keep in mind that allows poorly-coded processes or hack exploits to run out your server resources.# of child processes allowed – depends on the server environment. Default should be fine.Concurrent connections allowed – anywhere from 1-20k. Higher is not necessarily better!Keep alive – on, off, or LiteSpeed’s “smart keep-alive”. I think “on” is safer. If you have LiteSpeed, the smart keep-alive is awesome!Keep alive timeout – 3-5 seconds is a safe start. Increase if needed.How many threads, body/buffer size, workers, clients, etc….all that you can look up online. It depends on your server size and use scenario. Jump on forums and ask around or have a sys-admin configure for you. Keep in mind different admins have their own ways of configuring.The most important distinction for me is to decide whether this server should be set aggressive or conservative:AGGRESSIVE configuration – gives every site as much resources as possible. Good for low-tenant or dedicated servers.CONSERVATIVE configuration – gives every site as little resources as possible. Good for high-tenant or shared servers.5. Disable unused services (INT, HIGH)Many servers are automatically set up with all features running to make things easy for you. But they’re just like brand new computers with pre-installed software. Get rid of the ones you don’t use. Even if they don’t use much memory, they can still be bombarded by hackers and that eats resources.DNS – disable if you’re using external DNS service. (Cloudflare, DNSME, etc.)Email – disable if you’re using 3rd-party email. (G-Suite, MXroute, etc.)FTP/SFTP – disable if not using.Memcache/Redis – disable if you don’t use it.Other services – Varnish, Elastipress, etc.If you want to be OCD, scan your system for all listening ports and services.6. Remove unused server modules (ADV, LOW)Want to be even more OCD? Disable every single module not used by the server. Some of them are junk unused server stuff; others are unused Linux distro stuff. Old school Apache-compatible stacks or unoptimized control panels tend to have many unused modules enabled by default (while also not enabling ones you might need).Read documentation and check online before blindly removing or replacing them. The danger is you disable things you need (or worse, one that improves performance). You should make a list of disabled services/modules to reference later or give to a contractor when troubleshooting.7. Use the latest PHP version (INT-ADV, HIGH)The PHP version alone makes a HUGE difference.Use the latest PHP version possible! (Easily-configured from your webhosting control panel)For example, PHP 7.0 is 3 times faster than PHP 5.6.Even PHP 7.3 is 10% faster than PHP 7.2.At the time of this writing, PHP 7.4 is available.Be wary of any webhosts still using old PHP!Keeping your website PHP version updated is not only for speed but also security. The only issue is some themes or plugins may not be compatible with the latest PHP version. You’ll know because your site doesn’t work right, or looks weird. So test carefully and keep themes/plugins updated, which helps them stay compatible with the latest PHP.8. Recommended php.ini configurations (INT, MED)Most of you (on shared hosting) won’t even have access to these settings or know how to set them. But nonetheless, here are my recommendations.max_execution_time – lower (30-60 sec) is better to prevent resources hogs from lagging out the server. But you may need higher execution times for long processes like imports, exports, backups.max_input_time – lower (60 sec) is better. Increase only if you’re trying to import something that takes forever.max_input_vars – set to “1000”, unless some plugins need higher.memory_limit – try “256M” to be safe. Raise if you have heavy plugins. I like to set lower so I’m notified immediately when there are memory hogs. The “error_log” will tell you if you need more.zlib.output_compression – may or may not help. I leave it off.9. Use an updated MySQL fork version (INT-ADV, LOW)Most people only know of MySQL, which is now acquired/owned by Oracle. There’s also MariaDB (a fork of MySQL by its original creators) and Percona, and also others.MySQL 8 is much better than MySQL 5.7.But it’s better if you can use MariaDB over MySQL. Community-friendly and better performance than vanilla MySQL 5.7.Use the latest MariaDB version that you can.Whatever you do, just don’t use MySQL 5.7.What about Percona? What about the other 3rd-party MySQL-compatible forks? For most sites, it makes little difference if any. Don’t forget to backup your database before changing or upgrading MySQL.MySQL vs MariaDB vs Percona10. Convert MySQL tables from MyISAM to InnoDB (BEG, LOW)Make sure your tables are set to InnoDB instead of MyISAM.InnoDB is newer and regarded as being better overall (faster, safer).MyISAM can be faster in some scenarios (when mostly read-only).You can convert manually in phpMyAdmin or use a plugin (Servebolt Optimizer or LiteSpeed Cache). Can delete the plugin afterwards if you don’t need it.11. Tuning MySQL configurations (ADV, LOW)Usually not required (or noticeably-beneficial) for the average site but can help tremendously for large sites with high traffic and varying query lengths.You can run MySQLTuner for general recommendations or ask around the sys-admin community to see what everyone else uses.Buffer size, packet size, cache, connections, cache, stack, etc…are all among the general things to tune.Simple Linode guide.When trying out random configurations online or copying somebody else’s, please make sure their environment is similar to yours. The main distinctions are:server size, resources availablehow many clients/sites on serverhow many end users on serverhow much traffichow big are the siteswhat kind of read/write behaviorIt’s important to know whether their settings are for efficiency (high-tenant webhost) or aggressive performance (low-tenant webserver).12. Server full-page caching (ADV, HIGH)Full-page caching can help speed-up any website. But caching directly from the server is much more powerful and resource-efficient than PHP/application-level caching done through a plugin.Some Apache or NGINX servers use Varnish – ugghhh, outdated. Don’t use Varnish proxy. Just upgrade to pure-LiteSpeed or pure-NGINX stack.LiteSpeed servers can use LiteSpeed cache – powerful, many features, and comes with a handy WordPress cache plugin (called “LiteSpeed Cache”).NGINX servers can use FastCGI – great, super fast! While there’s no official NGINX cache plugin for WordPress, there are various “NGINX helper” plugins to facilitate basic cache functions (like purging).To be safe, you should disable caching on pages with forms, carts, or checkouts. Private pages (for logged-in users) CAN be cached but don’t mess with that unless you have that much private traffic and ready to spend hours configuring private cache.You can only enable server-level caching if you own or have access to the server. Otherwise, your webhost decides what caching options you have.Shared hosting usually allows all caching plugins.Managed hosting usually limits you to only their proprietary one.13. Memory object-caching (ADV, LOW-HIGH)Object-caching caches only the database queries instead of the entire page html. This technically makes it “slower” than full-page caching (since you’re not caching the entire page) but useful for speeding up dynamic pages or private pages (logged-in users, admin backend) that can’t be static-cached.Any site with lots of constantly-refreshed data on frontend, or lots of numbers and reports on backend…would stand to benefit from object caching. Mostly-static sites or low-traffic sites would not benefit from object-caching at all; don’t use it on them…it can make them slower!Redis is the gold standard in object caching now. It’s superior to the older memcache in almost every way.Memcache is only used in rare situations where Redis doesn’t work or is slower.If your data doesn’t change much, you can set longer object caching times (e.g. 60 mins and up). Longer times means fewer database queries.Otherwise, stick with the default 5-10 mins to be safe…unless you don’t mind users seeing stale data.Object caching can be managed by WordPress plugins. Most ideal if you have one cache plugin to manage both full-page caching and object caching.You can get ~25% faster object caching by using a Unix SocketUNIX sockets are run from a lower-level layer on the OSI networking model and therefore faster than standard TCP sockets.Redis and Memcache UNIX socket configuration guides for CentOS.Redis and Memcache UNIX socket configuration guides for Ubuntu.Note: with UNIX socket enabled, only one server user account (and presumably all sites by that user) can use object caching. So you can’t use this if you plan to have multiple server users deploying object cache.Some background on memory-caching…Memory-caching is the gold standard in caching, because cache runs faster from memory than than from disk. The issue is we have limited amounts of memory (most of it already used for applications) so we can’t store the entire site cache in there. It matters less nowadays anyway since server disks are so much faster now (thanks to SSD technology).Sure memory is more abundant now too but then again, applications are bigger. You may have heard of others loading their entire site into memory…some using the cache route, others by mounting their WordPress directory into memory. It works great if your site is small enough but for most people: your memory is only big enough to store database queries, anything else you want to cache will be stored on your disk.14. Use the latest HTTP protocol (BEG, HIGH)HTTP/2 loads browser requests so much faster than HTTP/1 (thanks to parallelization). It feels like 3 times faster to me.You should be using HTTP/2 or even HTTP/3 (recently released).Avoid older web servers still on the archaic HTTP/1.Check your site for HTTP/2 and HTTP/3.Using HTTP/2 requires HTTPS/SSL. If your site isn’t in HTTPS, do it now!15. Content encoding (INT, HIGH)GZIP is so 2016. Every web-server should have BROTLI compression nowadays. It’s superior to GZIP (produces smaller files AND in less time). But shockingly, BROTLI still isn’t available on all web-servers.If using BROTLI – set static compression to 4.If using GZIP – set dynamic compression to 1, static compression to 6.You can push static compression levels higher if your CPU is strong (or low-usage server) and/or your static content is cached for a long time (long expiry times). If you’re using a CDN or Cloudflare, make sure you enable BROTLI compression there as well.16. Control-panel (INT, HIGH)This issue matters only for VPS users. Control panels used to be critiqued for the initial weight they put on the server. That’s because control panels were originally designed for large dedicated servers, but have since been optimized for smaller VPS. While it’s true that having no control panel is lighter than having one, it makes day-to-day tasks harder. Their footprint is now negligible considering how useful panels can be.The best performing control panel is one that fits your needs.Allows you to pick the web server of your choice – NGINX or LiteSpeed.Easily configure redirects at server level – instead of slower PHP-level redirection plugin.Easily configure granular caching rules – choosing what and what not to cache.Easy to manage – for you or your sys-admin.Can cage users – preventing resource-hogs on high-tenant servers.Secure against hacks – as hacking attempts eat many resources.Easy to use – for you or your clients.17. Use external DNS service (INT, LOW)Lower DNS latency (small benefit)Easy to update DNS (convenience)Will using an external DNS like Cloudflare or DNS Made Easy make a world of difference in terms of webhosting speed? I think it improves lookup time but not so noticeable unless your previous DNS server was a piece of junk by cheap webhost.The main benefit for me is how quickly I can redirect things. Suppose you get hacked and need to redirect through a security proxy. Or maybe you’re switching certain aspects of your site to another server. In moments like this, having a DNS service is so convenient. You can switch things over with very little downtime, and even switch them back quickly if there’s an issue.DNS services may seem like an extra hassle to setup, but once in place they allow you to integrate new services and mitigate performance issues so much faster.18. Run WP-cron from your server (BEG, MED)Many WordPress tasks need a trigger to function. Such as sending out system emails, run backups, release scheduled posts. By default, WordPress uses a function called WP-Cron (conveniently located at yourdomain.com/wp-cron.php). It works by checking (and executing) for any pending tasks any time someone visits the website. It’s great for small sites, but terrible if you have tons of traffic (triggering many unnecessary cron-checks). Also an obvious DDOS vulnerability.The sensible thing is to disable WP-cron and use a real cron job whether from your server or an external cron service. Some cron jobs visit the website directly. Others go through the Linux directory. Use whichever one works. I think a 5-minute interval is good.19. Caging users & resource limits (ADV, MED-HIGH)Do you have many sites or clients on the same machine? Are you unable to police them all effectively? If you’re losing control of your tenants, it’s probably time to limit their resources. I’ll start you off with a few tactics below. You look up the rest.Cloudlinux & CageFS – limit CPU and memory usageServer-wide bans on cache-prebuilding, broken-link checkers, and other resource hogs.Decrease php execution time.Global configs blocking the usual offenders, bots, etc.Worst-case scenario, just split off some clients onto another server. Split them up by size, space usage, traffic amount, whatever you want.19. Caging users & resource limits (ADV, MED-HIGH)Do you have many sites or clients on the same machine? Are you unable to police them all effectively? If you’re losing control of your tenants, it’s probably time to limit their resources. I’ll start you off with a few tactics below. You look up the rest.Cloudlinux & CageFS – limit CPU and memory usageServer-wide bans on cache-prebuilding, broken-link checkers, and other resource hogs.Decrease php execution time.Global configs blocking the usual offenders, bots, etc.Worst-case scenario, just split off some clients onto another server. Split them up by size, space usage, traffic amount, whatever you want.20. Tracking down resource hogs (ADV, MED-HIGH)We often run into slow server issues with no obvious clue of where to look. Today, it’s this client. Tomorrow, it’s that client. It seems any site can be the culprit on any given day. When you have so many clients, and none of them can afford switching plugins on and off, it is really really difficult to track down the problem.Here are some ideas:Check server logs – are you being hacked? Are there excessive requests?Check server monitors – which users are hogging the CPU, memory, and bandwidth?Once you know which site it is…check WordPress error log. Run Query Monitor.Of course, it might not even happen all the time. You have to track down what users or processes were doing when the slowdown happened.Sometimes you’ll need more of a developer mentality. What plugin was updated last? Any new themes or plugins that were custom-coded? (Check for memory-exhaustive commands.) Yes, you can use applications monitors like New Relic but for me, it’s overkill. The trickiest problems are when it seems like every site is the problem. Or also when the server load is low but the sites are still slow. Good luck!In the next part of this blog series we’ll cover caching optimization for your websites, so stay tuned. For a full version of the article go to The Ultimate WordPress Speed Optimization Guide.Need an optimized WordPress hosting that meets the needs of your project? Get in touch with Jelastic for choosing the best option and receiving technical assistance while migration.Related ArticlesEnterprise WordPress Hosting: Automatic Scaling and High AvailabilityWordPress Hosting in Elastic Standalone ContainerHow to Migrate a WordPress Site to Jelastic PaaSSetup WordPress Multisite Network with Domain Mapping and CDNWebinar Summary: WordPress Cluster for Enterprise High Availability and On-Demand ScalingSubscribe to get the latest updates\nGET STARTED FOR FREE\nE-mail\nSearch\nCategoriesDevelopmentHosting BusinessMulti-CloudWordPressDatabasesJavaContainersKubernetesUse CasesNews and ReleasesSolution innodb_page_cleaners ', float_val=1000.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.16625255346298218, 0.18482309579849243, 0.2824251055717468, 0.1909082680940628, 0.17559102177619934]
Choice: 2
type: 3, value: 1000.0, unit: 
Done flag: False
Decision: Deciding weight of TuningHint(doc_id=35, param=<re.Match object; span=(11242, 11256), match='max_input_vars'>, value=<re.Match object; span=(0, 4), match='1000'>, recommendation='1000', passage='Having a fast business website is essential for both Google ranking and overall conversion rate. Due to Kissmetrics, 40% of site visitors will abandon a page that takes three or more seconds to load. Earlier, the BBC calculated that they lost an additional 10% of users for every extra second their site took to load.\xa0In order to help our readers and customers in gaining higher speed results, we decided to publish a set of articles dedicated to the improvement of website performance using great hints from The Ultimate WordPress Speed Optimization Guide written by Johnny Nguyen.\xa0“Faster websites make more money, rank better, and improve overall user experience!” says Johnny.Today we will start with the web hosting optimization part. Each point will be marked with the level of required skills to implement and the impact it will bring.SKILL:BEGINNER – can Google and follow instructions.INTERMEDIATE – working as WordPress contractor.ADVANCED – programmer or server-admin.IMPACT:LOW – maybe 100-200ms difference. Possibly unnoticeable.MEDIUM – around 500ms difference.HIGH – 1 second difference or more.Your webhosting speed determines how fast it can process code, and how many visitors it can handle. Compare your website to a car. To make a car go faster, you either A) get a stronger engine and/or B) lighten the weight. For websites, the web-server is the “engine” and the code is the”weight”.The goal is to improve our web-server “engine” while decreasing code “weight”, ok?Changing your webhosting is one of the easiest ways to improve speed. Those of you on cheap $5/month shared webhosting will benefit the most from moving to a managed hosting service or even your own VPS. The difference will be night and day without any site changes. Moving from managed hosting to an optimized VPS or dedicated “bare metal” server will be another night-and-day jump.\xa0The difference isn’t only speed but also a matter of cost (savings). A fast server can handle more visitors than a slow one. If your server can handle double the traffic, theoretically the bill can be twice as cheap. Not a big deal for a small site but what about a huge ecommerce site with a $1k/month server bill? 50% cost reduction sounds mighty attractive!1. Choose nearby datacenter location (BEG, LOW-MED)Obviously, you should pick a server location that’s closest to your visitors. Ideally, you don’t want your DNS ping time more than 100ms from the server to your visitor’s computer. There are many implications depending on your needs.Local businesses should get a server as close to their visitors as possible. Keep it within 100ms or less, within 50ms is better. Check ping times with WonderNetwork.The USA is about 80ms from coast to coast. Canada and Mexico are close enough as well.All of Western Europe is only 40-50ms, very close.Asia is within 80ms between most countries.India/Pakistan, Australia/NZ, Africa are somewhat isolated. Local businesses there need a local datacenter. Even Singapore to Australia is borderline “far” by DNS standards (~150ms).South America can be unreliable infrastructure. For that reason, many companies in Central/South America still use US-based datacenters like in California, Texas, or Florida (Miami).If you have worldwide traffic (including Asia/Pacific) and no particular core region, I like USA west coast as perfect location for fast traffic to Europe and Asia.If you have only USA & Europe traffic and no particular core region, I like USA east coast for fast traffic to Europe.It’s also good to have a webhosting company on the same timezone as your core audience. That way they can (quickly) support or troubleshoot issues when most of your visitors are awake.Those of you thinking a CDN can make up for far server location (that’s not necessarily true!)Those of you hunting for dedicated nodes…the best is TIER-4 datacenter with four 9’s (99.9999% uptime guarantee). But good luck getting those guaranteed!Uptime calculator (99.9% uptime means 43min downtime per month)Nearest.host – cool site showing nearby server companies.2. Choose the right website hosting service (BEG, HIGH)Shared hosting ($5-30/month) – fine for small sites and low traffic up to 100k hits/month. No access to server configurations.VPS/cloud hosting ($30-300/month) – great for medium sites and traffic up to 30 million hits/month.Dedicated (bare metal) server ($200/month & up) – great for large sites with TONS of traffic.Buy the best that you can comfortably afford. A small website doesn’t need much power but it’s still noticeable when you get a better server and appreciated more than you think. Think of a new phone that opens apps just a fraction of a second quicker. You really can feel the difference and it improves user experience tremendously.Shared webhosting is usually slow because they stuff hundreds of customers/websites onto the same server (maximize profits). This increases slowdowns, unexpected crashes or server restarts, security attacks, and your email IP getting marked as spam.Shared hosting environments are also slow because they load many scripts/modules to maximize compatibility for as many users as possible. And without dedicated resources, your visitors end up waiting in line while the server is busy handling other websites first.VPS/Dedicated servers are faster because there’s more resources available per account and your resources are serving only your websites. You have more control over your environment, can configure it for your needs. VPS/dedicated can be costly or difficult to manage for regular users. There are cloud-panel services to help manage it and also fully-managed services where they take care of everything for you.Those unable to handle technical responsibilities of VPS can go for “premium shared hosting”. They don’t crowd the server as much but the performance (while better than regular shared hosting) will still be far behind a VPS.3. Choose a high performance web server (INT-ADV, HIGH)Use any web server software but Apache. The best is NGINX or LiteSpeed, or highly-optimized Apache (rare to find). The higher your traffic, the more noticeable the difference.NGINX shines at simple sites. Just set it and go. Not much settings to optimize. But once you have a complicated site, NGINX is a mixed bag. Some NGINX features aren’t easy to configure. If you have a server-admin to fine-tune, it’s great but many people don’t.LiteSpeed has more easy-accessible features than NGINX. Like when you need some things cached but not others, or dealing with server-level redirects via htaccess. LiteSpeed also has a WordPress cache plugin which NGINX doesn’t. That’s a HUGE advantage. (I personally prefer LiteSpeed.)OpenLiteSpeed is the free community version of LiteSpeed. It’s a great alternative for those wanting the free price of NGINX but the powerful LiteSpeed cache plugin.Some webhosts have the Apache+NGINX hybrid stack. I feel those are outdated now and makes for unnecessarily slower/heavier stack.If using Apache, MPM events are best (compared to worker or prefork).Keep your webserver updated. Later versions can speed up certain protocols and processes noticeably.4. Web server configuration (ADV, MED-HIGH)Most web servers come with safe/functional configurations right off the bat. Adequate for the average small site with little traffic. It’s when you get more traffic and more security attacks, or have more demanding apps that fine-tuning the configurations makes a big difference.Timeout – 30 to 60 seconds is a safe start. You can increase up to 600 or beyond if needed for long processes (import, export, backups). Keep in mind that allows poorly-coded processes or hack exploits to run out your server resources.# of child processes allowed – depends on the server environment. Default should be fine.Concurrent connections allowed – anywhere from 1-20k. Higher is not necessarily better!Keep alive – on, off, or LiteSpeed’s “smart keep-alive”. I think “on” is safer. If you have LiteSpeed, the smart keep-alive is awesome!Keep alive timeout – 3-5 seconds is a safe start. Increase if needed.How many threads, body/buffer size, workers, clients, etc….all that you can look up online. It depends on your server size and use scenario. Jump on forums and ask around or have a sys-admin configure for you. Keep in mind different admins have their own ways of configuring.The most important distinction for me is to decide whether this server should be set aggressive or conservative:AGGRESSIVE configuration – gives every site as much resources as possible. Good for low-tenant or dedicated servers.CONSERVATIVE configuration – gives every site as little resources as possible. Good for high-tenant or shared servers.5. Disable unused services (INT, HIGH)Many servers are automatically set up with all features running to make things easy for you. But they’re just like brand new computers with pre-installed software. Get rid of the ones you don’t use. Even if they don’t use much memory, they can still be bombarded by hackers and that eats resources.DNS – disable if you’re using external DNS service. (Cloudflare, DNSME, etc.)Email – disable if you’re using 3rd-party email. (G-Suite, MXroute, etc.)FTP/SFTP – disable if not using.Memcache/Redis – disable if you don’t use it.Other services – Varnish, Elastipress, etc.If you want to be OCD, scan your system for all listening ports and services.6. Remove unused server modules (ADV, LOW)Want to be even more OCD? Disable every single module not used by the server. Some of them are junk unused server stuff; others are unused Linux distro stuff. Old school Apache-compatible stacks or unoptimized control panels tend to have many unused modules enabled by default (while also not enabling ones you might need).Read documentation and check online before blindly removing or replacing them. The danger is you disable things you need (or worse, one that improves performance). You should make a list of disabled services/modules to reference later or give to a contractor when troubleshooting.7. Use the latest PHP version (INT-ADV, HIGH)The PHP version alone makes a HUGE difference.Use the latest PHP version possible! (Easily-configured from your webhosting control panel)For example, PHP 7.0 is 3 times faster than PHP 5.6.Even PHP 7.3 is 10% faster than PHP 7.2.At the time of this writing, PHP 7.4 is available.Be wary of any webhosts still using old PHP!Keeping your website PHP version updated is not only for speed but also security. The only issue is some themes or plugins may not be compatible with the latest PHP version. You’ll know because your site doesn’t work right, or looks weird. So test carefully and keep themes/plugins updated, which helps them stay compatible with the latest PHP.8. Recommended php.ini configurations (INT, MED)Most of you (on shared hosting) won’t even have access to these settings or know how to set them. But nonetheless, here are my recommendations.max_execution_time – lower (30-60 sec) is better to prevent resources hogs from lagging out the server. But you may need higher execution times for long processes like imports, exports, backups.max_input_time – lower (60 sec) is better. Increase only if you’re trying to import something that takes forever.max_input_vars – set to “1000”, unless some plugins need higher.memory_limit – try “256M” to be safe. Raise if you have heavy plugins. I like to set lower so I’m notified immediately when there are memory hogs. The “error_log” will tell you if you need more.zlib.output_compression – may or may not help. I leave it off.9. Use an updated MySQL fork version (INT-ADV, LOW)Most people only know of MySQL, which is now acquired/owned by Oracle. There’s also MariaDB (a fork of MySQL by its original creators) and Percona, and also others.MySQL 8 is much better than MySQL 5.7.But it’s better if you can use MariaDB over MySQL. Community-friendly and better performance than vanilla MySQL 5.7.Use the latest MariaDB version that you can.Whatever you do, just don’t use MySQL 5.7.What about Percona? What about the other 3rd-party MySQL-compatible forks? For most sites, it makes little difference if any. Don’t forget to backup your database before changing or upgrading MySQL.MySQL vs MariaDB vs Percona10. Convert MySQL tables from MyISAM to InnoDB (BEG, LOW)Make sure your tables are set to InnoDB instead of MyISAM.InnoDB is newer and regarded as being better overall (faster, safer).MyISAM can be faster in some scenarios (when mostly read-only).You can convert manually in phpMyAdmin or use a plugin (Servebolt Optimizer or LiteSpeed Cache). Can delete the plugin afterwards if you don’t need it.11. Tuning MySQL configurations (ADV, LOW)Usually not required (or noticeably-beneficial) for the average site but can help tremendously for large sites with high traffic and varying query lengths.You can run MySQLTuner for general recommendations or ask around the sys-admin community to see what everyone else uses.Buffer size, packet size, cache, connections, cache, stack, etc…are all among the general things to tune.Simple Linode guide.When trying out random configurations online or copying somebody else’s, please make sure their environment is similar to yours. The main distinctions are:server size, resources availablehow many clients/sites on serverhow many end users on serverhow much traffichow big are the siteswhat kind of read/write behaviorIt’s important to know whether their settings are for efficiency (high-tenant webhost) or aggressive performance (low-tenant webserver).12. Server full-page caching (ADV, HIGH)Full-page caching can help speed-up any website. But caching directly from the server is much more powerful and resource-efficient than PHP/application-level caching done through a plugin.Some Apache or NGINX servers use Varnish – ugghhh, outdated. Don’t use Varnish proxy. Just upgrade to pure-LiteSpeed or pure-NGINX stack.LiteSpeed servers can use LiteSpeed cache – powerful, many features, and comes with a handy WordPress cache plugin (called “LiteSpeed Cache”).NGINX servers can use FastCGI – great, super fast! While there’s no official NGINX cache plugin for WordPress, there are various “NGINX helper” plugins to facilitate basic cache functions (like purging).To be safe, you should disable caching on pages with forms, carts, or checkouts. Private pages (for logged-in users) CAN be cached but don’t mess with that unless you have that much private traffic and ready to spend hours configuring private cache.You can only enable server-level caching if you own or have access to the server. Otherwise, your webhost decides what caching options you have.Shared hosting usually allows all caching plugins.Managed hosting usually limits you to only their proprietary one.13. Memory object-caching (ADV, LOW-HIGH)Object-caching caches only the database queries instead of the entire page html. This technically makes it “slower” than full-page caching (since you’re not caching the entire page) but useful for speeding up dynamic pages or private pages (logged-in users, admin backend) that can’t be static-cached.Any site with lots of constantly-refreshed data on frontend, or lots of numbers and reports on backend…would stand to benefit from object caching. Mostly-static sites or low-traffic sites would not benefit from object-caching at all; don’t use it on them…it can make them slower!Redis is the gold standard in object caching now. It’s superior to the older memcache in almost every way.Memcache is only used in rare situations where Redis doesn’t work or is slower.If your data doesn’t change much, you can set longer object caching times (e.g. 60 mins and up). Longer times means fewer database queries.Otherwise, stick with the default 5-10 mins to be safe…unless you don’t mind users seeing stale data.Object caching can be managed by WordPress plugins. Most ideal if you have one cache plugin to manage both full-page caching and object caching.You can get ~25% faster object caching by using a Unix SocketUNIX sockets are run from a lower-level layer on the OSI networking model and therefore faster than standard TCP sockets.Redis and Memcache UNIX socket configuration guides for CentOS.Redis and Memcache UNIX socket configuration guides for Ubuntu.Note: with UNIX socket enabled, only one server user account (and presumably all sites by that user) can use object caching. So you can’t use this if you plan to have multiple server users deploying object cache.Some background on memory-caching…Memory-caching is the gold standard in caching, because cache runs faster from memory than than from disk. The issue is we have limited amounts of memory (most of it already used for applications) so we can’t store the entire site cache in there. It matters less nowadays anyway since server disks are so much faster now (thanks to SSD technology).Sure memory is more abundant now too but then again, applications are bigger. You may have heard of others loading their entire site into memory…some using the cache route, others by mounting their WordPress directory into memory. It works great if your site is small enough but for most people: your memory is only big enough to store database queries, anything else you want to cache will be stored on your disk.14. Use the latest HTTP protocol (BEG, HIGH)HTTP/2 loads browser requests so much faster than HTTP/1 (thanks to parallelization). It feels like 3 times faster to me.You should be using HTTP/2 or even HTTP/3 (recently released).Avoid older web servers still on the archaic HTTP/1.Check your site for HTTP/2 and HTTP/3.Using HTTP/2 requires HTTPS/SSL. If your site isn’t in HTTPS, do it now!15. Content encoding (INT, HIGH)GZIP is so 2016. Every web-server should have BROTLI compression nowadays. It’s superior to GZIP (produces smaller files AND in less time). But shockingly, BROTLI still isn’t available on all web-servers.If using BROTLI – set static compression to 4.If using GZIP – set dynamic compression to 1, static compression to 6.You can push static compression levels higher if your CPU is strong (or low-usage server) and/or your static content is cached for a long time (long expiry times). If you’re using a CDN or Cloudflare, make sure you enable BROTLI compression there as well.16. Control-panel (INT, HIGH)This issue matters only for VPS users. Control panels used to be critiqued for the initial weight they put on the server. That’s because control panels were originally designed for large dedicated servers, but have since been optimized for smaller VPS. While it’s true that having no control panel is lighter than having one, it makes day-to-day tasks harder. Their footprint is now negligible considering how useful panels can be.The best performing control panel is one that fits your needs.Allows you to pick the web server of your choice – NGINX or LiteSpeed.Easily configure redirects at server level – instead of slower PHP-level redirection plugin.Easily configure granular caching rules – choosing what and what not to cache.Easy to manage – for you or your sys-admin.Can cage users – preventing resource-hogs on high-tenant servers.Secure against hacks – as hacking attempts eat many resources.Easy to use – for you or your clients.17. Use external DNS service (INT, LOW)Lower DNS latency (small benefit)Easy to update DNS (convenience)Will using an external DNS like Cloudflare or DNS Made Easy make a world of difference in terms of webhosting speed? I think it improves lookup time but not so noticeable unless your previous DNS server was a piece of junk by cheap webhost.The main benefit for me is how quickly I can redirect things. Suppose you get hacked and need to redirect through a security proxy. Or maybe you’re switching certain aspects of your site to another server. In moments like this, having a DNS service is so convenient. You can switch things over with very little downtime, and even switch them back quickly if there’s an issue.DNS services may seem like an extra hassle to setup, but once in place they allow you to integrate new services and mitigate performance issues so much faster.18. Run WP-cron from your server (BEG, MED)Many WordPress tasks need a trigger to function. Such as sending out system emails, run backups, release scheduled posts. By default, WordPress uses a function called WP-Cron (conveniently located at yourdomain.com/wp-cron.php). It works by checking (and executing) for any pending tasks any time someone visits the website. It’s great for small sites, but terrible if you have tons of traffic (triggering many unnecessary cron-checks). Also an obvious DDOS vulnerability.The sensible thing is to disable WP-cron and use a real cron job whether from your server or an external cron service. Some cron jobs visit the website directly. Others go through the Linux directory. Use whichever one works. I think a 5-minute interval is good.19. Caging users & resource limits (ADV, MED-HIGH)Do you have many sites or clients on the same machine? Are you unable to police them all effectively? If you’re losing control of your tenants, it’s probably time to limit their resources. I’ll start you off with a few tactics below. You look up the rest.Cloudlinux & CageFS – limit CPU and memory usageServer-wide bans on cache-prebuilding, broken-link checkers, and other resource hogs.Decrease php execution time.Global configs blocking the usual offenders, bots, etc.Worst-case scenario, just split off some clients onto another server. Split them up by size, space usage, traffic amount, whatever you want.19. Caging users & resource limits (ADV, MED-HIGH)Do you have many sites or clients on the same machine? Are you unable to police them all effectively? If you’re losing control of your tenants, it’s probably time to limit their resources. I’ll start you off with a few tactics below. You look up the rest.Cloudlinux & CageFS – limit CPU and memory usageServer-wide bans on cache-prebuilding, broken-link checkers, and other resource hogs.Decrease php execution time.Global configs blocking the usual offenders, bots, etc.Worst-case scenario, just split off some clients onto another server. Split them up by size, space usage, traffic amount, whatever you want.20. Tracking down resource hogs (ADV, MED-HIGH)We often run into slow server issues with no obvious clue of where to look. Today, it’s this client. Tomorrow, it’s that client. It seems any site can be the culprit on any given day. When you have so many clients, and none of them can afford switching plugins on and off, it is really really difficult to track down the problem.Here are some ideas:Check server logs – are you being hacked? Are there excessive requests?Check server monitors – which users are hogging the CPU, memory, and bandwidth?Once you know which site it is…check WordPress error log. Run Query Monitor.Of course, it might not even happen all the time. You have to track down what users or processes were doing when the slowdown happened.Sometimes you’ll need more of a developer mentality. What plugin was updated last? Any new themes or plugins that were custom-coded? (Check for memory-exhaustive commands.) Yes, you can use applications monitors like New Relic but for me, it’s overkill. The trickiest problems are when it seems like every site is the problem. Or also when the server load is low but the sites are still slow. Good luck!In the next part of this blog series we’ll cover caching optimization for your websites, so stay tuned. For a full version of the article go to The Ultimate WordPress Speed Optimization Guide.Need an optimized WordPress hosting that meets the needs of your project? Get in touch with Jelastic for choosing the best option and receiving technical assistance while migration.Related ArticlesEnterprise WordPress Hosting: Automatic Scaling and High AvailabilityWordPress Hosting in Elastic Standalone ContainerHow to Migrate a WordPress Site to Jelastic PaaSSetup WordPress Multisite Network with Domain Mapping and CDNWebinar Summary: WordPress Cluster for Enterprise High Availability and On-Demand ScalingSubscribe to get the latest updates\nGET STARTED FOR FREE\nE-mail\nSearch\nCategoriesDevelopmentHosting BusinessMulti-CloudWordPressDatabasesJavaContainersKubernetesUse CasesNews and ReleasesSolution innodb_page_cleaners ', float_val=1000.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.017641693353652954, 0.43016517162323, 0.2093134969472885, 0.17483586072921753, 0.16804374754428864]
Choice: 0
Trying assigning max_input_vars to 1000
Assignment ('max_input_vars', '1000') was rejected
Hint counter: 73
Episode hint counter before: 2
Episode hint counter: 3
Hints per episode: 5
Done flag: False
No warmup - hint counter: 73
{'sequence': '1000', 'labels': ['Use recommendation', 'Increase recommendation', 'Decrease recommendation', 'Increase recommendation strongly', 'Decrease recommendation strongly'], 'scores': [0.2824251055717468, 0.1909082680940628, 0.18482309579849243, 0.17559102177619934, 0.16625255346298218]}
Decision: Deciding adaption of TuningHint(doc_id=77, param=<re.Match object; span=(307, 321), match='max_input_vars'>, value=<re.Match object; span=(0, 4), match='1000'>, recommendation='1000', passage='max_execution_time – lower (30-60 sec) is better to prevent resources hogs from lagging out the server. But you may need higher execution times for long processes like imports, exports, backups.max_input_time – lower (60 sec) is better. Increase only if you’re trying to import something that takes forever.max_input_vars – set to “1000”, unless some plugins need higher.memory_limit – try “256M” to be safe. Raise if you have heavy plugins. I like to set lower so I’m notified immediately when there are memory hogs. The “error_log” will tell you if you need more.zlib.output_compression – may or may not help. I leave it off.\n9. Use an updated MySQL fork version (INT-ADV, LOW)\nMost people only know of MySQL, which is now acquired/owned by Oracle. There’s also MariaDB (a fork of MySQL by its original creators) and Percona, and also others. max_binlog_stmt_cache_size ', float_val=1000.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.16625255346298218, 0.18482309579849243, 0.2824251055717468, 0.1909082680940628, 0.17559102177619934]
Choice: 1
type: 3, value: 1000.0, unit: 
Done flag: False
No warmup - hint counter: 73
{'sequence': '1000', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.43016517162323, 0.2093134969472885, 0.17483586072921753, 0.16804374754428864, 0.017641693353652954]}
Decision: Deciding weight of TuningHint(doc_id=77, param=<re.Match object; span=(307, 321), match='max_input_vars'>, value=<re.Match object; span=(0, 4), match='1000'>, recommendation='1000', passage='max_execution_time – lower (30-60 sec) is better to prevent resources hogs from lagging out the server. But you may need higher execution times for long processes like imports, exports, backups.max_input_time – lower (60 sec) is better. Increase only if you’re trying to import something that takes forever.max_input_vars – set to “1000”, unless some plugins need higher.memory_limit – try “256M” to be safe. Raise if you have heavy plugins. I like to set lower so I’m notified immediately when there are memory hogs. The “error_log” will tell you if you need more.zlib.output_compression – may or may not help. I leave it off.\n9. Use an updated MySQL fork version (INT-ADV, LOW)\nMost people only know of MySQL, which is now acquired/owned by Oracle. There’s also MariaDB (a fork of MySQL by its original creators) and Percona, and also others. max_binlog_stmt_cache_size ', float_val=1000.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.017641693353652954, 0.43016517162323, 0.2093134969472885, 0.17483586072921753, 0.16804374754428864]
Choice: 3
Trying assigning max_input_vars to 500
Adding assignment ('max_input_vars', '500') with weight 8
Assignment ('max_input_vars', '500') extracted from "max_execution_time – lower (30-60 sec) is better to prevent resources hogs from lagging out the server. But you may need higher execution times for long processes like imports, exports, backups.max_input_time – lower (60 sec) is better. Increase only if you’re trying to import something that takes forever.max_input_vars – set to “1000”, unless some plugins need higher.memory_limit – try “256M” to be safe. Raise if you have heavy plugins. I like to set lower so I’m notified immediately when there are memory hogs. The “error_log” will tell you if you need more.zlib.output_compression – may or may not help. I leave it off.
9. Use an updated MySQL fork version (INT-ADV, LOW)
Most people only know of MySQL, which is now acquired/owned by Oracle. There’s also MariaDB (a fork of MySQL by its original creators) and Percona, and also others. max_binlog_stmt_cache_size "
Hint counter: 74
Episode hint counter before: 3
Episode hint counter: 4
Hints per episode: 5
Done flag: False
No warmup - hint counter: 74
{'sequence': 'lower (60 sec', 'labels': ['Decrease recommendation', 'Decrease recommendation strongly', 'Use recommendation', 'Increase recommendation strongly', 'Increase recommendation'], 'scores': [0.5563085675239563, 0.24738478660583496, 0.17297664284706116, 0.013808217830955982, 0.009521732106804848]}
Decision: Deciding adaption of TuningHint(doc_id=35, param=<re.Match object; span=(11129, 11143), match='max_input_time'>, value=<re.Match object; span=(7, 9), match='60'>, recommendation='lower (60 sec', passage='Having a fast business website is essential for both Google ranking and overall conversion rate. Due to Kissmetrics, 40% of site visitors will abandon a page that takes three or more seconds to load. Earlier, the BBC calculated that they lost an additional 10% of users for every extra second their site took to load.\xa0In order to help our readers and customers in gaining higher speed results, we decided to publish a set of articles dedicated to the improvement of website performance using great hints from The Ultimate WordPress Speed Optimization Guide written by Johnny Nguyen.\xa0“Faster websites make more money, rank better, and improve overall user experience!” says Johnny.Today we will start with the web hosting optimization part. Each point will be marked with the level of required skills to implement and the impact it will bring.SKILL:BEGINNER – can Google and follow instructions.INTERMEDIATE – working as WordPress contractor.ADVANCED – programmer or server-admin.IMPACT:LOW – maybe 100-200ms difference. Possibly unnoticeable.MEDIUM – around 500ms difference.HIGH – 1 second difference or more.Your webhosting speed determines how fast it can process code, and how many visitors it can handle. Compare your website to a car. To make a car go faster, you either A) get a stronger engine and/or B) lighten the weight. For websites, the web-server is the “engine” and the code is the”weight”.The goal is to improve our web-server “engine” while decreasing code “weight”, ok?Changing your webhosting is one of the easiest ways to improve speed. Those of you on cheap $5/month shared webhosting will benefit the most from moving to a managed hosting service or even your own VPS. The difference will be night and day without any site changes. Moving from managed hosting to an optimized VPS or dedicated “bare metal” server will be another night-and-day jump.\xa0The difference isn’t only speed but also a matter of cost (savings). A fast server can handle more visitors than a slow one. If your server can handle double the traffic, theoretically the bill can be twice as cheap. Not a big deal for a small site but what about a huge ecommerce site with a $1k/month server bill? 50% cost reduction sounds mighty attractive!1. Choose nearby datacenter location (BEG, LOW-MED)Obviously, you should pick a server location that’s closest to your visitors. Ideally, you don’t want your DNS ping time more than 100ms from the server to your visitor’s computer. There are many implications depending on your needs.Local businesses should get a server as close to their visitors as possible. Keep it within 100ms or less, within 50ms is better. Check ping times with WonderNetwork.The USA is about 80ms from coast to coast. Canada and Mexico are close enough as well.All of Western Europe is only 40-50ms, very close.Asia is within 80ms between most countries.India/Pakistan, Australia/NZ, Africa are somewhat isolated. Local businesses there need a local datacenter. Even Singapore to Australia is borderline “far” by DNS standards (~150ms).South America can be unreliable infrastructure. For that reason, many companies in Central/South America still use US-based datacenters like in California, Texas, or Florida (Miami).If you have worldwide traffic (including Asia/Pacific) and no particular core region, I like USA west coast as perfect location for fast traffic to Europe and Asia.If you have only USA & Europe traffic and no particular core region, I like USA east coast for fast traffic to Europe.It’s also good to have a webhosting company on the same timezone as your core audience. That way they can (quickly) support or troubleshoot issues when most of your visitors are awake.Those of you thinking a CDN can make up for far server location (that’s not necessarily true!)Those of you hunting for dedicated nodes…the best is TIER-4 datacenter with four 9’s (99.9999% uptime guarantee). But good luck getting those guaranteed!Uptime calculator (99.9% uptime means 43min downtime per month)Nearest.host – cool site showing nearby server companies.2. Choose the right website hosting service (BEG, HIGH)Shared hosting ($5-30/month) – fine for small sites and low traffic up to 100k hits/month. No access to server configurations.VPS/cloud hosting ($30-300/month) – great for medium sites and traffic up to 30 million hits/month.Dedicated (bare metal) server ($200/month & up) – great for large sites with TONS of traffic.Buy the best that you can comfortably afford. A small website doesn’t need much power but it’s still noticeable when you get a better server and appreciated more than you think. Think of a new phone that opens apps just a fraction of a second quicker. You really can feel the difference and it improves user experience tremendously.Shared webhosting is usually slow because they stuff hundreds of customers/websites onto the same server (maximize profits). This increases slowdowns, unexpected crashes or server restarts, security attacks, and your email IP getting marked as spam.Shared hosting environments are also slow because they load many scripts/modules to maximize compatibility for as many users as possible. And without dedicated resources, your visitors end up waiting in line while the server is busy handling other websites first.VPS/Dedicated servers are faster because there’s more resources available per account and your resources are serving only your websites. You have more control over your environment, can configure it for your needs. VPS/dedicated can be costly or difficult to manage for regular users. There are cloud-panel services to help manage it and also fully-managed services where they take care of everything for you.Those unable to handle technical responsibilities of VPS can go for “premium shared hosting”. They don’t crowd the server as much but the performance (while better than regular shared hosting) will still be far behind a VPS.3. Choose a high performance web server (INT-ADV, HIGH)Use any web server software but Apache. The best is NGINX or LiteSpeed, or highly-optimized Apache (rare to find). The higher your traffic, the more noticeable the difference.NGINX shines at simple sites. Just set it and go. Not much settings to optimize. But once you have a complicated site, NGINX is a mixed bag. Some NGINX features aren’t easy to configure. If you have a server-admin to fine-tune, it’s great but many people don’t.LiteSpeed has more easy-accessible features than NGINX. Like when you need some things cached but not others, or dealing with server-level redirects via htaccess. LiteSpeed also has a WordPress cache plugin which NGINX doesn’t. That’s a HUGE advantage. (I personally prefer LiteSpeed.)OpenLiteSpeed is the free community version of LiteSpeed. It’s a great alternative for those wanting the free price of NGINX but the powerful LiteSpeed cache plugin.Some webhosts have the Apache+NGINX hybrid stack. I feel those are outdated now and makes for unnecessarily slower/heavier stack.If using Apache, MPM events are best (compared to worker or prefork).Keep your webserver updated. Later versions can speed up certain protocols and processes noticeably.4. Web server configuration (ADV, MED-HIGH)Most web servers come with safe/functional configurations right off the bat. Adequate for the average small site with little traffic. It’s when you get more traffic and more security attacks, or have more demanding apps that fine-tuning the configurations makes a big difference.Timeout – 30 to 60 seconds is a safe start. You can increase up to 600 or beyond if needed for long processes (import, export, backups). Keep in mind that allows poorly-coded processes or hack exploits to run out your server resources.# of child processes allowed – depends on the server environment. Default should be fine.Concurrent connections allowed – anywhere from 1-20k. Higher is not necessarily better!Keep alive – on, off, or LiteSpeed’s “smart keep-alive”. I think “on” is safer. If you have LiteSpeed, the smart keep-alive is awesome!Keep alive timeout – 3-5 seconds is a safe start. Increase if needed.How many threads, body/buffer size, workers, clients, etc….all that you can look up online. It depends on your server size and use scenario. Jump on forums and ask around or have a sys-admin configure for you. Keep in mind different admins have their own ways of configuring.The most important distinction for me is to decide whether this server should be set aggressive or conservative:AGGRESSIVE configuration – gives every site as much resources as possible. Good for low-tenant or dedicated servers.CONSERVATIVE configuration – gives every site as little resources as possible. Good for high-tenant or shared servers.5. Disable unused services (INT, HIGH)Many servers are automatically set up with all features running to make things easy for you. But they’re just like brand new computers with pre-installed software. Get rid of the ones you don’t use. Even if they don’t use much memory, they can still be bombarded by hackers and that eats resources.DNS – disable if you’re using external DNS service. (Cloudflare, DNSME, etc.)Email – disable if you’re using 3rd-party email. (G-Suite, MXroute, etc.)FTP/SFTP – disable if not using.Memcache/Redis – disable if you don’t use it.Other services – Varnish, Elastipress, etc.If you want to be OCD, scan your system for all listening ports and services.6. Remove unused server modules (ADV, LOW)Want to be even more OCD? Disable every single module not used by the server. Some of them are junk unused server stuff; others are unused Linux distro stuff. Old school Apache-compatible stacks or unoptimized control panels tend to have many unused modules enabled by default (while also not enabling ones you might need).Read documentation and check online before blindly removing or replacing them. The danger is you disable things you need (or worse, one that improves performance). You should make a list of disabled services/modules to reference later or give to a contractor when troubleshooting.7. Use the latest PHP version (INT-ADV, HIGH)The PHP version alone makes a HUGE difference.Use the latest PHP version possible! (Easily-configured from your webhosting control panel)For example, PHP 7.0 is 3 times faster than PHP 5.6.Even PHP 7.3 is 10% faster than PHP 7.2.At the time of this writing, PHP 7.4 is available.Be wary of any webhosts still using old PHP!Keeping your website PHP version updated is not only for speed but also security. The only issue is some themes or plugins may not be compatible with the latest PHP version. You’ll know because your site doesn’t work right, or looks weird. So test carefully and keep themes/plugins updated, which helps them stay compatible with the latest PHP.8. Recommended php.ini configurations (INT, MED)Most of you (on shared hosting) won’t even have access to these settings or know how to set them. But nonetheless, here are my recommendations.max_execution_time – lower (30-60 sec) is better to prevent resources hogs from lagging out the server. But you may need higher execution times for long processes like imports, exports, backups.max_input_time – lower (60 sec) is better. Increase only if you’re trying to import something that takes forever.max_input_vars – set to “1000”, unless some plugins need higher.memory_limit – try “256M” to be safe. Raise if you have heavy plugins. I like to set lower so I’m notified immediately when there are memory hogs. The “error_log” will tell you if you need more.zlib.output_compression – may or may not help. I leave it off.9. Use an updated MySQL fork version (INT-ADV, LOW)Most people only know of MySQL, which is now acquired/owned by Oracle. There’s also MariaDB (a fork of MySQL by its original creators) and Percona, and also others.MySQL 8 is much better than MySQL 5.7.But it’s better if you can use MariaDB over MySQL. Community-friendly and better performance than vanilla MySQL 5.7.Use the latest MariaDB version that you can.Whatever you do, just don’t use MySQL 5.7.What about Percona? What about the other 3rd-party MySQL-compatible forks? For most sites, it makes little difference if any. Don’t forget to backup your database before changing or upgrading MySQL.MySQL vs MariaDB vs Percona10. Convert MySQL tables from MyISAM to InnoDB (BEG, LOW)Make sure your tables are set to InnoDB instead of MyISAM.InnoDB is newer and regarded as being better overall (faster, safer).MyISAM can be faster in some scenarios (when mostly read-only).You can convert manually in phpMyAdmin or use a plugin (Servebolt Optimizer or LiteSpeed Cache). Can delete the plugin afterwards if you don’t need it.11. Tuning MySQL configurations (ADV, LOW)Usually not required (or noticeably-beneficial) for the average site but can help tremendously for large sites with high traffic and varying query lengths.You can run MySQLTuner for general recommendations or ask around the sys-admin community to see what everyone else uses.Buffer size, packet size, cache, connections, cache, stack, etc…are all among the general things to tune.Simple Linode guide.When trying out random configurations online or copying somebody else’s, please make sure their environment is similar to yours. The main distinctions are:server size, resources availablehow many clients/sites on serverhow many end users on serverhow much traffichow big are the siteswhat kind of read/write behaviorIt’s important to know whether their settings are for efficiency (high-tenant webhost) or aggressive performance (low-tenant webserver).12. Server full-page caching (ADV, HIGH)Full-page caching can help speed-up any website. But caching directly from the server is much more powerful and resource-efficient than PHP/application-level caching done through a plugin.Some Apache or NGINX servers use Varnish – ugghhh, outdated. Don’t use Varnish proxy. Just upgrade to pure-LiteSpeed or pure-NGINX stack.LiteSpeed servers can use LiteSpeed cache – powerful, many features, and comes with a handy WordPress cache plugin (called “LiteSpeed Cache”).NGINX servers can use FastCGI – great, super fast! While there’s no official NGINX cache plugin for WordPress, there are various “NGINX helper” plugins to facilitate basic cache functions (like purging).To be safe, you should disable caching on pages with forms, carts, or checkouts. Private pages (for logged-in users) CAN be cached but don’t mess with that unless you have that much private traffic and ready to spend hours configuring private cache.You can only enable server-level caching if you own or have access to the server. Otherwise, your webhost decides what caching options you have.Shared hosting usually allows all caching plugins.Managed hosting usually limits you to only their proprietary one.13. Memory object-caching (ADV, LOW-HIGH)Object-caching caches only the database queries instead of the entire page html. This technically makes it “slower” than full-page caching (since you’re not caching the entire page) but useful for speeding up dynamic pages or private pages (logged-in users, admin backend) that can’t be static-cached.Any site with lots of constantly-refreshed data on frontend, or lots of numbers and reports on backend…would stand to benefit from object caching. Mostly-static sites or low-traffic sites would not benefit from object-caching at all; don’t use it on them…it can make them slower!Redis is the gold standard in object caching now. It’s superior to the older memcache in almost every way.Memcache is only used in rare situations where Redis doesn’t work or is slower.If your data doesn’t change much, you can set longer object caching times (e.g. 60 mins and up). Longer times means fewer database queries.Otherwise, stick with the default 5-10 mins to be safe…unless you don’t mind users seeing stale data.Object caching can be managed by WordPress plugins. Most ideal if you have one cache plugin to manage both full-page caching and object caching.You can get ~25% faster object caching by using a Unix SocketUNIX sockets are run from a lower-level layer on the OSI networking model and therefore faster than standard TCP sockets.Redis and Memcache UNIX socket configuration guides for CentOS.Redis and Memcache UNIX socket configuration guides for Ubuntu.Note: with UNIX socket enabled, only one server user account (and presumably all sites by that user) can use object caching. So you can’t use this if you plan to have multiple server users deploying object cache.Some background on memory-caching…Memory-caching is the gold standard in caching, because cache runs faster from memory than than from disk. The issue is we have limited amounts of memory (most of it already used for applications) so we can’t store the entire site cache in there. It matters less nowadays anyway since server disks are so much faster now (thanks to SSD technology).Sure memory is more abundant now too but then again, applications are bigger. You may have heard of others loading their entire site into memory…some using the cache route, others by mounting their WordPress directory into memory. It works great if your site is small enough but for most people: your memory is only big enough to store database queries, anything else you want to cache will be stored on your disk.14. Use the latest HTTP protocol (BEG, HIGH)HTTP/2 loads browser requests so much faster than HTTP/1 (thanks to parallelization). It feels like 3 times faster to me.You should be using HTTP/2 or even HTTP/3 (recently released).Avoid older web servers still on the archaic HTTP/1.Check your site for HTTP/2 and HTTP/3.Using HTTP/2 requires HTTPS/SSL. If your site isn’t in HTTPS, do it now!15. Content encoding (INT, HIGH)GZIP is so 2016. Every web-server should have BROTLI compression nowadays. It’s superior to GZIP (produces smaller files AND in less time). But shockingly, BROTLI still isn’t available on all web-servers.If using BROTLI – set static compression to 4.If using GZIP – set dynamic compression to 1, static compression to 6.You can push static compression levels higher if your CPU is strong (or low-usage server) and/or your static content is cached for a long time (long expiry times). If you’re using a CDN or Cloudflare, make sure you enable BROTLI compression there as well.16. Control-panel (INT, HIGH)This issue matters only for VPS users. Control panels used to be critiqued for the initial weight they put on the server. That’s because control panels were originally designed for large dedicated servers, but have since been optimized for smaller VPS. While it’s true that having no control panel is lighter than having one, it makes day-to-day tasks harder. Their footprint is now negligible considering how useful panels can be.The best performing control panel is one that fits your needs.Allows you to pick the web server of your choice – NGINX or LiteSpeed.Easily configure redirects at server level – instead of slower PHP-level redirection plugin.Easily configure granular caching rules – choosing what and what not to cache.Easy to manage – for you or your sys-admin.Can cage users – preventing resource-hogs on high-tenant servers.Secure against hacks – as hacking attempts eat many resources.Easy to use – for you or your clients.17. Use external DNS service (INT, LOW)Lower DNS latency (small benefit)Easy to update DNS (convenience)Will using an external DNS like Cloudflare or DNS Made Easy make a world of difference in terms of webhosting speed? I think it improves lookup time but not so noticeable unless your previous DNS server was a piece of junk by cheap webhost.The main benefit for me is how quickly I can redirect things. Suppose you get hacked and need to redirect through a security proxy. Or maybe you’re switching certain aspects of your site to another server. In moments like this, having a DNS service is so convenient. You can switch things over with very little downtime, and even switch them back quickly if there’s an issue.DNS services may seem like an extra hassle to setup, but once in place they allow you to integrate new services and mitigate performance issues so much faster.18. Run WP-cron from your server (BEG, MED)Many WordPress tasks need a trigger to function. Such as sending out system emails, run backups, release scheduled posts. By default, WordPress uses a function called WP-Cron (conveniently located at yourdomain.com/wp-cron.php). It works by checking (and executing) for any pending tasks any time someone visits the website. It’s great for small sites, but terrible if you have tons of traffic (triggering many unnecessary cron-checks). Also an obvious DDOS vulnerability.The sensible thing is to disable WP-cron and use a real cron job whether from your server or an external cron service. Some cron jobs visit the website directly. Others go through the Linux directory. Use whichever one works. I think a 5-minute interval is good.19. Caging users & resource limits (ADV, MED-HIGH)Do you have many sites or clients on the same machine? Are you unable to police them all effectively? If you’re losing control of your tenants, it’s probably time to limit their resources. I’ll start you off with a few tactics below. You look up the rest.Cloudlinux & CageFS – limit CPU and memory usageServer-wide bans on cache-prebuilding, broken-link checkers, and other resource hogs.Decrease php execution time.Global configs blocking the usual offenders, bots, etc.Worst-case scenario, just split off some clients onto another server. Split them up by size, space usage, traffic amount, whatever you want.19. Caging users & resource limits (ADV, MED-HIGH)Do you have many sites or clients on the same machine? Are you unable to police them all effectively? If you’re losing control of your tenants, it’s probably time to limit their resources. I’ll start you off with a few tactics below. You look up the rest.Cloudlinux & CageFS – limit CPU and memory usageServer-wide bans on cache-prebuilding, broken-link checkers, and other resource hogs.Decrease php execution time.Global configs blocking the usual offenders, bots, etc.Worst-case scenario, just split off some clients onto another server. Split them up by size, space usage, traffic amount, whatever you want.20. Tracking down resource hogs (ADV, MED-HIGH)We often run into slow server issues with no obvious clue of where to look. Today, it’s this client. Tomorrow, it’s that client. It seems any site can be the culprit on any given day. When you have so many clients, and none of them can afford switching plugins on and off, it is really really difficult to track down the problem.Here are some ideas:Check server logs – are you being hacked? Are there excessive requests?Check server monitors – which users are hogging the CPU, memory, and bandwidth?Once you know which site it is…check WordPress error log. Run Query Monitor.Of course, it might not even happen all the time. You have to track down what users or processes were doing when the slowdown happened.Sometimes you’ll need more of a developer mentality. What plugin was updated last? Any new themes or plugins that were custom-coded? (Check for memory-exhaustive commands.) Yes, you can use applications monitors like New Relic but for me, it’s overkill. The trickiest problems are when it seems like every site is the problem. Or also when the server load is low but the sites are still slow. Good luck!In the next part of this blog series we’ll cover caching optimization for your websites, so stay tuned. For a full version of the article go to The Ultimate WordPress Speed Optimization Guide.Need an optimized WordPress hosting that meets the needs of your project? Get in touch with Jelastic for choosing the best option and receiving technical assistance while migration.Related ArticlesEnterprise WordPress Hosting: Automatic Scaling and High AvailabilityWordPress Hosting in Elastic Standalone ContainerHow to Migrate a WordPress Site to Jelastic PaaSSetup WordPress Multisite Network with Domain Mapping and CDNWebinar Summary: WordPress Cluster for Enterprise High Availability and On-Demand ScalingSubscribe to get the latest updates\nGET STARTED FOR FREE\nE-mail\nSearch\nCategoriesDevelopmentHosting BusinessMulti-CloudWordPressDatabasesJavaContainersKubernetesUse CasesNews and ReleasesSolution innodb_page_cleaners ', float_val=60.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.24738478660583496, 0.5563085675239563, 0.17297664284706116, 0.009521732106804848, 0.013808217830955982]
Choice: 0
type: 3, value: 60.0, unit: 
Done flag: False
No warmup - hint counter: 74
{'sequence': 'lower (60 sec', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.5242289900779724, 0.18574833869934082, 0.14607901871204376, 0.11095081269741058, 0.03299281746149063]}
Decision: Deciding weight of TuningHint(doc_id=35, param=<re.Match object; span=(11129, 11143), match='max_input_time'>, value=<re.Match object; span=(7, 9), match='60'>, recommendation='lower (60 sec', passage='Having a fast business website is essential for both Google ranking and overall conversion rate. Due to Kissmetrics, 40% of site visitors will abandon a page that takes three or more seconds to load. Earlier, the BBC calculated that they lost an additional 10% of users for every extra second their site took to load.\xa0In order to help our readers and customers in gaining higher speed results, we decided to publish a set of articles dedicated to the improvement of website performance using great hints from The Ultimate WordPress Speed Optimization Guide written by Johnny Nguyen.\xa0“Faster websites make more money, rank better, and improve overall user experience!” says Johnny.Today we will start with the web hosting optimization part. Each point will be marked with the level of required skills to implement and the impact it will bring.SKILL:BEGINNER – can Google and follow instructions.INTERMEDIATE – working as WordPress contractor.ADVANCED – programmer or server-admin.IMPACT:LOW – maybe 100-200ms difference. Possibly unnoticeable.MEDIUM – around 500ms difference.HIGH – 1 second difference or more.Your webhosting speed determines how fast it can process code, and how many visitors it can handle. Compare your website to a car. To make a car go faster, you either A) get a stronger engine and/or B) lighten the weight. For websites, the web-server is the “engine” and the code is the”weight”.The goal is to improve our web-server “engine” while decreasing code “weight”, ok?Changing your webhosting is one of the easiest ways to improve speed. Those of you on cheap $5/month shared webhosting will benefit the most from moving to a managed hosting service or even your own VPS. The difference will be night and day without any site changes. Moving from managed hosting to an optimized VPS or dedicated “bare metal” server will be another night-and-day jump.\xa0The difference isn’t only speed but also a matter of cost (savings). A fast server can handle more visitors than a slow one. If your server can handle double the traffic, theoretically the bill can be twice as cheap. Not a big deal for a small site but what about a huge ecommerce site with a $1k/month server bill? 50% cost reduction sounds mighty attractive!1. Choose nearby datacenter location (BEG, LOW-MED)Obviously, you should pick a server location that’s closest to your visitors. Ideally, you don’t want your DNS ping time more than 100ms from the server to your visitor’s computer. There are many implications depending on your needs.Local businesses should get a server as close to their visitors as possible. Keep it within 100ms or less, within 50ms is better. Check ping times with WonderNetwork.The USA is about 80ms from coast to coast. Canada and Mexico are close enough as well.All of Western Europe is only 40-50ms, very close.Asia is within 80ms between most countries.India/Pakistan, Australia/NZ, Africa are somewhat isolated. Local businesses there need a local datacenter. Even Singapore to Australia is borderline “far” by DNS standards (~150ms).South America can be unreliable infrastructure. For that reason, many companies in Central/South America still use US-based datacenters like in California, Texas, or Florida (Miami).If you have worldwide traffic (including Asia/Pacific) and no particular core region, I like USA west coast as perfect location for fast traffic to Europe and Asia.If you have only USA & Europe traffic and no particular core region, I like USA east coast for fast traffic to Europe.It’s also good to have a webhosting company on the same timezone as your core audience. That way they can (quickly) support or troubleshoot issues when most of your visitors are awake.Those of you thinking a CDN can make up for far server location (that’s not necessarily true!)Those of you hunting for dedicated nodes…the best is TIER-4 datacenter with four 9’s (99.9999% uptime guarantee). But good luck getting those guaranteed!Uptime calculator (99.9% uptime means 43min downtime per month)Nearest.host – cool site showing nearby server companies.2. Choose the right website hosting service (BEG, HIGH)Shared hosting ($5-30/month) – fine for small sites and low traffic up to 100k hits/month. No access to server configurations.VPS/cloud hosting ($30-300/month) – great for medium sites and traffic up to 30 million hits/month.Dedicated (bare metal) server ($200/month & up) – great for large sites with TONS of traffic.Buy the best that you can comfortably afford. A small website doesn’t need much power but it’s still noticeable when you get a better server and appreciated more than you think. Think of a new phone that opens apps just a fraction of a second quicker. You really can feel the difference and it improves user experience tremendously.Shared webhosting is usually slow because they stuff hundreds of customers/websites onto the same server (maximize profits). This increases slowdowns, unexpected crashes or server restarts, security attacks, and your email IP getting marked as spam.Shared hosting environments are also slow because they load many scripts/modules to maximize compatibility for as many users as possible. And without dedicated resources, your visitors end up waiting in line while the server is busy handling other websites first.VPS/Dedicated servers are faster because there’s more resources available per account and your resources are serving only your websites. You have more control over your environment, can configure it for your needs. VPS/dedicated can be costly or difficult to manage for regular users. There are cloud-panel services to help manage it and also fully-managed services where they take care of everything for you.Those unable to handle technical responsibilities of VPS can go for “premium shared hosting”. They don’t crowd the server as much but the performance (while better than regular shared hosting) will still be far behind a VPS.3. Choose a high performance web server (INT-ADV, HIGH)Use any web server software but Apache. The best is NGINX or LiteSpeed, or highly-optimized Apache (rare to find). The higher your traffic, the more noticeable the difference.NGINX shines at simple sites. Just set it and go. Not much settings to optimize. But once you have a complicated site, NGINX is a mixed bag. Some NGINX features aren’t easy to configure. If you have a server-admin to fine-tune, it’s great but many people don’t.LiteSpeed has more easy-accessible features than NGINX. Like when you need some things cached but not others, or dealing with server-level redirects via htaccess. LiteSpeed also has a WordPress cache plugin which NGINX doesn’t. That’s a HUGE advantage. (I personally prefer LiteSpeed.)OpenLiteSpeed is the free community version of LiteSpeed. It’s a great alternative for those wanting the free price of NGINX but the powerful LiteSpeed cache plugin.Some webhosts have the Apache+NGINX hybrid stack. I feel those are outdated now and makes for unnecessarily slower/heavier stack.If using Apache, MPM events are best (compared to worker or prefork).Keep your webserver updated. Later versions can speed up certain protocols and processes noticeably.4. Web server configuration (ADV, MED-HIGH)Most web servers come with safe/functional configurations right off the bat. Adequate for the average small site with little traffic. It’s when you get more traffic and more security attacks, or have more demanding apps that fine-tuning the configurations makes a big difference.Timeout – 30 to 60 seconds is a safe start. You can increase up to 600 or beyond if needed for long processes (import, export, backups). Keep in mind that allows poorly-coded processes or hack exploits to run out your server resources.# of child processes allowed – depends on the server environment. Default should be fine.Concurrent connections allowed – anywhere from 1-20k. Higher is not necessarily better!Keep alive – on, off, or LiteSpeed’s “smart keep-alive”. I think “on” is safer. If you have LiteSpeed, the smart keep-alive is awesome!Keep alive timeout – 3-5 seconds is a safe start. Increase if needed.How many threads, body/buffer size, workers, clients, etc….all that you can look up online. It depends on your server size and use scenario. Jump on forums and ask around or have a sys-admin configure for you. Keep in mind different admins have their own ways of configuring.The most important distinction for me is to decide whether this server should be set aggressive or conservative:AGGRESSIVE configuration – gives every site as much resources as possible. Good for low-tenant or dedicated servers.CONSERVATIVE configuration – gives every site as little resources as possible. Good for high-tenant or shared servers.5. Disable unused services (INT, HIGH)Many servers are automatically set up with all features running to make things easy for you. But they’re just like brand new computers with pre-installed software. Get rid of the ones you don’t use. Even if they don’t use much memory, they can still be bombarded by hackers and that eats resources.DNS – disable if you’re using external DNS service. (Cloudflare, DNSME, etc.)Email – disable if you’re using 3rd-party email. (G-Suite, MXroute, etc.)FTP/SFTP – disable if not using.Memcache/Redis – disable if you don’t use it.Other services – Varnish, Elastipress, etc.If you want to be OCD, scan your system for all listening ports and services.6. Remove unused server modules (ADV, LOW)Want to be even more OCD? Disable every single module not used by the server. Some of them are junk unused server stuff; others are unused Linux distro stuff. Old school Apache-compatible stacks or unoptimized control panels tend to have many unused modules enabled by default (while also not enabling ones you might need).Read documentation and check online before blindly removing or replacing them. The danger is you disable things you need (or worse, one that improves performance). You should make a list of disabled services/modules to reference later or give to a contractor when troubleshooting.7. Use the latest PHP version (INT-ADV, HIGH)The PHP version alone makes a HUGE difference.Use the latest PHP version possible! (Easily-configured from your webhosting control panel)For example, PHP 7.0 is 3 times faster than PHP 5.6.Even PHP 7.3 is 10% faster than PHP 7.2.At the time of this writing, PHP 7.4 is available.Be wary of any webhosts still using old PHP!Keeping your website PHP version updated is not only for speed but also security. The only issue is some themes or plugins may not be compatible with the latest PHP version. You’ll know because your site doesn’t work right, or looks weird. So test carefully and keep themes/plugins updated, which helps them stay compatible with the latest PHP.8. Recommended php.ini configurations (INT, MED)Most of you (on shared hosting) won’t even have access to these settings or know how to set them. But nonetheless, here are my recommendations.max_execution_time – lower (30-60 sec) is better to prevent resources hogs from lagging out the server. But you may need higher execution times for long processes like imports, exports, backups.max_input_time – lower (60 sec) is better. Increase only if you’re trying to import something that takes forever.max_input_vars – set to “1000”, unless some plugins need higher.memory_limit – try “256M” to be safe. Raise if you have heavy plugins. I like to set lower so I’m notified immediately when there are memory hogs. The “error_log” will tell you if you need more.zlib.output_compression – may or may not help. I leave it off.9. Use an updated MySQL fork version (INT-ADV, LOW)Most people only know of MySQL, which is now acquired/owned by Oracle. There’s also MariaDB (a fork of MySQL by its original creators) and Percona, and also others.MySQL 8 is much better than MySQL 5.7.But it’s better if you can use MariaDB over MySQL. Community-friendly and better performance than vanilla MySQL 5.7.Use the latest MariaDB version that you can.Whatever you do, just don’t use MySQL 5.7.What about Percona? What about the other 3rd-party MySQL-compatible forks? For most sites, it makes little difference if any. Don’t forget to backup your database before changing or upgrading MySQL.MySQL vs MariaDB vs Percona10. Convert MySQL tables from MyISAM to InnoDB (BEG, LOW)Make sure your tables are set to InnoDB instead of MyISAM.InnoDB is newer and regarded as being better overall (faster, safer).MyISAM can be faster in some scenarios (when mostly read-only).You can convert manually in phpMyAdmin or use a plugin (Servebolt Optimizer or LiteSpeed Cache). Can delete the plugin afterwards if you don’t need it.11. Tuning MySQL configurations (ADV, LOW)Usually not required (or noticeably-beneficial) for the average site but can help tremendously for large sites with high traffic and varying query lengths.You can run MySQLTuner for general recommendations or ask around the sys-admin community to see what everyone else uses.Buffer size, packet size, cache, connections, cache, stack, etc…are all among the general things to tune.Simple Linode guide.When trying out random configurations online or copying somebody else’s, please make sure their environment is similar to yours. The main distinctions are:server size, resources availablehow many clients/sites on serverhow many end users on serverhow much traffichow big are the siteswhat kind of read/write behaviorIt’s important to know whether their settings are for efficiency (high-tenant webhost) or aggressive performance (low-tenant webserver).12. Server full-page caching (ADV, HIGH)Full-page caching can help speed-up any website. But caching directly from the server is much more powerful and resource-efficient than PHP/application-level caching done through a plugin.Some Apache or NGINX servers use Varnish – ugghhh, outdated. Don’t use Varnish proxy. Just upgrade to pure-LiteSpeed or pure-NGINX stack.LiteSpeed servers can use LiteSpeed cache – powerful, many features, and comes with a handy WordPress cache plugin (called “LiteSpeed Cache”).NGINX servers can use FastCGI – great, super fast! While there’s no official NGINX cache plugin for WordPress, there are various “NGINX helper” plugins to facilitate basic cache functions (like purging).To be safe, you should disable caching on pages with forms, carts, or checkouts. Private pages (for logged-in users) CAN be cached but don’t mess with that unless you have that much private traffic and ready to spend hours configuring private cache.You can only enable server-level caching if you own or have access to the server. Otherwise, your webhost decides what caching options you have.Shared hosting usually allows all caching plugins.Managed hosting usually limits you to only their proprietary one.13. Memory object-caching (ADV, LOW-HIGH)Object-caching caches only the database queries instead of the entire page html. This technically makes it “slower” than full-page caching (since you’re not caching the entire page) but useful for speeding up dynamic pages or private pages (logged-in users, admin backend) that can’t be static-cached.Any site with lots of constantly-refreshed data on frontend, or lots of numbers and reports on backend…would stand to benefit from object caching. Mostly-static sites or low-traffic sites would not benefit from object-caching at all; don’t use it on them…it can make them slower!Redis is the gold standard in object caching now. It’s superior to the older memcache in almost every way.Memcache is only used in rare situations where Redis doesn’t work or is slower.If your data doesn’t change much, you can set longer object caching times (e.g. 60 mins and up). Longer times means fewer database queries.Otherwise, stick with the default 5-10 mins to be safe…unless you don’t mind users seeing stale data.Object caching can be managed by WordPress plugins. Most ideal if you have one cache plugin to manage both full-page caching and object caching.You can get ~25% faster object caching by using a Unix SocketUNIX sockets are run from a lower-level layer on the OSI networking model and therefore faster than standard TCP sockets.Redis and Memcache UNIX socket configuration guides for CentOS.Redis and Memcache UNIX socket configuration guides for Ubuntu.Note: with UNIX socket enabled, only one server user account (and presumably all sites by that user) can use object caching. So you can’t use this if you plan to have multiple server users deploying object cache.Some background on memory-caching…Memory-caching is the gold standard in caching, because cache runs faster from memory than than from disk. The issue is we have limited amounts of memory (most of it already used for applications) so we can’t store the entire site cache in there. It matters less nowadays anyway since server disks are so much faster now (thanks to SSD technology).Sure memory is more abundant now too but then again, applications are bigger. You may have heard of others loading their entire site into memory…some using the cache route, others by mounting their WordPress directory into memory. It works great if your site is small enough but for most people: your memory is only big enough to store database queries, anything else you want to cache will be stored on your disk.14. Use the latest HTTP protocol (BEG, HIGH)HTTP/2 loads browser requests so much faster than HTTP/1 (thanks to parallelization). It feels like 3 times faster to me.You should be using HTTP/2 or even HTTP/3 (recently released).Avoid older web servers still on the archaic HTTP/1.Check your site for HTTP/2 and HTTP/3.Using HTTP/2 requires HTTPS/SSL. If your site isn’t in HTTPS, do it now!15. Content encoding (INT, HIGH)GZIP is so 2016. Every web-server should have BROTLI compression nowadays. It’s superior to GZIP (produces smaller files AND in less time). But shockingly, BROTLI still isn’t available on all web-servers.If using BROTLI – set static compression to 4.If using GZIP – set dynamic compression to 1, static compression to 6.You can push static compression levels higher if your CPU is strong (or low-usage server) and/or your static content is cached for a long time (long expiry times). If you’re using a CDN or Cloudflare, make sure you enable BROTLI compression there as well.16. Control-panel (INT, HIGH)This issue matters only for VPS users. Control panels used to be critiqued for the initial weight they put on the server. That’s because control panels were originally designed for large dedicated servers, but have since been optimized for smaller VPS. While it’s true that having no control panel is lighter than having one, it makes day-to-day tasks harder. Their footprint is now negligible considering how useful panels can be.The best performing control panel is one that fits your needs.Allows you to pick the web server of your choice – NGINX or LiteSpeed.Easily configure redirects at server level – instead of slower PHP-level redirection plugin.Easily configure granular caching rules – choosing what and what not to cache.Easy to manage – for you or your sys-admin.Can cage users – preventing resource-hogs on high-tenant servers.Secure against hacks – as hacking attempts eat many resources.Easy to use – for you or your clients.17. Use external DNS service (INT, LOW)Lower DNS latency (small benefit)Easy to update DNS (convenience)Will using an external DNS like Cloudflare or DNS Made Easy make a world of difference in terms of webhosting speed? I think it improves lookup time but not so noticeable unless your previous DNS server was a piece of junk by cheap webhost.The main benefit for me is how quickly I can redirect things. Suppose you get hacked and need to redirect through a security proxy. Or maybe you’re switching certain aspects of your site to another server. In moments like this, having a DNS service is so convenient. You can switch things over with very little downtime, and even switch them back quickly if there’s an issue.DNS services may seem like an extra hassle to setup, but once in place they allow you to integrate new services and mitigate performance issues so much faster.18. Run WP-cron from your server (BEG, MED)Many WordPress tasks need a trigger to function. Such as sending out system emails, run backups, release scheduled posts. By default, WordPress uses a function called WP-Cron (conveniently located at yourdomain.com/wp-cron.php). It works by checking (and executing) for any pending tasks any time someone visits the website. It’s great for small sites, but terrible if you have tons of traffic (triggering many unnecessary cron-checks). Also an obvious DDOS vulnerability.The sensible thing is to disable WP-cron and use a real cron job whether from your server or an external cron service. Some cron jobs visit the website directly. Others go through the Linux directory. Use whichever one works. I think a 5-minute interval is good.19. Caging users & resource limits (ADV, MED-HIGH)Do you have many sites or clients on the same machine? Are you unable to police them all effectively? If you’re losing control of your tenants, it’s probably time to limit their resources. I’ll start you off with a few tactics below. You look up the rest.Cloudlinux & CageFS – limit CPU and memory usageServer-wide bans on cache-prebuilding, broken-link checkers, and other resource hogs.Decrease php execution time.Global configs blocking the usual offenders, bots, etc.Worst-case scenario, just split off some clients onto another server. Split them up by size, space usage, traffic amount, whatever you want.19. Caging users & resource limits (ADV, MED-HIGH)Do you have many sites or clients on the same machine? Are you unable to police them all effectively? If you’re losing control of your tenants, it’s probably time to limit their resources. I’ll start you off with a few tactics below. You look up the rest.Cloudlinux & CageFS – limit CPU and memory usageServer-wide bans on cache-prebuilding, broken-link checkers, and other resource hogs.Decrease php execution time.Global configs blocking the usual offenders, bots, etc.Worst-case scenario, just split off some clients onto another server. Split them up by size, space usage, traffic amount, whatever you want.20. Tracking down resource hogs (ADV, MED-HIGH)We often run into slow server issues with no obvious clue of where to look. Today, it’s this client. Tomorrow, it’s that client. It seems any site can be the culprit on any given day. When you have so many clients, and none of them can afford switching plugins on and off, it is really really difficult to track down the problem.Here are some ideas:Check server logs – are you being hacked? Are there excessive requests?Check server monitors – which users are hogging the CPU, memory, and bandwidth?Once you know which site it is…check WordPress error log. Run Query Monitor.Of course, it might not even happen all the time. You have to track down what users or processes were doing when the slowdown happened.Sometimes you’ll need more of a developer mentality. What plugin was updated last? Any new themes or plugins that were custom-coded? (Check for memory-exhaustive commands.) Yes, you can use applications monitors like New Relic but for me, it’s overkill. The trickiest problems are when it seems like every site is the problem. Or also when the server load is low but the sites are still slow. Good luck!In the next part of this blog series we’ll cover caching optimization for your websites, so stay tuned. For a full version of the article go to The Ultimate WordPress Speed Optimization Guide.Need an optimized WordPress hosting that meets the needs of your project? Get in touch with Jelastic for choosing the best option and receiving technical assistance while migration.Related ArticlesEnterprise WordPress Hosting: Automatic Scaling and High AvailabilityWordPress Hosting in Elastic Standalone ContainerHow to Migrate a WordPress Site to Jelastic PaaSSetup WordPress Multisite Network with Domain Mapping and CDNWebinar Summary: WordPress Cluster for Enterprise High Availability and On-Demand ScalingSubscribe to get the latest updates\nGET STARTED FOR FREE\nE-mail\nSearch\nCategoriesDevelopmentHosting BusinessMulti-CloudWordPressDatabasesJavaContainersKubernetesUse CasesNews and ReleasesSolution innodb_page_cleaners ', float_val=60.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.03299281746149063, 0.5242289900779724, 0.18574833869934082, 0.14607901871204376, 0.11095081269741058]
--- Tuning Updates ---
Minimal time (ms): 0.009358575514691214
Achieved with configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Decision: Deciding adaption of TuningHint(doc_id=35, param=<re.Match object; span=(11129, 11143), match='max_input_time'>, value=<re.Match object; span=(7, 9), match='60'>, recommendation='lower (60 sec', passage='Having a fast business website is essential for both Google ranking and overall conversion rate. Due to Kissmetrics, 40% of site visitors will abandon a page that takes three or more seconds to load. Earlier, the BBC calculated that they lost an additional 10% of users for every extra second their site took to load.\xa0In order to help our readers and customers in gaining higher speed results, we decided to publish a set of articles dedicated to the improvement of website performance using great hints from The Ultimate WordPress Speed Optimization Guide written by Johnny Nguyen.\xa0“Faster websites make more money, rank better, and improve overall user experience!” says Johnny.Today we will start with the web hosting optimization part. Each point will be marked with the level of required skills to implement and the impact it will bring.SKILL:BEGINNER – can Google and follow instructions.INTERMEDIATE – working as WordPress contractor.ADVANCED – programmer or server-admin.IMPACT:LOW – maybe 100-200ms difference. Possibly unnoticeable.MEDIUM – around 500ms difference.HIGH – 1 second difference or more.Your webhosting speed determines how fast it can process code, and how many visitors it can handle. Compare your website to a car. To make a car go faster, you either A) get a stronger engine and/or B) lighten the weight. For websites, the web-server is the “engine” and the code is the”weight”.The goal is to improve our web-server “engine” while decreasing code “weight”, ok?Changing your webhosting is one of the easiest ways to improve speed. Those of you on cheap $5/month shared webhosting will benefit the most from moving to a managed hosting service or even your own VPS. The difference will be night and day without any site changes. Moving from managed hosting to an optimized VPS or dedicated “bare metal” server will be another night-and-day jump.\xa0The difference isn’t only speed but also a matter of cost (savings). A fast server can handle more visitors than a slow one. If your server can handle double the traffic, theoretically the bill can be twice as cheap. Not a big deal for a small site but what about a huge ecommerce site with a $1k/month server bill? 50% cost reduction sounds mighty attractive!1. Choose nearby datacenter location (BEG, LOW-MED)Obviously, you should pick a server location that’s closest to your visitors. Ideally, you don’t want your DNS ping time more than 100ms from the server to your visitor’s computer. There are many implications depending on your needs.Local businesses should get a server as close to their visitors as possible. Keep it within 100ms or less, within 50ms is better. Check ping times with WonderNetwork.The USA is about 80ms from coast to coast. Canada and Mexico are close enough as well.All of Western Europe is only 40-50ms, very close.Asia is within 80ms between most countries.India/Pakistan, Australia/NZ, Africa are somewhat isolated. Local businesses there need a local datacenter. Even Singapore to Australia is borderline “far” by DNS standards (~150ms).South America can be unreliable infrastructure. For that reason, many companies in Central/South America still use US-based datacenters like in California, Texas, or Florida (Miami).If you have worldwide traffic (including Asia/Pacific) and no particular core region, I like USA west coast as perfect location for fast traffic to Europe and Asia.If you have only USA & Europe traffic and no particular core region, I like USA east coast for fast traffic to Europe.It’s also good to have a webhosting company on the same timezone as your core audience. That way they can (quickly) support or troubleshoot issues when most of your visitors are awake.Those of you thinking a CDN can make up for far server location (that’s not necessarily true!)Those of you hunting for dedicated nodes…the best is TIER-4 datacenter with four 9’s (99.9999% uptime guarantee). But good luck getting those guaranteed!Uptime calculator (99.9% uptime means 43min downtime per month)Nearest.host – cool site showing nearby server companies.2. Choose the right website hosting service (BEG, HIGH)Shared hosting ($5-30/month) – fine for small sites and low traffic up to 100k hits/month. No access to server configurations.VPS/cloud hosting ($30-300/month) – great for medium sites and traffic up to 30 million hits/month.Dedicated (bare metal) server ($200/month & up) – great for large sites with TONS of traffic.Buy the best that you can comfortably afford. A small website doesn’t need much power but it’s still noticeable when you get a better server and appreciated more than you think. Think of a new phone that opens apps just a fraction of a second quicker. You really can feel the difference and it improves user experience tremendously.Shared webhosting is usually slow because they stuff hundreds of customers/websites onto the same server (maximize profits). This increases slowdowns, unexpected crashes or server restarts, security attacks, and your email IP getting marked as spam.Shared hosting environments are also slow because they load many scripts/modules to maximize compatibility for as many users as possible. And without dedicated resources, your visitors end up waiting in line while the server is busy handling other websites first.VPS/Dedicated servers are faster because there’s more resources available per account and your resources are serving only your websites. You have more control over your environment, can configure it for your needs. VPS/dedicated can be costly or difficult to manage for regular users. There are cloud-panel services to help manage it and also fully-managed services where they take care of everything for you.Those unable to handle technical responsibilities of VPS can go for “premium shared hosting”. They don’t crowd the server as much but the performance (while better than regular shared hosting) will still be far behind a VPS.3. Choose a high performance web server (INT-ADV, HIGH)Use any web server software but Apache. The best is NGINX or LiteSpeed, or highly-optimized Apache (rare to find). The higher your traffic, the more noticeable the difference.NGINX shines at simple sites. Just set it and go. Not much settings to optimize. But once you have a complicated site, NGINX is a mixed bag. Some NGINX features aren’t easy to configure. If you have a server-admin to fine-tune, it’s great but many people don’t.LiteSpeed has more easy-accessible features than NGINX. Like when you need some things cached but not others, or dealing with server-level redirects via htaccess. LiteSpeed also has a WordPress cache plugin which NGINX doesn’t. That’s a HUGE advantage. (I personally prefer LiteSpeed.)OpenLiteSpeed is the free community version of LiteSpeed. It’s a great alternative for those wanting the free price of NGINX but the powerful LiteSpeed cache plugin.Some webhosts have the Apache+NGINX hybrid stack. I feel those are outdated now and makes for unnecessarily slower/heavier stack.If using Apache, MPM events are best (compared to worker or prefork).Keep your webserver updated. Later versions can speed up certain protocols and processes noticeably.4. Web server configuration (ADV, MED-HIGH)Most web servers come with safe/functional configurations right off the bat. Adequate for the average small site with little traffic. It’s when you get more traffic and more security attacks, or have more demanding apps that fine-tuning the configurations makes a big difference.Timeout – 30 to 60 seconds is a safe start. You can increase up to 600 or beyond if needed for long processes (import, export, backups). Keep in mind that allows poorly-coded processes or hack exploits to run out your server resources.# of child processes allowed – depends on the server environment. Default should be fine.Concurrent connections allowed – anywhere from 1-20k. Higher is not necessarily better!Keep alive – on, off, or LiteSpeed’s “smart keep-alive”. I think “on” is safer. If you have LiteSpeed, the smart keep-alive is awesome!Keep alive timeout – 3-5 seconds is a safe start. Increase if needed.How many threads, body/buffer size, workers, clients, etc….all that you can look up online. It depends on your server size and use scenario. Jump on forums and ask around or have a sys-admin configure for you. Keep in mind different admins have their own ways of configuring.The most important distinction for me is to decide whether this server should be set aggressive or conservative:AGGRESSIVE configuration – gives every site as much resources as possible. Good for low-tenant or dedicated servers.CONSERVATIVE configuration – gives every site as little resources as possible. Good for high-tenant or shared servers.5. Disable unused services (INT, HIGH)Many servers are automatically set up with all features running to make things easy for you. But they’re just like brand new computers with pre-installed software. Get rid of the ones you don’t use. Even if they don’t use much memory, they can still be bombarded by hackers and that eats resources.DNS – disable if you’re using external DNS service. (Cloudflare, DNSME, etc.)Email – disable if you’re using 3rd-party email. (G-Suite, MXroute, etc.)FTP/SFTP – disable if not using.Memcache/Redis – disable if you don’t use it.Other services – Varnish, Elastipress, etc.If you want to be OCD, scan your system for all listening ports and services.6. Remove unused server modules (ADV, LOW)Want to be even more OCD? Disable every single module not used by the server. Some of them are junk unused server stuff; others are unused Linux distro stuff. Old school Apache-compatible stacks or unoptimized control panels tend to have many unused modules enabled by default (while also not enabling ones you might need).Read documentation and check online before blindly removing or replacing them. The danger is you disable things you need (or worse, one that improves performance). You should make a list of disabled services/modules to reference later or give to a contractor when troubleshooting.7. Use the latest PHP version (INT-ADV, HIGH)The PHP version alone makes a HUGE difference.Use the latest PHP version possible! (Easily-configured from your webhosting control panel)For example, PHP 7.0 is 3 times faster than PHP 5.6.Even PHP 7.3 is 10% faster than PHP 7.2.At the time of this writing, PHP 7.4 is available.Be wary of any webhosts still using old PHP!Keeping your website PHP version updated is not only for speed but also security. The only issue is some themes or plugins may not be compatible with the latest PHP version. You’ll know because your site doesn’t work right, or looks weird. So test carefully and keep themes/plugins updated, which helps them stay compatible with the latest PHP.8. Recommended php.ini configurations (INT, MED)Most of you (on shared hosting) won’t even have access to these settings or know how to set them. But nonetheless, here are my recommendations.max_execution_time – lower (30-60 sec) is better to prevent resources hogs from lagging out the server. But you may need higher execution times for long processes like imports, exports, backups.max_input_time – lower (60 sec) is better. Increase only if you’re trying to import something that takes forever.max_input_vars – set to “1000”, unless some plugins need higher.memory_limit – try “256M” to be safe. Raise if you have heavy plugins. I like to set lower so I’m notified immediately when there are memory hogs. The “error_log” will tell you if you need more.zlib.output_compression – may or may not help. I leave it off.9. Use an updated MySQL fork version (INT-ADV, LOW)Most people only know of MySQL, which is now acquired/owned by Oracle. There’s also MariaDB (a fork of MySQL by its original creators) and Percona, and also others.MySQL 8 is much better than MySQL 5.7.But it’s better if you can use MariaDB over MySQL. Community-friendly and better performance than vanilla MySQL 5.7.Use the latest MariaDB version that you can.Whatever you do, just don’t use MySQL 5.7.What about Percona? What about the other 3rd-party MySQL-compatible forks? For most sites, it makes little difference if any. Don’t forget to backup your database before changing or upgrading MySQL.MySQL vs MariaDB vs Percona10. Convert MySQL tables from MyISAM to InnoDB (BEG, LOW)Make sure your tables are set to InnoDB instead of MyISAM.InnoDB is newer and regarded as being better overall (faster, safer).MyISAM can be faster in some scenarios (when mostly read-only).You can convert manually in phpMyAdmin or use a plugin (Servebolt Optimizer or LiteSpeed Cache). Can delete the plugin afterwards if you don’t need it.11. Tuning MySQL configurations (ADV, LOW)Usually not required (or noticeably-beneficial) for the average site but can help tremendously for large sites with high traffic and varying query lengths.You can run MySQLTuner for general recommendations or ask around the sys-admin community to see what everyone else uses.Buffer size, packet size, cache, connections, cache, stack, etc…are all among the general things to tune.Simple Linode guide.When trying out random configurations online or copying somebody else’s, please make sure their environment is similar to yours. The main distinctions are:server size, resources availablehow many clients/sites on serverhow many end users on serverhow much traffichow big are the siteswhat kind of read/write behaviorIt’s important to know whether their settings are for efficiency (high-tenant webhost) or aggressive performance (low-tenant webserver).12. Server full-page caching (ADV, HIGH)Full-page caching can help speed-up any website. But caching directly from the server is much more powerful and resource-efficient than PHP/application-level caching done through a plugin.Some Apache or NGINX servers use Varnish – ugghhh, outdated. Don’t use Varnish proxy. Just upgrade to pure-LiteSpeed or pure-NGINX stack.LiteSpeed servers can use LiteSpeed cache – powerful, many features, and comes with a handy WordPress cache plugin (called “LiteSpeed Cache”).NGINX servers can use FastCGI – great, super fast! While there’s no official NGINX cache plugin for WordPress, there are various “NGINX helper” plugins to facilitate basic cache functions (like purging).To be safe, you should disable caching on pages with forms, carts, or checkouts. Private pages (for logged-in users) CAN be cached but don’t mess with that unless you have that much private traffic and ready to spend hours configuring private cache.You can only enable server-level caching if you own or have access to the server. Otherwise, your webhost decides what caching options you have.Shared hosting usually allows all caching plugins.Managed hosting usually limits you to only their proprietary one.13. Memory object-caching (ADV, LOW-HIGH)Object-caching caches only the database queries instead of the entire page html. This technically makes it “slower” than full-page caching (since you’re not caching the entire page) but useful for speeding up dynamic pages or private pages (logged-in users, admin backend) that can’t be static-cached.Any site with lots of constantly-refreshed data on frontend, or lots of numbers and reports on backend…would stand to benefit from object caching. Mostly-static sites or low-traffic sites would not benefit from object-caching at all; don’t use it on them…it can make them slower!Redis is the gold standard in object caching now. It’s superior to the older memcache in almost every way.Memcache is only used in rare situations where Redis doesn’t work or is slower.If your data doesn’t change much, you can set longer object caching times (e.g. 60 mins and up). Longer times means fewer database queries.Otherwise, stick with the default 5-10 mins to be safe…unless you don’t mind users seeing stale data.Object caching can be managed by WordPress plugins. Most ideal if you have one cache plugin to manage both full-page caching and object caching.You can get ~25% faster object caching by using a Unix SocketUNIX sockets are run from a lower-level layer on the OSI networking model and therefore faster than standard TCP sockets.Redis and Memcache UNIX socket configuration guides for CentOS.Redis and Memcache UNIX socket configuration guides for Ubuntu.Note: with UNIX socket enabled, only one server user account (and presumably all sites by that user) can use object caching. So you can’t use this if you plan to have multiple server users deploying object cache.Some background on memory-caching…Memory-caching is the gold standard in caching, because cache runs faster from memory than than from disk. The issue is we have limited amounts of memory (most of it already used for applications) so we can’t store the entire site cache in there. It matters less nowadays anyway since server disks are so much faster now (thanks to SSD technology).Sure memory is more abundant now too but then again, applications are bigger. You may have heard of others loading their entire site into memory…some using the cache route, others by mounting their WordPress directory into memory. It works great if your site is small enough but for most people: your memory is only big enough to store database queries, anything else you want to cache will be stored on your disk.14. Use the latest HTTP protocol (BEG, HIGH)HTTP/2 loads browser requests so much faster than HTTP/1 (thanks to parallelization). It feels like 3 times faster to me.You should be using HTTP/2 or even HTTP/3 (recently released).Avoid older web servers still on the archaic HTTP/1.Check your site for HTTP/2 and HTTP/3.Using HTTP/2 requires HTTPS/SSL. If your site isn’t in HTTPS, do it now!15. Content encoding (INT, HIGH)GZIP is so 2016. Every web-server should have BROTLI compression nowadays. It’s superior to GZIP (produces smaller files AND in less time). But shockingly, BROTLI still isn’t available on all web-servers.If using BROTLI – set static compression to 4.If using GZIP – set dynamic compression to 1, static compression to 6.You can push static compression levels higher if your CPU is strong (or low-usage server) and/or your static content is cached for a long time (long expiry times). If you’re using a CDN or Cloudflare, make sure you enable BROTLI compression there as well.16. Control-panel (INT, HIGH)This issue matters only for VPS users. Control panels used to be critiqued for the initial weight they put on the server. That’s because control panels were originally designed for large dedicated servers, but have since been optimized for smaller VPS. While it’s true that having no control panel is lighter than having one, it makes day-to-day tasks harder. Their footprint is now negligible considering how useful panels can be.The best performing control panel is one that fits your needs.Allows you to pick the web server of your choice – NGINX or LiteSpeed.Easily configure redirects at server level – instead of slower PHP-level redirection plugin.Easily configure granular caching rules – choosing what and what not to cache.Easy to manage – for you or your sys-admin.Can cage users – preventing resource-hogs on high-tenant servers.Secure against hacks – as hacking attempts eat many resources.Easy to use – for you or your clients.17. Use external DNS service (INT, LOW)Lower DNS latency (small benefit)Easy to update DNS (convenience)Will using an external DNS like Cloudflare or DNS Made Easy make a world of difference in terms of webhosting speed? I think it improves lookup time but not so noticeable unless your previous DNS server was a piece of junk by cheap webhost.The main benefit for me is how quickly I can redirect things. Suppose you get hacked and need to redirect through a security proxy. Or maybe you’re switching certain aspects of your site to another server. In moments like this, having a DNS service is so convenient. You can switch things over with very little downtime, and even switch them back quickly if there’s an issue.DNS services may seem like an extra hassle to setup, but once in place they allow you to integrate new services and mitigate performance issues so much faster.18. Run WP-cron from your server (BEG, MED)Many WordPress tasks need a trigger to function. Such as sending out system emails, run backups, release scheduled posts. By default, WordPress uses a function called WP-Cron (conveniently located at yourdomain.com/wp-cron.php). It works by checking (and executing) for any pending tasks any time someone visits the website. It’s great for small sites, but terrible if you have tons of traffic (triggering many unnecessary cron-checks). Also an obvious DDOS vulnerability.The sensible thing is to disable WP-cron and use a real cron job whether from your server or an external cron service. Some cron jobs visit the website directly. Others go through the Linux directory. Use whichever one works. I think a 5-minute interval is good.19. Caging users & resource limits (ADV, MED-HIGH)Do you have many sites or clients on the same machine? Are you unable to police them all effectively? If you’re losing control of your tenants, it’s probably time to limit their resources. I’ll start you off with a few tactics below. You look up the rest.Cloudlinux & CageFS – limit CPU and memory usageServer-wide bans on cache-prebuilding, broken-link checkers, and other resource hogs.Decrease php execution time.Global configs blocking the usual offenders, bots, etc.Worst-case scenario, just split off some clients onto another server. Split them up by size, space usage, traffic amount, whatever you want.19. Caging users & resource limits (ADV, MED-HIGH)Do you have many sites or clients on the same machine? Are you unable to police them all effectively? If you’re losing control of your tenants, it’s probably time to limit their resources. I’ll start you off with a few tactics below. You look up the rest.Cloudlinux & CageFS – limit CPU and memory usageServer-wide bans on cache-prebuilding, broken-link checkers, and other resource hogs.Decrease php execution time.Global configs blocking the usual offenders, bots, etc.Worst-case scenario, just split off some clients onto another server. Split them up by size, space usage, traffic amount, whatever you want.20. Tracking down resource hogs (ADV, MED-HIGH)We often run into slow server issues with no obvious clue of where to look. Today, it’s this client. Tomorrow, it’s that client. It seems any site can be the culprit on any given day. When you have so many clients, and none of them can afford switching plugins on and off, it is really really difficult to track down the problem.Here are some ideas:Check server logs – are you being hacked? Are there excessive requests?Check server monitors – which users are hogging the CPU, memory, and bandwidth?Once you know which site it is…check WordPress error log. Run Query Monitor.Of course, it might not even happen all the time. You have to track down what users or processes were doing when the slowdown happened.Sometimes you’ll need more of a developer mentality. What plugin was updated last? Any new themes or plugins that were custom-coded? (Check for memory-exhaustive commands.) Yes, you can use applications monitors like New Relic but for me, it’s overkill. The trickiest problems are when it seems like every site is the problem. Or also when the server load is low but the sites are still slow. Good luck!In the next part of this blog series we’ll cover caching optimization for your websites, so stay tuned. For a full version of the article go to The Ultimate WordPress Speed Optimization Guide.Need an optimized WordPress hosting that meets the needs of your project? Get in touch with Jelastic for choosing the best option and receiving technical assistance while migration.Related ArticlesEnterprise WordPress Hosting: Automatic Scaling and High AvailabilityWordPress Hosting in Elastic Standalone ContainerHow to Migrate a WordPress Site to Jelastic PaaSSetup WordPress Multisite Network with Domain Mapping and CDNWebinar Summary: WordPress Cluster for Enterprise High Availability and On-Demand ScalingSubscribe to get the latest updates\nGET STARTED FOR FREE\nE-mail\nSearch\nCategoriesDevelopmentHosting BusinessMulti-CloudWordPressDatabasesJavaContainersKubernetesUse CasesNews and ReleasesSolution innodb_page_cleaners ', float_val=60.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.24738478660583496, 0.5563085675239563, 0.17297664284706116, 0.009521732106804848, 0.013808217830955982]
Choice: 1
type: 3, value: 60.0, unit: 
Done flag: False
Decision: Deciding weight of TuningHint(doc_id=35, param=<re.Match object; span=(11129, 11143), match='max_input_time'>, value=<re.Match object; span=(7, 9), match='60'>, recommendation='lower (60 sec', passage='Having a fast business website is essential for both Google ranking and overall conversion rate. Due to Kissmetrics, 40% of site visitors will abandon a page that takes three or more seconds to load. Earlier, the BBC calculated that they lost an additional 10% of users for every extra second their site took to load.\xa0In order to help our readers and customers in gaining higher speed results, we decided to publish a set of articles dedicated to the improvement of website performance using great hints from The Ultimate WordPress Speed Optimization Guide written by Johnny Nguyen.\xa0“Faster websites make more money, rank better, and improve overall user experience!” says Johnny.Today we will start with the web hosting optimization part. Each point will be marked with the level of required skills to implement and the impact it will bring.SKILL:BEGINNER – can Google and follow instructions.INTERMEDIATE – working as WordPress contractor.ADVANCED – programmer or server-admin.IMPACT:LOW – maybe 100-200ms difference. Possibly unnoticeable.MEDIUM – around 500ms difference.HIGH – 1 second difference or more.Your webhosting speed determines how fast it can process code, and how many visitors it can handle. Compare your website to a car. To make a car go faster, you either A) get a stronger engine and/or B) lighten the weight. For websites, the web-server is the “engine” and the code is the”weight”.The goal is to improve our web-server “engine” while decreasing code “weight”, ok?Changing your webhosting is one of the easiest ways to improve speed. Those of you on cheap $5/month shared webhosting will benefit the most from moving to a managed hosting service or even your own VPS. The difference will be night and day without any site changes. Moving from managed hosting to an optimized VPS or dedicated “bare metal” server will be another night-and-day jump.\xa0The difference isn’t only speed but also a matter of cost (savings). A fast server can handle more visitors than a slow one. If your server can handle double the traffic, theoretically the bill can be twice as cheap. Not a big deal for a small site but what about a huge ecommerce site with a $1k/month server bill? 50% cost reduction sounds mighty attractive!1. Choose nearby datacenter location (BEG, LOW-MED)Obviously, you should pick a server location that’s closest to your visitors. Ideally, you don’t want your DNS ping time more than 100ms from the server to your visitor’s computer. There are many implications depending on your needs.Local businesses should get a server as close to their visitors as possible. Keep it within 100ms or less, within 50ms is better. Check ping times with WonderNetwork.The USA is about 80ms from coast to coast. Canada and Mexico are close enough as well.All of Western Europe is only 40-50ms, very close.Asia is within 80ms between most countries.India/Pakistan, Australia/NZ, Africa are somewhat isolated. Local businesses there need a local datacenter. Even Singapore to Australia is borderline “far” by DNS standards (~150ms).South America can be unreliable infrastructure. For that reason, many companies in Central/South America still use US-based datacenters like in California, Texas, or Florida (Miami).If you have worldwide traffic (including Asia/Pacific) and no particular core region, I like USA west coast as perfect location for fast traffic to Europe and Asia.If you have only USA & Europe traffic and no particular core region, I like USA east coast for fast traffic to Europe.It’s also good to have a webhosting company on the same timezone as your core audience. That way they can (quickly) support or troubleshoot issues when most of your visitors are awake.Those of you thinking a CDN can make up for far server location (that’s not necessarily true!)Those of you hunting for dedicated nodes…the best is TIER-4 datacenter with four 9’s (99.9999% uptime guarantee). But good luck getting those guaranteed!Uptime calculator (99.9% uptime means 43min downtime per month)Nearest.host – cool site showing nearby server companies.2. Choose the right website hosting service (BEG, HIGH)Shared hosting ($5-30/month) – fine for small sites and low traffic up to 100k hits/month. No access to server configurations.VPS/cloud hosting ($30-300/month) – great for medium sites and traffic up to 30 million hits/month.Dedicated (bare metal) server ($200/month & up) – great for large sites with TONS of traffic.Buy the best that you can comfortably afford. A small website doesn’t need much power but it’s still noticeable when you get a better server and appreciated more than you think. Think of a new phone that opens apps just a fraction of a second quicker. You really can feel the difference and it improves user experience tremendously.Shared webhosting is usually slow because they stuff hundreds of customers/websites onto the same server (maximize profits). This increases slowdowns, unexpected crashes or server restarts, security attacks, and your email IP getting marked as spam.Shared hosting environments are also slow because they load many scripts/modules to maximize compatibility for as many users as possible. And without dedicated resources, your visitors end up waiting in line while the server is busy handling other websites first.VPS/Dedicated servers are faster because there’s more resources available per account and your resources are serving only your websites. You have more control over your environment, can configure it for your needs. VPS/dedicated can be costly or difficult to manage for regular users. There are cloud-panel services to help manage it and also fully-managed services where they take care of everything for you.Those unable to handle technical responsibilities of VPS can go for “premium shared hosting”. They don’t crowd the server as much but the performance (while better than regular shared hosting) will still be far behind a VPS.3. Choose a high performance web server (INT-ADV, HIGH)Use any web server software but Apache. The best is NGINX or LiteSpeed, or highly-optimized Apache (rare to find). The higher your traffic, the more noticeable the difference.NGINX shines at simple sites. Just set it and go. Not much settings to optimize. But once you have a complicated site, NGINX is a mixed bag. Some NGINX features aren’t easy to configure. If you have a server-admin to fine-tune, it’s great but many people don’t.LiteSpeed has more easy-accessible features than NGINX. Like when you need some things cached but not others, or dealing with server-level redirects via htaccess. LiteSpeed also has a WordPress cache plugin which NGINX doesn’t. That’s a HUGE advantage. (I personally prefer LiteSpeed.)OpenLiteSpeed is the free community version of LiteSpeed. It’s a great alternative for those wanting the free price of NGINX but the powerful LiteSpeed cache plugin.Some webhosts have the Apache+NGINX hybrid stack. I feel those are outdated now and makes for unnecessarily slower/heavier stack.If using Apache, MPM events are best (compared to worker or prefork).Keep your webserver updated. Later versions can speed up certain protocols and processes noticeably.4. Web server configuration (ADV, MED-HIGH)Most web servers come with safe/functional configurations right off the bat. Adequate for the average small site with little traffic. It’s when you get more traffic and more security attacks, or have more demanding apps that fine-tuning the configurations makes a big difference.Timeout – 30 to 60 seconds is a safe start. You can increase up to 600 or beyond if needed for long processes (import, export, backups). Keep in mind that allows poorly-coded processes or hack exploits to run out your server resources.# of child processes allowed – depends on the server environment. Default should be fine.Concurrent connections allowed – anywhere from 1-20k. Higher is not necessarily better!Keep alive – on, off, or LiteSpeed’s “smart keep-alive”. I think “on” is safer. If you have LiteSpeed, the smart keep-alive is awesome!Keep alive timeout – 3-5 seconds is a safe start. Increase if needed.How many threads, body/buffer size, workers, clients, etc….all that you can look up online. It depends on your server size and use scenario. Jump on forums and ask around or have a sys-admin configure for you. Keep in mind different admins have their own ways of configuring.The most important distinction for me is to decide whether this server should be set aggressive or conservative:AGGRESSIVE configuration – gives every site as much resources as possible. Good for low-tenant or dedicated servers.CONSERVATIVE configuration – gives every site as little resources as possible. Good for high-tenant or shared servers.5. Disable unused services (INT, HIGH)Many servers are automatically set up with all features running to make things easy for you. But they’re just like brand new computers with pre-installed software. Get rid of the ones you don’t use. Even if they don’t use much memory, they can still be bombarded by hackers and that eats resources.DNS – disable if you’re using external DNS service. (Cloudflare, DNSME, etc.)Email – disable if you’re using 3rd-party email. (G-Suite, MXroute, etc.)FTP/SFTP – disable if not using.Memcache/Redis – disable if you don’t use it.Other services – Varnish, Elastipress, etc.If you want to be OCD, scan your system for all listening ports and services.6. Remove unused server modules (ADV, LOW)Want to be even more OCD? Disable every single module not used by the server. Some of them are junk unused server stuff; others are unused Linux distro stuff. Old school Apache-compatible stacks or unoptimized control panels tend to have many unused modules enabled by default (while also not enabling ones you might need).Read documentation and check online before blindly removing or replacing them. The danger is you disable things you need (or worse, one that improves performance). You should make a list of disabled services/modules to reference later or give to a contractor when troubleshooting.7. Use the latest PHP version (INT-ADV, HIGH)The PHP version alone makes a HUGE difference.Use the latest PHP version possible! (Easily-configured from your webhosting control panel)For example, PHP 7.0 is 3 times faster than PHP 5.6.Even PHP 7.3 is 10% faster than PHP 7.2.At the time of this writing, PHP 7.4 is available.Be wary of any webhosts still using old PHP!Keeping your website PHP version updated is not only for speed but also security. The only issue is some themes or plugins may not be compatible with the latest PHP version. You’ll know because your site doesn’t work right, or looks weird. So test carefully and keep themes/plugins updated, which helps them stay compatible with the latest PHP.8. Recommended php.ini configurations (INT, MED)Most of you (on shared hosting) won’t even have access to these settings or know how to set them. But nonetheless, here are my recommendations.max_execution_time – lower (30-60 sec) is better to prevent resources hogs from lagging out the server. But you may need higher execution times for long processes like imports, exports, backups.max_input_time – lower (60 sec) is better. Increase only if you’re trying to import something that takes forever.max_input_vars – set to “1000”, unless some plugins need higher.memory_limit – try “256M” to be safe. Raise if you have heavy plugins. I like to set lower so I’m notified immediately when there are memory hogs. The “error_log” will tell you if you need more.zlib.output_compression – may or may not help. I leave it off.9. Use an updated MySQL fork version (INT-ADV, LOW)Most people only know of MySQL, which is now acquired/owned by Oracle. There’s also MariaDB (a fork of MySQL by its original creators) and Percona, and also others.MySQL 8 is much better than MySQL 5.7.But it’s better if you can use MariaDB over MySQL. Community-friendly and better performance than vanilla MySQL 5.7.Use the latest MariaDB version that you can.Whatever you do, just don’t use MySQL 5.7.What about Percona? What about the other 3rd-party MySQL-compatible forks? For most sites, it makes little difference if any. Don’t forget to backup your database before changing or upgrading MySQL.MySQL vs MariaDB vs Percona10. Convert MySQL tables from MyISAM to InnoDB (BEG, LOW)Make sure your tables are set to InnoDB instead of MyISAM.InnoDB is newer and regarded as being better overall (faster, safer).MyISAM can be faster in some scenarios (when mostly read-only).You can convert manually in phpMyAdmin or use a plugin (Servebolt Optimizer or LiteSpeed Cache). Can delete the plugin afterwards if you don’t need it.11. Tuning MySQL configurations (ADV, LOW)Usually not required (or noticeably-beneficial) for the average site but can help tremendously for large sites with high traffic and varying query lengths.You can run MySQLTuner for general recommendations or ask around the sys-admin community to see what everyone else uses.Buffer size, packet size, cache, connections, cache, stack, etc…are all among the general things to tune.Simple Linode guide.When trying out random configurations online or copying somebody else’s, please make sure their environment is similar to yours. The main distinctions are:server size, resources availablehow many clients/sites on serverhow many end users on serverhow much traffichow big are the siteswhat kind of read/write behaviorIt’s important to know whether their settings are for efficiency (high-tenant webhost) or aggressive performance (low-tenant webserver).12. Server full-page caching (ADV, HIGH)Full-page caching can help speed-up any website. But caching directly from the server is much more powerful and resource-efficient than PHP/application-level caching done through a plugin.Some Apache or NGINX servers use Varnish – ugghhh, outdated. Don’t use Varnish proxy. Just upgrade to pure-LiteSpeed or pure-NGINX stack.LiteSpeed servers can use LiteSpeed cache – powerful, many features, and comes with a handy WordPress cache plugin (called “LiteSpeed Cache”).NGINX servers can use FastCGI – great, super fast! While there’s no official NGINX cache plugin for WordPress, there are various “NGINX helper” plugins to facilitate basic cache functions (like purging).To be safe, you should disable caching on pages with forms, carts, or checkouts. Private pages (for logged-in users) CAN be cached but don’t mess with that unless you have that much private traffic and ready to spend hours configuring private cache.You can only enable server-level caching if you own or have access to the server. Otherwise, your webhost decides what caching options you have.Shared hosting usually allows all caching plugins.Managed hosting usually limits you to only their proprietary one.13. Memory object-caching (ADV, LOW-HIGH)Object-caching caches only the database queries instead of the entire page html. This technically makes it “slower” than full-page caching (since you’re not caching the entire page) but useful for speeding up dynamic pages or private pages (logged-in users, admin backend) that can’t be static-cached.Any site with lots of constantly-refreshed data on frontend, or lots of numbers and reports on backend…would stand to benefit from object caching. Mostly-static sites or low-traffic sites would not benefit from object-caching at all; don’t use it on them…it can make them slower!Redis is the gold standard in object caching now. It’s superior to the older memcache in almost every way.Memcache is only used in rare situations where Redis doesn’t work or is slower.If your data doesn’t change much, you can set longer object caching times (e.g. 60 mins and up). Longer times means fewer database queries.Otherwise, stick with the default 5-10 mins to be safe…unless you don’t mind users seeing stale data.Object caching can be managed by WordPress plugins. Most ideal if you have one cache plugin to manage both full-page caching and object caching.You can get ~25% faster object caching by using a Unix SocketUNIX sockets are run from a lower-level layer on the OSI networking model and therefore faster than standard TCP sockets.Redis and Memcache UNIX socket configuration guides for CentOS.Redis and Memcache UNIX socket configuration guides for Ubuntu.Note: with UNIX socket enabled, only one server user account (and presumably all sites by that user) can use object caching. So you can’t use this if you plan to have multiple server users deploying object cache.Some background on memory-caching…Memory-caching is the gold standard in caching, because cache runs faster from memory than than from disk. The issue is we have limited amounts of memory (most of it already used for applications) so we can’t store the entire site cache in there. It matters less nowadays anyway since server disks are so much faster now (thanks to SSD technology).Sure memory is more abundant now too but then again, applications are bigger. You may have heard of others loading their entire site into memory…some using the cache route, others by mounting their WordPress directory into memory. It works great if your site is small enough but for most people: your memory is only big enough to store database queries, anything else you want to cache will be stored on your disk.14. Use the latest HTTP protocol (BEG, HIGH)HTTP/2 loads browser requests so much faster than HTTP/1 (thanks to parallelization). It feels like 3 times faster to me.You should be using HTTP/2 or even HTTP/3 (recently released).Avoid older web servers still on the archaic HTTP/1.Check your site for HTTP/2 and HTTP/3.Using HTTP/2 requires HTTPS/SSL. If your site isn’t in HTTPS, do it now!15. Content encoding (INT, HIGH)GZIP is so 2016. Every web-server should have BROTLI compression nowadays. It’s superior to GZIP (produces smaller files AND in less time). But shockingly, BROTLI still isn’t available on all web-servers.If using BROTLI – set static compression to 4.If using GZIP – set dynamic compression to 1, static compression to 6.You can push static compression levels higher if your CPU is strong (or low-usage server) and/or your static content is cached for a long time (long expiry times). If you’re using a CDN or Cloudflare, make sure you enable BROTLI compression there as well.16. Control-panel (INT, HIGH)This issue matters only for VPS users. Control panels used to be critiqued for the initial weight they put on the server. That’s because control panels were originally designed for large dedicated servers, but have since been optimized for smaller VPS. While it’s true that having no control panel is lighter than having one, it makes day-to-day tasks harder. Their footprint is now negligible considering how useful panels can be.The best performing control panel is one that fits your needs.Allows you to pick the web server of your choice – NGINX or LiteSpeed.Easily configure redirects at server level – instead of slower PHP-level redirection plugin.Easily configure granular caching rules – choosing what and what not to cache.Easy to manage – for you or your sys-admin.Can cage users – preventing resource-hogs on high-tenant servers.Secure against hacks – as hacking attempts eat many resources.Easy to use – for you or your clients.17. Use external DNS service (INT, LOW)Lower DNS latency (small benefit)Easy to update DNS (convenience)Will using an external DNS like Cloudflare or DNS Made Easy make a world of difference in terms of webhosting speed? I think it improves lookup time but not so noticeable unless your previous DNS server was a piece of junk by cheap webhost.The main benefit for me is how quickly I can redirect things. Suppose you get hacked and need to redirect through a security proxy. Or maybe you’re switching certain aspects of your site to another server. In moments like this, having a DNS service is so convenient. You can switch things over with very little downtime, and even switch them back quickly if there’s an issue.DNS services may seem like an extra hassle to setup, but once in place they allow you to integrate new services and mitigate performance issues so much faster.18. Run WP-cron from your server (BEG, MED)Many WordPress tasks need a trigger to function. Such as sending out system emails, run backups, release scheduled posts. By default, WordPress uses a function called WP-Cron (conveniently located at yourdomain.com/wp-cron.php). It works by checking (and executing) for any pending tasks any time someone visits the website. It’s great for small sites, but terrible if you have tons of traffic (triggering many unnecessary cron-checks). Also an obvious DDOS vulnerability.The sensible thing is to disable WP-cron and use a real cron job whether from your server or an external cron service. Some cron jobs visit the website directly. Others go through the Linux directory. Use whichever one works. I think a 5-minute interval is good.19. Caging users & resource limits (ADV, MED-HIGH)Do you have many sites or clients on the same machine? Are you unable to police them all effectively? If you’re losing control of your tenants, it’s probably time to limit their resources. I’ll start you off with a few tactics below. You look up the rest.Cloudlinux & CageFS – limit CPU and memory usageServer-wide bans on cache-prebuilding, broken-link checkers, and other resource hogs.Decrease php execution time.Global configs blocking the usual offenders, bots, etc.Worst-case scenario, just split off some clients onto another server. Split them up by size, space usage, traffic amount, whatever you want.19. Caging users & resource limits (ADV, MED-HIGH)Do you have many sites or clients on the same machine? Are you unable to police them all effectively? If you’re losing control of your tenants, it’s probably time to limit their resources. I’ll start you off with a few tactics below. You look up the rest.Cloudlinux & CageFS – limit CPU and memory usageServer-wide bans on cache-prebuilding, broken-link checkers, and other resource hogs.Decrease php execution time.Global configs blocking the usual offenders, bots, etc.Worst-case scenario, just split off some clients onto another server. Split them up by size, space usage, traffic amount, whatever you want.20. Tracking down resource hogs (ADV, MED-HIGH)We often run into slow server issues with no obvious clue of where to look. Today, it’s this client. Tomorrow, it’s that client. It seems any site can be the culprit on any given day. When you have so many clients, and none of them can afford switching plugins on and off, it is really really difficult to track down the problem.Here are some ideas:Check server logs – are you being hacked? Are there excessive requests?Check server monitors – which users are hogging the CPU, memory, and bandwidth?Once you know which site it is…check WordPress error log. Run Query Monitor.Of course, it might not even happen all the time. You have to track down what users or processes were doing when the slowdown happened.Sometimes you’ll need more of a developer mentality. What plugin was updated last? Any new themes or plugins that were custom-coded? (Check for memory-exhaustive commands.) Yes, you can use applications monitors like New Relic but for me, it’s overkill. The trickiest problems are when it seems like every site is the problem. Or also when the server load is low but the sites are still slow. Good luck!In the next part of this blog series we’ll cover caching optimization for your websites, so stay tuned. For a full version of the article go to The Ultimate WordPress Speed Optimization Guide.Need an optimized WordPress hosting that meets the needs of your project? Get in touch with Jelastic for choosing the best option and receiving technical assistance while migration.Related ArticlesEnterprise WordPress Hosting: Automatic Scaling and High AvailabilityWordPress Hosting in Elastic Standalone ContainerHow to Migrate a WordPress Site to Jelastic PaaSSetup WordPress Multisite Network with Domain Mapping and CDNWebinar Summary: WordPress Cluster for Enterprise High Availability and On-Demand ScalingSubscribe to get the latest updates\nGET STARTED FOR FREE\nE-mail\nSearch\nCategoriesDevelopmentHosting BusinessMulti-CloudWordPressDatabasesJavaContainersKubernetesUse CasesNews and ReleasesSolution innodb_page_cleaners ', float_val=60.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.03299281746149063, 0.5242289900779724, 0.18574833869934082, 0.14607901871204376, 0.11095081269741058]
Choice: 1
Trying assigning max_input_time to 30
Assignment ('max_input_time', '30') was rejected
Hint counter: 75
Episode hint counter before: 4
Episode hint counter: 5
Hints per episode: 5
Episode finished!
Done flag: True
Finalizing episode!
Weighted hints: defaultdict(<function NlpTuningEnv._finalize_episode.<locals>.<lambda> at 0x7f86e0cc1830>, {('table_open_cache', '1600'): 4, ('table_open_cache', '1024'): 16, ('max_input_vars', '500'): 8})
Selected configurations: [{'table_open_cache': '1024', 'max_input_vars': '500'}, {'table_open_cache': '1600', 'max_input_vars': '500'}]
Trying configuration: {'table_open_cache': '1024', 'max_input_vars': '500'}
--- Tuning Updates ---
Minimal time (ms): 0.009358575514691214
Achieved with configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Reward 0.05326201826747334 with {'table_open_cache': '1024', 'max_input_vars': '500'}
Trying configuration: {'table_open_cache': '1600', 'max_input_vars': '500'}
--- Tuning Updates ---
Minimal time (ms): 0.009358575514691214
Achieved with configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Reward 0.10025609386351042 with {'table_open_cache': '1600', 'max_input_vars': '500'}
Obtained 0.10025609386351042 by configuration {'table_open_cache': '1600', 'max_input_vars': '500'}
Achieved unscaled reward of 0.10025609386351042 using {'table_open_cache': '1600', 'max_input_vars': '500'}.
No warmup - hint counter: 75
{'sequence': 'lower (60 sec)', 'labels': ['Decrease recommendation', 'Decrease recommendation strongly', 'Use recommendation', 'Increase recommendation strongly', 'Increase recommendation'], 'scores': [0.6099311113357544, 0.2210993766784668, 0.14942803978919983, 0.012214303947985172, 0.007327113766223192]}
Decision: Deciding adaption of TuningHint(doc_id=77, param=<re.Match object; span=(194, 208), match='max_input_time'>, value=<re.Match object; span=(7, 9), match='60'>, recommendation='lower (60 sec)', passage='max_execution_time – lower (30-60 sec) is better to prevent resources hogs from lagging out the server. But you may need higher execution times for long processes like imports, exports, backups.max_input_time – lower (60 sec) is better. Increase only if you’re trying to import something that takes forever.max_input_vars – set to “1000”, unless some plugins need higher.memory_limit – try “256M” to be safe. Raise if you have heavy plugins. I like to set lower so I’m notified immediately when there are memory hogs. The “error_log” will tell you if you need more.zlib.output_compression – may or may not help. I leave it off.\n9. Use an updated MySQL fork version (INT-ADV, LOW)\nMost people only know of MySQL, which is now acquired/owned by Oracle. There’s also MariaDB (a fork of MySQL by its original creators) and Percona, and also others. max_binlog_stmt_cache_size ', float_val=60.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.2210993766784668, 0.6099311113357544, 0.14942803978919983, 0.007327113766223192, 0.012214303947985172]
--- Tuning Updates ---
Minimal time (ms): 0.009358575514691214
Achieved with configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Decision: Deciding adaption of TuningHint(doc_id=77, param=<re.Match object; span=(194, 208), match='max_input_time'>, value=<re.Match object; span=(7, 9), match='60'>, recommendation='lower (60 sec)', passage='max_execution_time – lower (30-60 sec) is better to prevent resources hogs from lagging out the server. But you may need higher execution times for long processes like imports, exports, backups.max_input_time – lower (60 sec) is better. Increase only if you’re trying to import something that takes forever.max_input_vars – set to “1000”, unless some plugins need higher.memory_limit – try “256M” to be safe. Raise if you have heavy plugins. I like to set lower so I’m notified immediately when there are memory hogs. The “error_log” will tell you if you need more.zlib.output_compression – may or may not help. I leave it off.\n9. Use an updated MySQL fork version (INT-ADV, LOW)\nMost people only know of MySQL, which is now acquired/owned by Oracle. There’s also MariaDB (a fork of MySQL by its original creators) and Percona, and also others. max_binlog_stmt_cache_size ', float_val=60.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.2210993766784668, 0.6099311113357544, 0.14942803978919983, 0.007327113766223192, 0.012214303947985172]
Choice: 1
type: 3, value: 60.0, unit: 
Done flag: False
No warmup - hint counter: 75
{'sequence': 'lower (60 sec)', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.5089513063430786, 0.19912835955619812, 0.15179499983787537, 0.11687880754470825, 0.02324656769633293]}
Decision: Deciding weight of TuningHint(doc_id=77, param=<re.Match object; span=(194, 208), match='max_input_time'>, value=<re.Match object; span=(7, 9), match='60'>, recommendation='lower (60 sec)', passage='max_execution_time – lower (30-60 sec) is better to prevent resources hogs from lagging out the server. But you may need higher execution times for long processes like imports, exports, backups.max_input_time – lower (60 sec) is better. Increase only if you’re trying to import something that takes forever.max_input_vars – set to “1000”, unless some plugins need higher.memory_limit – try “256M” to be safe. Raise if you have heavy plugins. I like to set lower so I’m notified immediately when there are memory hogs. The “error_log” will tell you if you need more.zlib.output_compression – may or may not help. I leave it off.\n9. Use an updated MySQL fork version (INT-ADV, LOW)\nMost people only know of MySQL, which is now acquired/owned by Oracle. There’s also MariaDB (a fork of MySQL by its original creators) and Percona, and also others. max_binlog_stmt_cache_size ', float_val=60.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.02324656769633293, 0.5089513063430786, 0.19912835955619812, 0.15179499983787537, 0.11687880754470825]
Choice: 1
Trying assigning max_input_time to 30
Adding assignment ('max_input_time', '30') with weight 2
Assignment ('max_input_time', '30') extracted from "max_execution_time – lower (30-60 sec) is better to prevent resources hogs from lagging out the server. But you may need higher execution times for long processes like imports, exports, backups.max_input_time – lower (60 sec) is better. Increase only if you’re trying to import something that takes forever.max_input_vars – set to “1000”, unless some plugins need higher.memory_limit – try “256M” to be safe. Raise if you have heavy plugins. I like to set lower so I’m notified immediately when there are memory hogs. The “error_log” will tell you if you need more.zlib.output_compression – may or may not help. I leave it off.
9. Use an updated MySQL fork version (INT-ADV, LOW)
Most people only know of MySQL, which is now acquired/owned by Oracle. There’s also MariaDB (a fork of MySQL by its original creators) and Percona, and also others. max_binlog_stmt_cache_size "
Hint counter: 76
Episode hint counter before: 0
Episode hint counter: 1
Hints per episode: 5
Done flag: False
No warmup - hint counter: 76
{'sequence': '256M”', 'labels': ['Use recommendation', 'Increase recommendation strongly', 'Decrease recommendation strongly', 'Increase recommendation', 'Decrease recommendation'], 'scores': [0.28265732526779175, 0.21869903802871704, 0.180158793926239, 0.16246585547924042, 0.15601901710033417]}
Decision: Deciding adaption of TuningHint(doc_id=35, param=<re.Match object; span=(11306, 11318), match='memory_limit'>, value=<re.Match object; span=(0, 4), match='256M'>, recommendation='256M”', passage='Having a fast business website is essential for both Google ranking and overall conversion rate. Due to Kissmetrics, 40% of site visitors will abandon a page that takes three or more seconds to load. Earlier, the BBC calculated that they lost an additional 10% of users for every extra second their site took to load.\xa0In order to help our readers and customers in gaining higher speed results, we decided to publish a set of articles dedicated to the improvement of website performance using great hints from The Ultimate WordPress Speed Optimization Guide written by Johnny Nguyen.\xa0“Faster websites make more money, rank better, and improve overall user experience!” says Johnny.Today we will start with the web hosting optimization part. Each point will be marked with the level of required skills to implement and the impact it will bring.SKILL:BEGINNER – can Google and follow instructions.INTERMEDIATE – working as WordPress contractor.ADVANCED – programmer or server-admin.IMPACT:LOW – maybe 100-200ms difference. Possibly unnoticeable.MEDIUM – around 500ms difference.HIGH – 1 second difference or more.Your webhosting speed determines how fast it can process code, and how many visitors it can handle. Compare your website to a car. To make a car go faster, you either A) get a stronger engine and/or B) lighten the weight. For websites, the web-server is the “engine” and the code is the”weight”.The goal is to improve our web-server “engine” while decreasing code “weight”, ok?Changing your webhosting is one of the easiest ways to improve speed. Those of you on cheap $5/month shared webhosting will benefit the most from moving to a managed hosting service or even your own VPS. The difference will be night and day without any site changes. Moving from managed hosting to an optimized VPS or dedicated “bare metal” server will be another night-and-day jump.\xa0The difference isn’t only speed but also a matter of cost (savings). A fast server can handle more visitors than a slow one. If your server can handle double the traffic, theoretically the bill can be twice as cheap. Not a big deal for a small site but what about a huge ecommerce site with a $1k/month server bill? 50% cost reduction sounds mighty attractive!1. Choose nearby datacenter location (BEG, LOW-MED)Obviously, you should pick a server location that’s closest to your visitors. Ideally, you don’t want your DNS ping time more than 100ms from the server to your visitor’s computer. There are many implications depending on your needs.Local businesses should get a server as close to their visitors as possible. Keep it within 100ms or less, within 50ms is better. Check ping times with WonderNetwork.The USA is about 80ms from coast to coast. Canada and Mexico are close enough as well.All of Western Europe is only 40-50ms, very close.Asia is within 80ms between most countries.India/Pakistan, Australia/NZ, Africa are somewhat isolated. Local businesses there need a local datacenter. Even Singapore to Australia is borderline “far” by DNS standards (~150ms).South America can be unreliable infrastructure. For that reason, many companies in Central/South America still use US-based datacenters like in California, Texas, or Florida (Miami).If you have worldwide traffic (including Asia/Pacific) and no particular core region, I like USA west coast as perfect location for fast traffic to Europe and Asia.If you have only USA & Europe traffic and no particular core region, I like USA east coast for fast traffic to Europe.It’s also good to have a webhosting company on the same timezone as your core audience. That way they can (quickly) support or troubleshoot issues when most of your visitors are awake.Those of you thinking a CDN can make up for far server location (that’s not necessarily true!)Those of you hunting for dedicated nodes…the best is TIER-4 datacenter with four 9’s (99.9999% uptime guarantee). But good luck getting those guaranteed!Uptime calculator (99.9% uptime means 43min downtime per month)Nearest.host – cool site showing nearby server companies.2. Choose the right website hosting service (BEG, HIGH)Shared hosting ($5-30/month) – fine for small sites and low traffic up to 100k hits/month. No access to server configurations.VPS/cloud hosting ($30-300/month) – great for medium sites and traffic up to 30 million hits/month.Dedicated (bare metal) server ($200/month & up) – great for large sites with TONS of traffic.Buy the best that you can comfortably afford. A small website doesn’t need much power but it’s still noticeable when you get a better server and appreciated more than you think. Think of a new phone that opens apps just a fraction of a second quicker. You really can feel the difference and it improves user experience tremendously.Shared webhosting is usually slow because they stuff hundreds of customers/websites onto the same server (maximize profits). This increases slowdowns, unexpected crashes or server restarts, security attacks, and your email IP getting marked as spam.Shared hosting environments are also slow because they load many scripts/modules to maximize compatibility for as many users as possible. And without dedicated resources, your visitors end up waiting in line while the server is busy handling other websites first.VPS/Dedicated servers are faster because there’s more resources available per account and your resources are serving only your websites. You have more control over your environment, can configure it for your needs. VPS/dedicated can be costly or difficult to manage for regular users. There are cloud-panel services to help manage it and also fully-managed services where they take care of everything for you.Those unable to handle technical responsibilities of VPS can go for “premium shared hosting”. They don’t crowd the server as much but the performance (while better than regular shared hosting) will still be far behind a VPS.3. Choose a high performance web server (INT-ADV, HIGH)Use any web server software but Apache. The best is NGINX or LiteSpeed, or highly-optimized Apache (rare to find). The higher your traffic, the more noticeable the difference.NGINX shines at simple sites. Just set it and go. Not much settings to optimize. But once you have a complicated site, NGINX is a mixed bag. Some NGINX features aren’t easy to configure. If you have a server-admin to fine-tune, it’s great but many people don’t.LiteSpeed has more easy-accessible features than NGINX. Like when you need some things cached but not others, or dealing with server-level redirects via htaccess. LiteSpeed also has a WordPress cache plugin which NGINX doesn’t. That’s a HUGE advantage. (I personally prefer LiteSpeed.)OpenLiteSpeed is the free community version of LiteSpeed. It’s a great alternative for those wanting the free price of NGINX but the powerful LiteSpeed cache plugin.Some webhosts have the Apache+NGINX hybrid stack. I feel those are outdated now and makes for unnecessarily slower/heavier stack.If using Apache, MPM events are best (compared to worker or prefork).Keep your webserver updated. Later versions can speed up certain protocols and processes noticeably.4. Web server configuration (ADV, MED-HIGH)Most web servers come with safe/functional configurations right off the bat. Adequate for the average small site with little traffic. It’s when you get more traffic and more security attacks, or have more demanding apps that fine-tuning the configurations makes a big difference.Timeout – 30 to 60 seconds is a safe start. You can increase up to 600 or beyond if needed for long processes (import, export, backups). Keep in mind that allows poorly-coded processes or hack exploits to run out your server resources.# of child processes allowed – depends on the server environment. Default should be fine.Concurrent connections allowed – anywhere from 1-20k. Higher is not necessarily better!Keep alive – on, off, or LiteSpeed’s “smart keep-alive”. I think “on” is safer. If you have LiteSpeed, the smart keep-alive is awesome!Keep alive timeout – 3-5 seconds is a safe start. Increase if needed.How many threads, body/buffer size, workers, clients, etc….all that you can look up online. It depends on your server size and use scenario. Jump on forums and ask around or have a sys-admin configure for you. Keep in mind different admins have their own ways of configuring.The most important distinction for me is to decide whether this server should be set aggressive or conservative:AGGRESSIVE configuration – gives every site as much resources as possible. Good for low-tenant or dedicated servers.CONSERVATIVE configuration – gives every site as little resources as possible. Good for high-tenant or shared servers.5. Disable unused services (INT, HIGH)Many servers are automatically set up with all features running to make things easy for you. But they’re just like brand new computers with pre-installed software. Get rid of the ones you don’t use. Even if they don’t use much memory, they can still be bombarded by hackers and that eats resources.DNS – disable if you’re using external DNS service. (Cloudflare, DNSME, etc.)Email – disable if you’re using 3rd-party email. (G-Suite, MXroute, etc.)FTP/SFTP – disable if not using.Memcache/Redis – disable if you don’t use it.Other services – Varnish, Elastipress, etc.If you want to be OCD, scan your system for all listening ports and services.6. Remove unused server modules (ADV, LOW)Want to be even more OCD? Disable every single module not used by the server. Some of them are junk unused server stuff; others are unused Linux distro stuff. Old school Apache-compatible stacks or unoptimized control panels tend to have many unused modules enabled by default (while also not enabling ones you might need).Read documentation and check online before blindly removing or replacing them. The danger is you disable things you need (or worse, one that improves performance). You should make a list of disabled services/modules to reference later or give to a contractor when troubleshooting.7. Use the latest PHP version (INT-ADV, HIGH)The PHP version alone makes a HUGE difference.Use the latest PHP version possible! (Easily-configured from your webhosting control panel)For example, PHP 7.0 is 3 times faster than PHP 5.6.Even PHP 7.3 is 10% faster than PHP 7.2.At the time of this writing, PHP 7.4 is available.Be wary of any webhosts still using old PHP!Keeping your website PHP version updated is not only for speed but also security. The only issue is some themes or plugins may not be compatible with the latest PHP version. You’ll know because your site doesn’t work right, or looks weird. So test carefully and keep themes/plugins updated, which helps them stay compatible with the latest PHP.8. Recommended php.ini configurations (INT, MED)Most of you (on shared hosting) won’t even have access to these settings or know how to set them. But nonetheless, here are my recommendations.max_execution_time – lower (30-60 sec) is better to prevent resources hogs from lagging out the server. But you may need higher execution times for long processes like imports, exports, backups.max_input_time – lower (60 sec) is better. Increase only if you’re trying to import something that takes forever.max_input_vars – set to “1000”, unless some plugins need higher.memory_limit – try “256M” to be safe. Raise if you have heavy plugins. I like to set lower so I’m notified immediately when there are memory hogs. The “error_log” will tell you if you need more.zlib.output_compression – may or may not help. I leave it off.9. Use an updated MySQL fork version (INT-ADV, LOW)Most people only know of MySQL, which is now acquired/owned by Oracle. There’s also MariaDB (a fork of MySQL by its original creators) and Percona, and also others.MySQL 8 is much better than MySQL 5.7.But it’s better if you can use MariaDB over MySQL. Community-friendly and better performance than vanilla MySQL 5.7.Use the latest MariaDB version that you can.Whatever you do, just don’t use MySQL 5.7.What about Percona? What about the other 3rd-party MySQL-compatible forks? For most sites, it makes little difference if any. Don’t forget to backup your database before changing or upgrading MySQL.MySQL vs MariaDB vs Percona10. Convert MySQL tables from MyISAM to InnoDB (BEG, LOW)Make sure your tables are set to InnoDB instead of MyISAM.InnoDB is newer and regarded as being better overall (faster, safer).MyISAM can be faster in some scenarios (when mostly read-only).You can convert manually in phpMyAdmin or use a plugin (Servebolt Optimizer or LiteSpeed Cache). Can delete the plugin afterwards if you don’t need it.11. Tuning MySQL configurations (ADV, LOW)Usually not required (or noticeably-beneficial) for the average site but can help tremendously for large sites with high traffic and varying query lengths.You can run MySQLTuner for general recommendations or ask around the sys-admin community to see what everyone else uses.Buffer size, packet size, cache, connections, cache, stack, etc…are all among the general things to tune.Simple Linode guide.When trying out random configurations online or copying somebody else’s, please make sure their environment is similar to yours. The main distinctions are:server size, resources availablehow many clients/sites on serverhow many end users on serverhow much traffichow big are the siteswhat kind of read/write behaviorIt’s important to know whether their settings are for efficiency (high-tenant webhost) or aggressive performance (low-tenant webserver).12. Server full-page caching (ADV, HIGH)Full-page caching can help speed-up any website. But caching directly from the server is much more powerful and resource-efficient than PHP/application-level caching done through a plugin.Some Apache or NGINX servers use Varnish – ugghhh, outdated. Don’t use Varnish proxy. Just upgrade to pure-LiteSpeed or pure-NGINX stack.LiteSpeed servers can use LiteSpeed cache – powerful, many features, and comes with a handy WordPress cache plugin (called “LiteSpeed Cache”).NGINX servers can use FastCGI – great, super fast! While there’s no official NGINX cache plugin for WordPress, there are various “NGINX helper” plugins to facilitate basic cache functions (like purging).To be safe, you should disable caching on pages with forms, carts, or checkouts. Private pages (for logged-in users) CAN be cached but don’t mess with that unless you have that much private traffic and ready to spend hours configuring private cache.You can only enable server-level caching if you own or have access to the server. Otherwise, your webhost decides what caching options you have.Shared hosting usually allows all caching plugins.Managed hosting usually limits you to only their proprietary one.13. Memory object-caching (ADV, LOW-HIGH)Object-caching caches only the database queries instead of the entire page html. This technically makes it “slower” than full-page caching (since you’re not caching the entire page) but useful for speeding up dynamic pages or private pages (logged-in users, admin backend) that can’t be static-cached.Any site with lots of constantly-refreshed data on frontend, or lots of numbers and reports on backend…would stand to benefit from object caching. Mostly-static sites or low-traffic sites would not benefit from object-caching at all; don’t use it on them…it can make them slower!Redis is the gold standard in object caching now. It’s superior to the older memcache in almost every way.Memcache is only used in rare situations where Redis doesn’t work or is slower.If your data doesn’t change much, you can set longer object caching times (e.g. 60 mins and up). Longer times means fewer database queries.Otherwise, stick with the default 5-10 mins to be safe…unless you don’t mind users seeing stale data.Object caching can be managed by WordPress plugins. Most ideal if you have one cache plugin to manage both full-page caching and object caching.You can get ~25% faster object caching by using a Unix SocketUNIX sockets are run from a lower-level layer on the OSI networking model and therefore faster than standard TCP sockets.Redis and Memcache UNIX socket configuration guides for CentOS.Redis and Memcache UNIX socket configuration guides for Ubuntu.Note: with UNIX socket enabled, only one server user account (and presumably all sites by that user) can use object caching. So you can’t use this if you plan to have multiple server users deploying object cache.Some background on memory-caching…Memory-caching is the gold standard in caching, because cache runs faster from memory than than from disk. The issue is we have limited amounts of memory (most of it already used for applications) so we can’t store the entire site cache in there. It matters less nowadays anyway since server disks are so much faster now (thanks to SSD technology).Sure memory is more abundant now too but then again, applications are bigger. You may have heard of others loading their entire site into memory…some using the cache route, others by mounting their WordPress directory into memory. It works great if your site is small enough but for most people: your memory is only big enough to store database queries, anything else you want to cache will be stored on your disk.14. Use the latest HTTP protocol (BEG, HIGH)HTTP/2 loads browser requests so much faster than HTTP/1 (thanks to parallelization). It feels like 3 times faster to me.You should be using HTTP/2 or even HTTP/3 (recently released).Avoid older web servers still on the archaic HTTP/1.Check your site for HTTP/2 and HTTP/3.Using HTTP/2 requires HTTPS/SSL. If your site isn’t in HTTPS, do it now!15. Content encoding (INT, HIGH)GZIP is so 2016. Every web-server should have BROTLI compression nowadays. It’s superior to GZIP (produces smaller files AND in less time). But shockingly, BROTLI still isn’t available on all web-servers.If using BROTLI – set static compression to 4.If using GZIP – set dynamic compression to 1, static compression to 6.You can push static compression levels higher if your CPU is strong (or low-usage server) and/or your static content is cached for a long time (long expiry times). If you’re using a CDN or Cloudflare, make sure you enable BROTLI compression there as well.16. Control-panel (INT, HIGH)This issue matters only for VPS users. Control panels used to be critiqued for the initial weight they put on the server. That’s because control panels were originally designed for large dedicated servers, but have since been optimized for smaller VPS. While it’s true that having no control panel is lighter than having one, it makes day-to-day tasks harder. Their footprint is now negligible considering how useful panels can be.The best performing control panel is one that fits your needs.Allows you to pick the web server of your choice – NGINX or LiteSpeed.Easily configure redirects at server level – instead of slower PHP-level redirection plugin.Easily configure granular caching rules – choosing what and what not to cache.Easy to manage – for you or your sys-admin.Can cage users – preventing resource-hogs on high-tenant servers.Secure against hacks – as hacking attempts eat many resources.Easy to use – for you or your clients.17. Use external DNS service (INT, LOW)Lower DNS latency (small benefit)Easy to update DNS (convenience)Will using an external DNS like Cloudflare or DNS Made Easy make a world of difference in terms of webhosting speed? I think it improves lookup time but not so noticeable unless your previous DNS server was a piece of junk by cheap webhost.The main benefit for me is how quickly I can redirect things. Suppose you get hacked and need to redirect through a security proxy. Or maybe you’re switching certain aspects of your site to another server. In moments like this, having a DNS service is so convenient. You can switch things over with very little downtime, and even switch them back quickly if there’s an issue.DNS services may seem like an extra hassle to setup, but once in place they allow you to integrate new services and mitigate performance issues so much faster.18. Run WP-cron from your server (BEG, MED)Many WordPress tasks need a trigger to function. Such as sending out system emails, run backups, release scheduled posts. By default, WordPress uses a function called WP-Cron (conveniently located at yourdomain.com/wp-cron.php). It works by checking (and executing) for any pending tasks any time someone visits the website. It’s great for small sites, but terrible if you have tons of traffic (triggering many unnecessary cron-checks). Also an obvious DDOS vulnerability.The sensible thing is to disable WP-cron and use a real cron job whether from your server or an external cron service. Some cron jobs visit the website directly. Others go through the Linux directory. Use whichever one works. I think a 5-minute interval is good.19. Caging users & resource limits (ADV, MED-HIGH)Do you have many sites or clients on the same machine? Are you unable to police them all effectively? If you’re losing control of your tenants, it’s probably time to limit their resources. I’ll start you off with a few tactics below. You look up the rest.Cloudlinux & CageFS – limit CPU and memory usageServer-wide bans on cache-prebuilding, broken-link checkers, and other resource hogs.Decrease php execution time.Global configs blocking the usual offenders, bots, etc.Worst-case scenario, just split off some clients onto another server. Split them up by size, space usage, traffic amount, whatever you want.19. Caging users & resource limits (ADV, MED-HIGH)Do you have many sites or clients on the same machine? Are you unable to police them all effectively? If you’re losing control of your tenants, it’s probably time to limit their resources. I’ll start you off with a few tactics below. You look up the rest.Cloudlinux & CageFS – limit CPU and memory usageServer-wide bans on cache-prebuilding, broken-link checkers, and other resource hogs.Decrease php execution time.Global configs blocking the usual offenders, bots, etc.Worst-case scenario, just split off some clients onto another server. Split them up by size, space usage, traffic amount, whatever you want.20. Tracking down resource hogs (ADV, MED-HIGH)We often run into slow server issues with no obvious clue of where to look. Today, it’s this client. Tomorrow, it’s that client. It seems any site can be the culprit on any given day. When you have so many clients, and none of them can afford switching plugins on and off, it is really really difficult to track down the problem.Here are some ideas:Check server logs – are you being hacked? Are there excessive requests?Check server monitors – which users are hogging the CPU, memory, and bandwidth?Once you know which site it is…check WordPress error log. Run Query Monitor.Of course, it might not even happen all the time. You have to track down what users or processes were doing when the slowdown happened.Sometimes you’ll need more of a developer mentality. What plugin was updated last? Any new themes or plugins that were custom-coded? (Check for memory-exhaustive commands.) Yes, you can use applications monitors like New Relic but for me, it’s overkill. The trickiest problems are when it seems like every site is the problem. Or also when the server load is low but the sites are still slow. Good luck!In the next part of this blog series we’ll cover caching optimization for your websites, so stay tuned. For a full version of the article go to The Ultimate WordPress Speed Optimization Guide.Need an optimized WordPress hosting that meets the needs of your project? Get in touch with Jelastic for choosing the best option and receiving technical assistance while migration.Related ArticlesEnterprise WordPress Hosting: Automatic Scaling and High AvailabilityWordPress Hosting in Elastic Standalone ContainerHow to Migrate a WordPress Site to Jelastic PaaSSetup WordPress Multisite Network with Domain Mapping and CDNWebinar Summary: WordPress Cluster for Enterprise High Availability and On-Demand ScalingSubscribe to get the latest updates\nGET STARTED FOR FREE\nE-mail\nSearch\nCategoriesDevelopmentHosting BusinessMulti-CloudWordPressDatabasesJavaContainersKubernetesUse CasesNews and ReleasesSolution innodb_page_cleaners ', float_val=256.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.180158793926239, 0.15601901710033417, 0.28265732526779175, 0.16246585547924042, 0.21869903802871704]
Choice: 1
type: 3, value: 256.0, unit: M
Done flag: False
No warmup - hint counter: 76
{'sequence': '256M”', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.43965446949005127, 0.22688890993595123, 0.1764991134405136, 0.1462070643901825, 0.010750461369752884]}
Decision: Deciding weight of TuningHint(doc_id=35, param=<re.Match object; span=(11306, 11318), match='memory_limit'>, value=<re.Match object; span=(0, 4), match='256M'>, recommendation='256M”', passage='Having a fast business website is essential for both Google ranking and overall conversion rate. Due to Kissmetrics, 40% of site visitors will abandon a page that takes three or more seconds to load. Earlier, the BBC calculated that they lost an additional 10% of users for every extra second their site took to load.\xa0In order to help our readers and customers in gaining higher speed results, we decided to publish a set of articles dedicated to the improvement of website performance using great hints from The Ultimate WordPress Speed Optimization Guide written by Johnny Nguyen.\xa0“Faster websites make more money, rank better, and improve overall user experience!” says Johnny.Today we will start with the web hosting optimization part. Each point will be marked with the level of required skills to implement and the impact it will bring.SKILL:BEGINNER – can Google and follow instructions.INTERMEDIATE – working as WordPress contractor.ADVANCED – programmer or server-admin.IMPACT:LOW – maybe 100-200ms difference. Possibly unnoticeable.MEDIUM – around 500ms difference.HIGH – 1 second difference or more.Your webhosting speed determines how fast it can process code, and how many visitors it can handle. Compare your website to a car. To make a car go faster, you either A) get a stronger engine and/or B) lighten the weight. For websites, the web-server is the “engine” and the code is the”weight”.The goal is to improve our web-server “engine” while decreasing code “weight”, ok?Changing your webhosting is one of the easiest ways to improve speed. Those of you on cheap $5/month shared webhosting will benefit the most from moving to a managed hosting service or even your own VPS. The difference will be night and day without any site changes. Moving from managed hosting to an optimized VPS or dedicated “bare metal” server will be another night-and-day jump.\xa0The difference isn’t only speed but also a matter of cost (savings). A fast server can handle more visitors than a slow one. If your server can handle double the traffic, theoretically the bill can be twice as cheap. Not a big deal for a small site but what about a huge ecommerce site with a $1k/month server bill? 50% cost reduction sounds mighty attractive!1. Choose nearby datacenter location (BEG, LOW-MED)Obviously, you should pick a server location that’s closest to your visitors. Ideally, you don’t want your DNS ping time more than 100ms from the server to your visitor’s computer. There are many implications depending on your needs.Local businesses should get a server as close to their visitors as possible. Keep it within 100ms or less, within 50ms is better. Check ping times with WonderNetwork.The USA is about 80ms from coast to coast. Canada and Mexico are close enough as well.All of Western Europe is only 40-50ms, very close.Asia is within 80ms between most countries.India/Pakistan, Australia/NZ, Africa are somewhat isolated. Local businesses there need a local datacenter. Even Singapore to Australia is borderline “far” by DNS standards (~150ms).South America can be unreliable infrastructure. For that reason, many companies in Central/South America still use US-based datacenters like in California, Texas, or Florida (Miami).If you have worldwide traffic (including Asia/Pacific) and no particular core region, I like USA west coast as perfect location for fast traffic to Europe and Asia.If you have only USA & Europe traffic and no particular core region, I like USA east coast for fast traffic to Europe.It’s also good to have a webhosting company on the same timezone as your core audience. That way they can (quickly) support or troubleshoot issues when most of your visitors are awake.Those of you thinking a CDN can make up for far server location (that’s not necessarily true!)Those of you hunting for dedicated nodes…the best is TIER-4 datacenter with four 9’s (99.9999% uptime guarantee). But good luck getting those guaranteed!Uptime calculator (99.9% uptime means 43min downtime per month)Nearest.host – cool site showing nearby server companies.2. Choose the right website hosting service (BEG, HIGH)Shared hosting ($5-30/month) – fine for small sites and low traffic up to 100k hits/month. No access to server configurations.VPS/cloud hosting ($30-300/month) – great for medium sites and traffic up to 30 million hits/month.Dedicated (bare metal) server ($200/month & up) – great for large sites with TONS of traffic.Buy the best that you can comfortably afford. A small website doesn’t need much power but it’s still noticeable when you get a better server and appreciated more than you think. Think of a new phone that opens apps just a fraction of a second quicker. You really can feel the difference and it improves user experience tremendously.Shared webhosting is usually slow because they stuff hundreds of customers/websites onto the same server (maximize profits). This increases slowdowns, unexpected crashes or server restarts, security attacks, and your email IP getting marked as spam.Shared hosting environments are also slow because they load many scripts/modules to maximize compatibility for as many users as possible. And without dedicated resources, your visitors end up waiting in line while the server is busy handling other websites first.VPS/Dedicated servers are faster because there’s more resources available per account and your resources are serving only your websites. You have more control over your environment, can configure it for your needs. VPS/dedicated can be costly or difficult to manage for regular users. There are cloud-panel services to help manage it and also fully-managed services where they take care of everything for you.Those unable to handle technical responsibilities of VPS can go for “premium shared hosting”. They don’t crowd the server as much but the performance (while better than regular shared hosting) will still be far behind a VPS.3. Choose a high performance web server (INT-ADV, HIGH)Use any web server software but Apache. The best is NGINX or LiteSpeed, or highly-optimized Apache (rare to find). The higher your traffic, the more noticeable the difference.NGINX shines at simple sites. Just set it and go. Not much settings to optimize. But once you have a complicated site, NGINX is a mixed bag. Some NGINX features aren’t easy to configure. If you have a server-admin to fine-tune, it’s great but many people don’t.LiteSpeed has more easy-accessible features than NGINX. Like when you need some things cached but not others, or dealing with server-level redirects via htaccess. LiteSpeed also has a WordPress cache plugin which NGINX doesn’t. That’s a HUGE advantage. (I personally prefer LiteSpeed.)OpenLiteSpeed is the free community version of LiteSpeed. It’s a great alternative for those wanting the free price of NGINX but the powerful LiteSpeed cache plugin.Some webhosts have the Apache+NGINX hybrid stack. I feel those are outdated now and makes for unnecessarily slower/heavier stack.If using Apache, MPM events are best (compared to worker or prefork).Keep your webserver updated. Later versions can speed up certain protocols and processes noticeably.4. Web server configuration (ADV, MED-HIGH)Most web servers come with safe/functional configurations right off the bat. Adequate for the average small site with little traffic. It’s when you get more traffic and more security attacks, or have more demanding apps that fine-tuning the configurations makes a big difference.Timeout – 30 to 60 seconds is a safe start. You can increase up to 600 or beyond if needed for long processes (import, export, backups). Keep in mind that allows poorly-coded processes or hack exploits to run out your server resources.# of child processes allowed – depends on the server environment. Default should be fine.Concurrent connections allowed – anywhere from 1-20k. Higher is not necessarily better!Keep alive – on, off, or LiteSpeed’s “smart keep-alive”. I think “on” is safer. If you have LiteSpeed, the smart keep-alive is awesome!Keep alive timeout – 3-5 seconds is a safe start. Increase if needed.How many threads, body/buffer size, workers, clients, etc….all that you can look up online. It depends on your server size and use scenario. Jump on forums and ask around or have a sys-admin configure for you. Keep in mind different admins have their own ways of configuring.The most important distinction for me is to decide whether this server should be set aggressive or conservative:AGGRESSIVE configuration – gives every site as much resources as possible. Good for low-tenant or dedicated servers.CONSERVATIVE configuration – gives every site as little resources as possible. Good for high-tenant or shared servers.5. Disable unused services (INT, HIGH)Many servers are automatically set up with all features running to make things easy for you. But they’re just like brand new computers with pre-installed software. Get rid of the ones you don’t use. Even if they don’t use much memory, they can still be bombarded by hackers and that eats resources.DNS – disable if you’re using external DNS service. (Cloudflare, DNSME, etc.)Email – disable if you’re using 3rd-party email. (G-Suite, MXroute, etc.)FTP/SFTP – disable if not using.Memcache/Redis – disable if you don’t use it.Other services – Varnish, Elastipress, etc.If you want to be OCD, scan your system for all listening ports and services.6. Remove unused server modules (ADV, LOW)Want to be even more OCD? Disable every single module not used by the server. Some of them are junk unused server stuff; others are unused Linux distro stuff. Old school Apache-compatible stacks or unoptimized control panels tend to have many unused modules enabled by default (while also not enabling ones you might need).Read documentation and check online before blindly removing or replacing them. The danger is you disable things you need (or worse, one that improves performance). You should make a list of disabled services/modules to reference later or give to a contractor when troubleshooting.7. Use the latest PHP version (INT-ADV, HIGH)The PHP version alone makes a HUGE difference.Use the latest PHP version possible! (Easily-configured from your webhosting control panel)For example, PHP 7.0 is 3 times faster than PHP 5.6.Even PHP 7.3 is 10% faster than PHP 7.2.At the time of this writing, PHP 7.4 is available.Be wary of any webhosts still using old PHP!Keeping your website PHP version updated is not only for speed but also security. The only issue is some themes or plugins may not be compatible with the latest PHP version. You’ll know because your site doesn’t work right, or looks weird. So test carefully and keep themes/plugins updated, which helps them stay compatible with the latest PHP.8. Recommended php.ini configurations (INT, MED)Most of you (on shared hosting) won’t even have access to these settings or know how to set them. But nonetheless, here are my recommendations.max_execution_time – lower (30-60 sec) is better to prevent resources hogs from lagging out the server. But you may need higher execution times for long processes like imports, exports, backups.max_input_time – lower (60 sec) is better. Increase only if you’re trying to import something that takes forever.max_input_vars – set to “1000”, unless some plugins need higher.memory_limit – try “256M” to be safe. Raise if you have heavy plugins. I like to set lower so I’m notified immediately when there are memory hogs. The “error_log” will tell you if you need more.zlib.output_compression – may or may not help. I leave it off.9. Use an updated MySQL fork version (INT-ADV, LOW)Most people only know of MySQL, which is now acquired/owned by Oracle. There’s also MariaDB (a fork of MySQL by its original creators) and Percona, and also others.MySQL 8 is much better than MySQL 5.7.But it’s better if you can use MariaDB over MySQL. Community-friendly and better performance than vanilla MySQL 5.7.Use the latest MariaDB version that you can.Whatever you do, just don’t use MySQL 5.7.What about Percona? What about the other 3rd-party MySQL-compatible forks? For most sites, it makes little difference if any. Don’t forget to backup your database before changing or upgrading MySQL.MySQL vs MariaDB vs Percona10. Convert MySQL tables from MyISAM to InnoDB (BEG, LOW)Make sure your tables are set to InnoDB instead of MyISAM.InnoDB is newer and regarded as being better overall (faster, safer).MyISAM can be faster in some scenarios (when mostly read-only).You can convert manually in phpMyAdmin or use a plugin (Servebolt Optimizer or LiteSpeed Cache). Can delete the plugin afterwards if you don’t need it.11. Tuning MySQL configurations (ADV, LOW)Usually not required (or noticeably-beneficial) for the average site but can help tremendously for large sites with high traffic and varying query lengths.You can run MySQLTuner for general recommendations or ask around the sys-admin community to see what everyone else uses.Buffer size, packet size, cache, connections, cache, stack, etc…are all among the general things to tune.Simple Linode guide.When trying out random configurations online or copying somebody else’s, please make sure their environment is similar to yours. The main distinctions are:server size, resources availablehow many clients/sites on serverhow many end users on serverhow much traffichow big are the siteswhat kind of read/write behaviorIt’s important to know whether their settings are for efficiency (high-tenant webhost) or aggressive performance (low-tenant webserver).12. Server full-page caching (ADV, HIGH)Full-page caching can help speed-up any website. But caching directly from the server is much more powerful and resource-efficient than PHP/application-level caching done through a plugin.Some Apache or NGINX servers use Varnish – ugghhh, outdated. Don’t use Varnish proxy. Just upgrade to pure-LiteSpeed or pure-NGINX stack.LiteSpeed servers can use LiteSpeed cache – powerful, many features, and comes with a handy WordPress cache plugin (called “LiteSpeed Cache”).NGINX servers can use FastCGI – great, super fast! While there’s no official NGINX cache plugin for WordPress, there are various “NGINX helper” plugins to facilitate basic cache functions (like purging).To be safe, you should disable caching on pages with forms, carts, or checkouts. Private pages (for logged-in users) CAN be cached but don’t mess with that unless you have that much private traffic and ready to spend hours configuring private cache.You can only enable server-level caching if you own or have access to the server. Otherwise, your webhost decides what caching options you have.Shared hosting usually allows all caching plugins.Managed hosting usually limits you to only their proprietary one.13. Memory object-caching (ADV, LOW-HIGH)Object-caching caches only the database queries instead of the entire page html. This technically makes it “slower” than full-page caching (since you’re not caching the entire page) but useful for speeding up dynamic pages or private pages (logged-in users, admin backend) that can’t be static-cached.Any site with lots of constantly-refreshed data on frontend, or lots of numbers and reports on backend…would stand to benefit from object caching. Mostly-static sites or low-traffic sites would not benefit from object-caching at all; don’t use it on them…it can make them slower!Redis is the gold standard in object caching now. It’s superior to the older memcache in almost every way.Memcache is only used in rare situations where Redis doesn’t work or is slower.If your data doesn’t change much, you can set longer object caching times (e.g. 60 mins and up). Longer times means fewer database queries.Otherwise, stick with the default 5-10 mins to be safe…unless you don’t mind users seeing stale data.Object caching can be managed by WordPress plugins. Most ideal if you have one cache plugin to manage both full-page caching and object caching.You can get ~25% faster object caching by using a Unix SocketUNIX sockets are run from a lower-level layer on the OSI networking model and therefore faster than standard TCP sockets.Redis and Memcache UNIX socket configuration guides for CentOS.Redis and Memcache UNIX socket configuration guides for Ubuntu.Note: with UNIX socket enabled, only one server user account (and presumably all sites by that user) can use object caching. So you can’t use this if you plan to have multiple server users deploying object cache.Some background on memory-caching…Memory-caching is the gold standard in caching, because cache runs faster from memory than than from disk. The issue is we have limited amounts of memory (most of it already used for applications) so we can’t store the entire site cache in there. It matters less nowadays anyway since server disks are so much faster now (thanks to SSD technology).Sure memory is more abundant now too but then again, applications are bigger. You may have heard of others loading their entire site into memory…some using the cache route, others by mounting their WordPress directory into memory. It works great if your site is small enough but for most people: your memory is only big enough to store database queries, anything else you want to cache will be stored on your disk.14. Use the latest HTTP protocol (BEG, HIGH)HTTP/2 loads browser requests so much faster than HTTP/1 (thanks to parallelization). It feels like 3 times faster to me.You should be using HTTP/2 or even HTTP/3 (recently released).Avoid older web servers still on the archaic HTTP/1.Check your site for HTTP/2 and HTTP/3.Using HTTP/2 requires HTTPS/SSL. If your site isn’t in HTTPS, do it now!15. Content encoding (INT, HIGH)GZIP is so 2016. Every web-server should have BROTLI compression nowadays. It’s superior to GZIP (produces smaller files AND in less time). But shockingly, BROTLI still isn’t available on all web-servers.If using BROTLI – set static compression to 4.If using GZIP – set dynamic compression to 1, static compression to 6.You can push static compression levels higher if your CPU is strong (or low-usage server) and/or your static content is cached for a long time (long expiry times). If you’re using a CDN or Cloudflare, make sure you enable BROTLI compression there as well.16. Control-panel (INT, HIGH)This issue matters only for VPS users. Control panels used to be critiqued for the initial weight they put on the server. That’s because control panels were originally designed for large dedicated servers, but have since been optimized for smaller VPS. While it’s true that having no control panel is lighter than having one, it makes day-to-day tasks harder. Their footprint is now negligible considering how useful panels can be.The best performing control panel is one that fits your needs.Allows you to pick the web server of your choice – NGINX or LiteSpeed.Easily configure redirects at server level – instead of slower PHP-level redirection plugin.Easily configure granular caching rules – choosing what and what not to cache.Easy to manage – for you or your sys-admin.Can cage users – preventing resource-hogs on high-tenant servers.Secure against hacks – as hacking attempts eat many resources.Easy to use – for you or your clients.17. Use external DNS service (INT, LOW)Lower DNS latency (small benefit)Easy to update DNS (convenience)Will using an external DNS like Cloudflare or DNS Made Easy make a world of difference in terms of webhosting speed? I think it improves lookup time but not so noticeable unless your previous DNS server was a piece of junk by cheap webhost.The main benefit for me is how quickly I can redirect things. Suppose you get hacked and need to redirect through a security proxy. Or maybe you’re switching certain aspects of your site to another server. In moments like this, having a DNS service is so convenient. You can switch things over with very little downtime, and even switch them back quickly if there’s an issue.DNS services may seem like an extra hassle to setup, but once in place they allow you to integrate new services and mitigate performance issues so much faster.18. Run WP-cron from your server (BEG, MED)Many WordPress tasks need a trigger to function. Such as sending out system emails, run backups, release scheduled posts. By default, WordPress uses a function called WP-Cron (conveniently located at yourdomain.com/wp-cron.php). It works by checking (and executing) for any pending tasks any time someone visits the website. It’s great for small sites, but terrible if you have tons of traffic (triggering many unnecessary cron-checks). Also an obvious DDOS vulnerability.The sensible thing is to disable WP-cron and use a real cron job whether from your server or an external cron service. Some cron jobs visit the website directly. Others go through the Linux directory. Use whichever one works. I think a 5-minute interval is good.19. Caging users & resource limits (ADV, MED-HIGH)Do you have many sites or clients on the same machine? Are you unable to police them all effectively? If you’re losing control of your tenants, it’s probably time to limit their resources. I’ll start you off with a few tactics below. You look up the rest.Cloudlinux & CageFS – limit CPU and memory usageServer-wide bans on cache-prebuilding, broken-link checkers, and other resource hogs.Decrease php execution time.Global configs blocking the usual offenders, bots, etc.Worst-case scenario, just split off some clients onto another server. Split them up by size, space usage, traffic amount, whatever you want.19. Caging users & resource limits (ADV, MED-HIGH)Do you have many sites or clients on the same machine? Are you unable to police them all effectively? If you’re losing control of your tenants, it’s probably time to limit their resources. I’ll start you off with a few tactics below. You look up the rest.Cloudlinux & CageFS – limit CPU and memory usageServer-wide bans on cache-prebuilding, broken-link checkers, and other resource hogs.Decrease php execution time.Global configs blocking the usual offenders, bots, etc.Worst-case scenario, just split off some clients onto another server. Split them up by size, space usage, traffic amount, whatever you want.20. Tracking down resource hogs (ADV, MED-HIGH)We often run into slow server issues with no obvious clue of where to look. Today, it’s this client. Tomorrow, it’s that client. It seems any site can be the culprit on any given day. When you have so many clients, and none of them can afford switching plugins on and off, it is really really difficult to track down the problem.Here are some ideas:Check server logs – are you being hacked? Are there excessive requests?Check server monitors – which users are hogging the CPU, memory, and bandwidth?Once you know which site it is…check WordPress error log. Run Query Monitor.Of course, it might not even happen all the time. You have to track down what users or processes were doing when the slowdown happened.Sometimes you’ll need more of a developer mentality. What plugin was updated last? Any new themes or plugins that were custom-coded? (Check for memory-exhaustive commands.) Yes, you can use applications monitors like New Relic but for me, it’s overkill. The trickiest problems are when it seems like every site is the problem. Or also when the server load is low but the sites are still slow. Good luck!In the next part of this blog series we’ll cover caching optimization for your websites, so stay tuned. For a full version of the article go to The Ultimate WordPress Speed Optimization Guide.Need an optimized WordPress hosting that meets the needs of your project? Get in touch with Jelastic for choosing the best option and receiving technical assistance while migration.Related ArticlesEnterprise WordPress Hosting: Automatic Scaling and High AvailabilityWordPress Hosting in Elastic Standalone ContainerHow to Migrate a WordPress Site to Jelastic PaaSSetup WordPress Multisite Network with Domain Mapping and CDNWebinar Summary: WordPress Cluster for Enterprise High Availability and On-Demand ScalingSubscribe to get the latest updates\nGET STARTED FOR FREE\nE-mail\nSearch\nCategoriesDevelopmentHosting BusinessMulti-CloudWordPressDatabasesJavaContainersKubernetesUse CasesNews and ReleasesSolution innodb_page_cleaners ', float_val=256.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.010750461369752884, 0.43965446949005127, 0.22688890993595123, 0.1764991134405136, 0.1462070643901825]
--- Tuning Updates ---
Minimal time (ms): 0.009358575514691214
Achieved with configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Decision: Deciding adaption of TuningHint(doc_id=35, param=<re.Match object; span=(11306, 11318), match='memory_limit'>, value=<re.Match object; span=(0, 4), match='256M'>, recommendation='256M”', passage='Having a fast business website is essential for both Google ranking and overall conversion rate. Due to Kissmetrics, 40% of site visitors will abandon a page that takes three or more seconds to load. Earlier, the BBC calculated that they lost an additional 10% of users for every extra second their site took to load.\xa0In order to help our readers and customers in gaining higher speed results, we decided to publish a set of articles dedicated to the improvement of website performance using great hints from The Ultimate WordPress Speed Optimization Guide written by Johnny Nguyen.\xa0“Faster websites make more money, rank better, and improve overall user experience!” says Johnny.Today we will start with the web hosting optimization part. Each point will be marked with the level of required skills to implement and the impact it will bring.SKILL:BEGINNER – can Google and follow instructions.INTERMEDIATE – working as WordPress contractor.ADVANCED – programmer or server-admin.IMPACT:LOW – maybe 100-200ms difference. Possibly unnoticeable.MEDIUM – around 500ms difference.HIGH – 1 second difference or more.Your webhosting speed determines how fast it can process code, and how many visitors it can handle. Compare your website to a car. To make a car go faster, you either A) get a stronger engine and/or B) lighten the weight. For websites, the web-server is the “engine” and the code is the”weight”.The goal is to improve our web-server “engine” while decreasing code “weight”, ok?Changing your webhosting is one of the easiest ways to improve speed. Those of you on cheap $5/month shared webhosting will benefit the most from moving to a managed hosting service or even your own VPS. The difference will be night and day without any site changes. Moving from managed hosting to an optimized VPS or dedicated “bare metal” server will be another night-and-day jump.\xa0The difference isn’t only speed but also a matter of cost (savings). A fast server can handle more visitors than a slow one. If your server can handle double the traffic, theoretically the bill can be twice as cheap. Not a big deal for a small site but what about a huge ecommerce site with a $1k/month server bill? 50% cost reduction sounds mighty attractive!1. Choose nearby datacenter location (BEG, LOW-MED)Obviously, you should pick a server location that’s closest to your visitors. Ideally, you don’t want your DNS ping time more than 100ms from the server to your visitor’s computer. There are many implications depending on your needs.Local businesses should get a server as close to their visitors as possible. Keep it within 100ms or less, within 50ms is better. Check ping times with WonderNetwork.The USA is about 80ms from coast to coast. Canada and Mexico are close enough as well.All of Western Europe is only 40-50ms, very close.Asia is within 80ms between most countries.India/Pakistan, Australia/NZ, Africa are somewhat isolated. Local businesses there need a local datacenter. Even Singapore to Australia is borderline “far” by DNS standards (~150ms).South America can be unreliable infrastructure. For that reason, many companies in Central/South America still use US-based datacenters like in California, Texas, or Florida (Miami).If you have worldwide traffic (including Asia/Pacific) and no particular core region, I like USA west coast as perfect location for fast traffic to Europe and Asia.If you have only USA & Europe traffic and no particular core region, I like USA east coast for fast traffic to Europe.It’s also good to have a webhosting company on the same timezone as your core audience. That way they can (quickly) support or troubleshoot issues when most of your visitors are awake.Those of you thinking a CDN can make up for far server location (that’s not necessarily true!)Those of you hunting for dedicated nodes…the best is TIER-4 datacenter with four 9’s (99.9999% uptime guarantee). But good luck getting those guaranteed!Uptime calculator (99.9% uptime means 43min downtime per month)Nearest.host – cool site showing nearby server companies.2. Choose the right website hosting service (BEG, HIGH)Shared hosting ($5-30/month) – fine for small sites and low traffic up to 100k hits/month. No access to server configurations.VPS/cloud hosting ($30-300/month) – great for medium sites and traffic up to 30 million hits/month.Dedicated (bare metal) server ($200/month & up) – great for large sites with TONS of traffic.Buy the best that you can comfortably afford. A small website doesn’t need much power but it’s still noticeable when you get a better server and appreciated more than you think. Think of a new phone that opens apps just a fraction of a second quicker. You really can feel the difference and it improves user experience tremendously.Shared webhosting is usually slow because they stuff hundreds of customers/websites onto the same server (maximize profits). This increases slowdowns, unexpected crashes or server restarts, security attacks, and your email IP getting marked as spam.Shared hosting environments are also slow because they load many scripts/modules to maximize compatibility for as many users as possible. And without dedicated resources, your visitors end up waiting in line while the server is busy handling other websites first.VPS/Dedicated servers are faster because there’s more resources available per account and your resources are serving only your websites. You have more control over your environment, can configure it for your needs. VPS/dedicated can be costly or difficult to manage for regular users. There are cloud-panel services to help manage it and also fully-managed services where they take care of everything for you.Those unable to handle technical responsibilities of VPS can go for “premium shared hosting”. They don’t crowd the server as much but the performance (while better than regular shared hosting) will still be far behind a VPS.3. Choose a high performance web server (INT-ADV, HIGH)Use any web server software but Apache. The best is NGINX or LiteSpeed, or highly-optimized Apache (rare to find). The higher your traffic, the more noticeable the difference.NGINX shines at simple sites. Just set it and go. Not much settings to optimize. But once you have a complicated site, NGINX is a mixed bag. Some NGINX features aren’t easy to configure. If you have a server-admin to fine-tune, it’s great but many people don’t.LiteSpeed has more easy-accessible features than NGINX. Like when you need some things cached but not others, or dealing with server-level redirects via htaccess. LiteSpeed also has a WordPress cache plugin which NGINX doesn’t. That’s a HUGE advantage. (I personally prefer LiteSpeed.)OpenLiteSpeed is the free community version of LiteSpeed. It’s a great alternative for those wanting the free price of NGINX but the powerful LiteSpeed cache plugin.Some webhosts have the Apache+NGINX hybrid stack. I feel those are outdated now and makes for unnecessarily slower/heavier stack.If using Apache, MPM events are best (compared to worker or prefork).Keep your webserver updated. Later versions can speed up certain protocols and processes noticeably.4. Web server configuration (ADV, MED-HIGH)Most web servers come with safe/functional configurations right off the bat. Adequate for the average small site with little traffic. It’s when you get more traffic and more security attacks, or have more demanding apps that fine-tuning the configurations makes a big difference.Timeout – 30 to 60 seconds is a safe start. You can increase up to 600 or beyond if needed for long processes (import, export, backups). Keep in mind that allows poorly-coded processes or hack exploits to run out your server resources.# of child processes allowed – depends on the server environment. Default should be fine.Concurrent connections allowed – anywhere from 1-20k. Higher is not necessarily better!Keep alive – on, off, or LiteSpeed’s “smart keep-alive”. I think “on” is safer. If you have LiteSpeed, the smart keep-alive is awesome!Keep alive timeout – 3-5 seconds is a safe start. Increase if needed.How many threads, body/buffer size, workers, clients, etc….all that you can look up online. It depends on your server size and use scenario. Jump on forums and ask around or have a sys-admin configure for you. Keep in mind different admins have their own ways of configuring.The most important distinction for me is to decide whether this server should be set aggressive or conservative:AGGRESSIVE configuration – gives every site as much resources as possible. Good for low-tenant or dedicated servers.CONSERVATIVE configuration – gives every site as little resources as possible. Good for high-tenant or shared servers.5. Disable unused services (INT, HIGH)Many servers are automatically set up with all features running to make things easy for you. But they’re just like brand new computers with pre-installed software. Get rid of the ones you don’t use. Even if they don’t use much memory, they can still be bombarded by hackers and that eats resources.DNS – disable if you’re using external DNS service. (Cloudflare, DNSME, etc.)Email – disable if you’re using 3rd-party email. (G-Suite, MXroute, etc.)FTP/SFTP – disable if not using.Memcache/Redis – disable if you don’t use it.Other services – Varnish, Elastipress, etc.If you want to be OCD, scan your system for all listening ports and services.6. Remove unused server modules (ADV, LOW)Want to be even more OCD? Disable every single module not used by the server. Some of them are junk unused server stuff; others are unused Linux distro stuff. Old school Apache-compatible stacks or unoptimized control panels tend to have many unused modules enabled by default (while also not enabling ones you might need).Read documentation and check online before blindly removing or replacing them. The danger is you disable things you need (or worse, one that improves performance). You should make a list of disabled services/modules to reference later or give to a contractor when troubleshooting.7. Use the latest PHP version (INT-ADV, HIGH)The PHP version alone makes a HUGE difference.Use the latest PHP version possible! (Easily-configured from your webhosting control panel)For example, PHP 7.0 is 3 times faster than PHP 5.6.Even PHP 7.3 is 10% faster than PHP 7.2.At the time of this writing, PHP 7.4 is available.Be wary of any webhosts still using old PHP!Keeping your website PHP version updated is not only for speed but also security. The only issue is some themes or plugins may not be compatible with the latest PHP version. You’ll know because your site doesn’t work right, or looks weird. So test carefully and keep themes/plugins updated, which helps them stay compatible with the latest PHP.8. Recommended php.ini configurations (INT, MED)Most of you (on shared hosting) won’t even have access to these settings or know how to set them. But nonetheless, here are my recommendations.max_execution_time – lower (30-60 sec) is better to prevent resources hogs from lagging out the server. But you may need higher execution times for long processes like imports, exports, backups.max_input_time – lower (60 sec) is better. Increase only if you’re trying to import something that takes forever.max_input_vars – set to “1000”, unless some plugins need higher.memory_limit – try “256M” to be safe. Raise if you have heavy plugins. I like to set lower so I’m notified immediately when there are memory hogs. The “error_log” will tell you if you need more.zlib.output_compression – may or may not help. I leave it off.9. Use an updated MySQL fork version (INT-ADV, LOW)Most people only know of MySQL, which is now acquired/owned by Oracle. There’s also MariaDB (a fork of MySQL by its original creators) and Percona, and also others.MySQL 8 is much better than MySQL 5.7.But it’s better if you can use MariaDB over MySQL. Community-friendly and better performance than vanilla MySQL 5.7.Use the latest MariaDB version that you can.Whatever you do, just don’t use MySQL 5.7.What about Percona? What about the other 3rd-party MySQL-compatible forks? For most sites, it makes little difference if any. Don’t forget to backup your database before changing or upgrading MySQL.MySQL vs MariaDB vs Percona10. Convert MySQL tables from MyISAM to InnoDB (BEG, LOW)Make sure your tables are set to InnoDB instead of MyISAM.InnoDB is newer and regarded as being better overall (faster, safer).MyISAM can be faster in some scenarios (when mostly read-only).You can convert manually in phpMyAdmin or use a plugin (Servebolt Optimizer or LiteSpeed Cache). Can delete the plugin afterwards if you don’t need it.11. Tuning MySQL configurations (ADV, LOW)Usually not required (or noticeably-beneficial) for the average site but can help tremendously for large sites with high traffic and varying query lengths.You can run MySQLTuner for general recommendations or ask around the sys-admin community to see what everyone else uses.Buffer size, packet size, cache, connections, cache, stack, etc…are all among the general things to tune.Simple Linode guide.When trying out random configurations online or copying somebody else’s, please make sure their environment is similar to yours. The main distinctions are:server size, resources availablehow many clients/sites on serverhow many end users on serverhow much traffichow big are the siteswhat kind of read/write behaviorIt’s important to know whether their settings are for efficiency (high-tenant webhost) or aggressive performance (low-tenant webserver).12. Server full-page caching (ADV, HIGH)Full-page caching can help speed-up any website. But caching directly from the server is much more powerful and resource-efficient than PHP/application-level caching done through a plugin.Some Apache or NGINX servers use Varnish – ugghhh, outdated. Don’t use Varnish proxy. Just upgrade to pure-LiteSpeed or pure-NGINX stack.LiteSpeed servers can use LiteSpeed cache – powerful, many features, and comes with a handy WordPress cache plugin (called “LiteSpeed Cache”).NGINX servers can use FastCGI – great, super fast! While there’s no official NGINX cache plugin for WordPress, there are various “NGINX helper” plugins to facilitate basic cache functions (like purging).To be safe, you should disable caching on pages with forms, carts, or checkouts. Private pages (for logged-in users) CAN be cached but don’t mess with that unless you have that much private traffic and ready to spend hours configuring private cache.You can only enable server-level caching if you own or have access to the server. Otherwise, your webhost decides what caching options you have.Shared hosting usually allows all caching plugins.Managed hosting usually limits you to only their proprietary one.13. Memory object-caching (ADV, LOW-HIGH)Object-caching caches only the database queries instead of the entire page html. This technically makes it “slower” than full-page caching (since you’re not caching the entire page) but useful for speeding up dynamic pages or private pages (logged-in users, admin backend) that can’t be static-cached.Any site with lots of constantly-refreshed data on frontend, or lots of numbers and reports on backend…would stand to benefit from object caching. Mostly-static sites or low-traffic sites would not benefit from object-caching at all; don’t use it on them…it can make them slower!Redis is the gold standard in object caching now. It’s superior to the older memcache in almost every way.Memcache is only used in rare situations where Redis doesn’t work or is slower.If your data doesn’t change much, you can set longer object caching times (e.g. 60 mins and up). Longer times means fewer database queries.Otherwise, stick with the default 5-10 mins to be safe…unless you don’t mind users seeing stale data.Object caching can be managed by WordPress plugins. Most ideal if you have one cache plugin to manage both full-page caching and object caching.You can get ~25% faster object caching by using a Unix SocketUNIX sockets are run from a lower-level layer on the OSI networking model and therefore faster than standard TCP sockets.Redis and Memcache UNIX socket configuration guides for CentOS.Redis and Memcache UNIX socket configuration guides for Ubuntu.Note: with UNIX socket enabled, only one server user account (and presumably all sites by that user) can use object caching. So you can’t use this if you plan to have multiple server users deploying object cache.Some background on memory-caching…Memory-caching is the gold standard in caching, because cache runs faster from memory than than from disk. The issue is we have limited amounts of memory (most of it already used for applications) so we can’t store the entire site cache in there. It matters less nowadays anyway since server disks are so much faster now (thanks to SSD technology).Sure memory is more abundant now too but then again, applications are bigger. You may have heard of others loading their entire site into memory…some using the cache route, others by mounting their WordPress directory into memory. It works great if your site is small enough but for most people: your memory is only big enough to store database queries, anything else you want to cache will be stored on your disk.14. Use the latest HTTP protocol (BEG, HIGH)HTTP/2 loads browser requests so much faster than HTTP/1 (thanks to parallelization). It feels like 3 times faster to me.You should be using HTTP/2 or even HTTP/3 (recently released).Avoid older web servers still on the archaic HTTP/1.Check your site for HTTP/2 and HTTP/3.Using HTTP/2 requires HTTPS/SSL. If your site isn’t in HTTPS, do it now!15. Content encoding (INT, HIGH)GZIP is so 2016. Every web-server should have BROTLI compression nowadays. It’s superior to GZIP (produces smaller files AND in less time). But shockingly, BROTLI still isn’t available on all web-servers.If using BROTLI – set static compression to 4.If using GZIP – set dynamic compression to 1, static compression to 6.You can push static compression levels higher if your CPU is strong (or low-usage server) and/or your static content is cached for a long time (long expiry times). If you’re using a CDN or Cloudflare, make sure you enable BROTLI compression there as well.16. Control-panel (INT, HIGH)This issue matters only for VPS users. Control panels used to be critiqued for the initial weight they put on the server. That’s because control panels were originally designed for large dedicated servers, but have since been optimized for smaller VPS. While it’s true that having no control panel is lighter than having one, it makes day-to-day tasks harder. Their footprint is now negligible considering how useful panels can be.The best performing control panel is one that fits your needs.Allows you to pick the web server of your choice – NGINX or LiteSpeed.Easily configure redirects at server level – instead of slower PHP-level redirection plugin.Easily configure granular caching rules – choosing what and what not to cache.Easy to manage – for you or your sys-admin.Can cage users – preventing resource-hogs on high-tenant servers.Secure against hacks – as hacking attempts eat many resources.Easy to use – for you or your clients.17. Use external DNS service (INT, LOW)Lower DNS latency (small benefit)Easy to update DNS (convenience)Will using an external DNS like Cloudflare or DNS Made Easy make a world of difference in terms of webhosting speed? I think it improves lookup time but not so noticeable unless your previous DNS server was a piece of junk by cheap webhost.The main benefit for me is how quickly I can redirect things. Suppose you get hacked and need to redirect through a security proxy. Or maybe you’re switching certain aspects of your site to another server. In moments like this, having a DNS service is so convenient. You can switch things over with very little downtime, and even switch them back quickly if there’s an issue.DNS services may seem like an extra hassle to setup, but once in place they allow you to integrate new services and mitigate performance issues so much faster.18. Run WP-cron from your server (BEG, MED)Many WordPress tasks need a trigger to function. Such as sending out system emails, run backups, release scheduled posts. By default, WordPress uses a function called WP-Cron (conveniently located at yourdomain.com/wp-cron.php). It works by checking (and executing) for any pending tasks any time someone visits the website. It’s great for small sites, but terrible if you have tons of traffic (triggering many unnecessary cron-checks). Also an obvious DDOS vulnerability.The sensible thing is to disable WP-cron and use a real cron job whether from your server or an external cron service. Some cron jobs visit the website directly. Others go through the Linux directory. Use whichever one works. I think a 5-minute interval is good.19. Caging users & resource limits (ADV, MED-HIGH)Do you have many sites or clients on the same machine? Are you unable to police them all effectively? If you’re losing control of your tenants, it’s probably time to limit their resources. I’ll start you off with a few tactics below. You look up the rest.Cloudlinux & CageFS – limit CPU and memory usageServer-wide bans on cache-prebuilding, broken-link checkers, and other resource hogs.Decrease php execution time.Global configs blocking the usual offenders, bots, etc.Worst-case scenario, just split off some clients onto another server. Split them up by size, space usage, traffic amount, whatever you want.19. Caging users & resource limits (ADV, MED-HIGH)Do you have many sites or clients on the same machine? Are you unable to police them all effectively? If you’re losing control of your tenants, it’s probably time to limit their resources. I’ll start you off with a few tactics below. You look up the rest.Cloudlinux & CageFS – limit CPU and memory usageServer-wide bans on cache-prebuilding, broken-link checkers, and other resource hogs.Decrease php execution time.Global configs blocking the usual offenders, bots, etc.Worst-case scenario, just split off some clients onto another server. Split them up by size, space usage, traffic amount, whatever you want.20. Tracking down resource hogs (ADV, MED-HIGH)We often run into slow server issues with no obvious clue of where to look. Today, it’s this client. Tomorrow, it’s that client. It seems any site can be the culprit on any given day. When you have so many clients, and none of them can afford switching plugins on and off, it is really really difficult to track down the problem.Here are some ideas:Check server logs – are you being hacked? Are there excessive requests?Check server monitors – which users are hogging the CPU, memory, and bandwidth?Once you know which site it is…check WordPress error log. Run Query Monitor.Of course, it might not even happen all the time. You have to track down what users or processes were doing when the slowdown happened.Sometimes you’ll need more of a developer mentality. What plugin was updated last? Any new themes or plugins that were custom-coded? (Check for memory-exhaustive commands.) Yes, you can use applications monitors like New Relic but for me, it’s overkill. The trickiest problems are when it seems like every site is the problem. Or also when the server load is low but the sites are still slow. Good luck!In the next part of this blog series we’ll cover caching optimization for your websites, so stay tuned. For a full version of the article go to The Ultimate WordPress Speed Optimization Guide.Need an optimized WordPress hosting that meets the needs of your project? Get in touch with Jelastic for choosing the best option and receiving technical assistance while migration.Related ArticlesEnterprise WordPress Hosting: Automatic Scaling and High AvailabilityWordPress Hosting in Elastic Standalone ContainerHow to Migrate a WordPress Site to Jelastic PaaSSetup WordPress Multisite Network with Domain Mapping and CDNWebinar Summary: WordPress Cluster for Enterprise High Availability and On-Demand ScalingSubscribe to get the latest updates\nGET STARTED FOR FREE\nE-mail\nSearch\nCategoriesDevelopmentHosting BusinessMulti-CloudWordPressDatabasesJavaContainersKubernetesUse CasesNews and ReleasesSolution innodb_page_cleaners ', float_val=256.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.180158793926239, 0.15601901710033417, 0.28265732526779175, 0.16246585547924042, 0.21869903802871704]
Choice: 1
type: 3, value: 256.0, unit: M
Done flag: False
Decision: Deciding weight of TuningHint(doc_id=35, param=<re.Match object; span=(11306, 11318), match='memory_limit'>, value=<re.Match object; span=(0, 4), match='256M'>, recommendation='256M”', passage='Having a fast business website is essential for both Google ranking and overall conversion rate. Due to Kissmetrics, 40% of site visitors will abandon a page that takes three or more seconds to load. Earlier, the BBC calculated that they lost an additional 10% of users for every extra second their site took to load.\xa0In order to help our readers and customers in gaining higher speed results, we decided to publish a set of articles dedicated to the improvement of website performance using great hints from The Ultimate WordPress Speed Optimization Guide written by Johnny Nguyen.\xa0“Faster websites make more money, rank better, and improve overall user experience!” says Johnny.Today we will start with the web hosting optimization part. Each point will be marked with the level of required skills to implement and the impact it will bring.SKILL:BEGINNER – can Google and follow instructions.INTERMEDIATE – working as WordPress contractor.ADVANCED – programmer or server-admin.IMPACT:LOW – maybe 100-200ms difference. Possibly unnoticeable.MEDIUM – around 500ms difference.HIGH – 1 second difference or more.Your webhosting speed determines how fast it can process code, and how many visitors it can handle. Compare your website to a car. To make a car go faster, you either A) get a stronger engine and/or B) lighten the weight. For websites, the web-server is the “engine” and the code is the”weight”.The goal is to improve our web-server “engine” while decreasing code “weight”, ok?Changing your webhosting is one of the easiest ways to improve speed. Those of you on cheap $5/month shared webhosting will benefit the most from moving to a managed hosting service or even your own VPS. The difference will be night and day without any site changes. Moving from managed hosting to an optimized VPS or dedicated “bare metal” server will be another night-and-day jump.\xa0The difference isn’t only speed but also a matter of cost (savings). A fast server can handle more visitors than a slow one. If your server can handle double the traffic, theoretically the bill can be twice as cheap. Not a big deal for a small site but what about a huge ecommerce site with a $1k/month server bill? 50% cost reduction sounds mighty attractive!1. Choose nearby datacenter location (BEG, LOW-MED)Obviously, you should pick a server location that’s closest to your visitors. Ideally, you don’t want your DNS ping time more than 100ms from the server to your visitor’s computer. There are many implications depending on your needs.Local businesses should get a server as close to their visitors as possible. Keep it within 100ms or less, within 50ms is better. Check ping times with WonderNetwork.The USA is about 80ms from coast to coast. Canada and Mexico are close enough as well.All of Western Europe is only 40-50ms, very close.Asia is within 80ms between most countries.India/Pakistan, Australia/NZ, Africa are somewhat isolated. Local businesses there need a local datacenter. Even Singapore to Australia is borderline “far” by DNS standards (~150ms).South America can be unreliable infrastructure. For that reason, many companies in Central/South America still use US-based datacenters like in California, Texas, or Florida (Miami).If you have worldwide traffic (including Asia/Pacific) and no particular core region, I like USA west coast as perfect location for fast traffic to Europe and Asia.If you have only USA & Europe traffic and no particular core region, I like USA east coast for fast traffic to Europe.It’s also good to have a webhosting company on the same timezone as your core audience. That way they can (quickly) support or troubleshoot issues when most of your visitors are awake.Those of you thinking a CDN can make up for far server location (that’s not necessarily true!)Those of you hunting for dedicated nodes…the best is TIER-4 datacenter with four 9’s (99.9999% uptime guarantee). But good luck getting those guaranteed!Uptime calculator (99.9% uptime means 43min downtime per month)Nearest.host – cool site showing nearby server companies.2. Choose the right website hosting service (BEG, HIGH)Shared hosting ($5-30/month) – fine for small sites and low traffic up to 100k hits/month. No access to server configurations.VPS/cloud hosting ($30-300/month) – great for medium sites and traffic up to 30 million hits/month.Dedicated (bare metal) server ($200/month & up) – great for large sites with TONS of traffic.Buy the best that you can comfortably afford. A small website doesn’t need much power but it’s still noticeable when you get a better server and appreciated more than you think. Think of a new phone that opens apps just a fraction of a second quicker. You really can feel the difference and it improves user experience tremendously.Shared webhosting is usually slow because they stuff hundreds of customers/websites onto the same server (maximize profits). This increases slowdowns, unexpected crashes or server restarts, security attacks, and your email IP getting marked as spam.Shared hosting environments are also slow because they load many scripts/modules to maximize compatibility for as many users as possible. And without dedicated resources, your visitors end up waiting in line while the server is busy handling other websites first.VPS/Dedicated servers are faster because there’s more resources available per account and your resources are serving only your websites. You have more control over your environment, can configure it for your needs. VPS/dedicated can be costly or difficult to manage for regular users. There are cloud-panel services to help manage it and also fully-managed services where they take care of everything for you.Those unable to handle technical responsibilities of VPS can go for “premium shared hosting”. They don’t crowd the server as much but the performance (while better than regular shared hosting) will still be far behind a VPS.3. Choose a high performance web server (INT-ADV, HIGH)Use any web server software but Apache. The best is NGINX or LiteSpeed, or highly-optimized Apache (rare to find). The higher your traffic, the more noticeable the difference.NGINX shines at simple sites. Just set it and go. Not much settings to optimize. But once you have a complicated site, NGINX is a mixed bag. Some NGINX features aren’t easy to configure. If you have a server-admin to fine-tune, it’s great but many people don’t.LiteSpeed has more easy-accessible features than NGINX. Like when you need some things cached but not others, or dealing with server-level redirects via htaccess. LiteSpeed also has a WordPress cache plugin which NGINX doesn’t. That’s a HUGE advantage. (I personally prefer LiteSpeed.)OpenLiteSpeed is the free community version of LiteSpeed. It’s a great alternative for those wanting the free price of NGINX but the powerful LiteSpeed cache plugin.Some webhosts have the Apache+NGINX hybrid stack. I feel those are outdated now and makes for unnecessarily slower/heavier stack.If using Apache, MPM events are best (compared to worker or prefork).Keep your webserver updated. Later versions can speed up certain protocols and processes noticeably.4. Web server configuration (ADV, MED-HIGH)Most web servers come with safe/functional configurations right off the bat. Adequate for the average small site with little traffic. It’s when you get more traffic and more security attacks, or have more demanding apps that fine-tuning the configurations makes a big difference.Timeout – 30 to 60 seconds is a safe start. You can increase up to 600 or beyond if needed for long processes (import, export, backups). Keep in mind that allows poorly-coded processes or hack exploits to run out your server resources.# of child processes allowed – depends on the server environment. Default should be fine.Concurrent connections allowed – anywhere from 1-20k. Higher is not necessarily better!Keep alive – on, off, or LiteSpeed’s “smart keep-alive”. I think “on” is safer. If you have LiteSpeed, the smart keep-alive is awesome!Keep alive timeout – 3-5 seconds is a safe start. Increase if needed.How many threads, body/buffer size, workers, clients, etc….all that you can look up online. It depends on your server size and use scenario. Jump on forums and ask around or have a sys-admin configure for you. Keep in mind different admins have their own ways of configuring.The most important distinction for me is to decide whether this server should be set aggressive or conservative:AGGRESSIVE configuration – gives every site as much resources as possible. Good for low-tenant or dedicated servers.CONSERVATIVE configuration – gives every site as little resources as possible. Good for high-tenant or shared servers.5. Disable unused services (INT, HIGH)Many servers are automatically set up with all features running to make things easy for you. But they’re just like brand new computers with pre-installed software. Get rid of the ones you don’t use. Even if they don’t use much memory, they can still be bombarded by hackers and that eats resources.DNS – disable if you’re using external DNS service. (Cloudflare, DNSME, etc.)Email – disable if you’re using 3rd-party email. (G-Suite, MXroute, etc.)FTP/SFTP – disable if not using.Memcache/Redis – disable if you don’t use it.Other services – Varnish, Elastipress, etc.If you want to be OCD, scan your system for all listening ports and services.6. Remove unused server modules (ADV, LOW)Want to be even more OCD? Disable every single module not used by the server. Some of them are junk unused server stuff; others are unused Linux distro stuff. Old school Apache-compatible stacks or unoptimized control panels tend to have many unused modules enabled by default (while also not enabling ones you might need).Read documentation and check online before blindly removing or replacing them. The danger is you disable things you need (or worse, one that improves performance). You should make a list of disabled services/modules to reference later or give to a contractor when troubleshooting.7. Use the latest PHP version (INT-ADV, HIGH)The PHP version alone makes a HUGE difference.Use the latest PHP version possible! (Easily-configured from your webhosting control panel)For example, PHP 7.0 is 3 times faster than PHP 5.6.Even PHP 7.3 is 10% faster than PHP 7.2.At the time of this writing, PHP 7.4 is available.Be wary of any webhosts still using old PHP!Keeping your website PHP version updated is not only for speed but also security. The only issue is some themes or plugins may not be compatible with the latest PHP version. You’ll know because your site doesn’t work right, or looks weird. So test carefully and keep themes/plugins updated, which helps them stay compatible with the latest PHP.8. Recommended php.ini configurations (INT, MED)Most of you (on shared hosting) won’t even have access to these settings or know how to set them. But nonetheless, here are my recommendations.max_execution_time – lower (30-60 sec) is better to prevent resources hogs from lagging out the server. But you may need higher execution times for long processes like imports, exports, backups.max_input_time – lower (60 sec) is better. Increase only if you’re trying to import something that takes forever.max_input_vars – set to “1000”, unless some plugins need higher.memory_limit – try “256M” to be safe. Raise if you have heavy plugins. I like to set lower so I’m notified immediately when there are memory hogs. The “error_log” will tell you if you need more.zlib.output_compression – may or may not help. I leave it off.9. Use an updated MySQL fork version (INT-ADV, LOW)Most people only know of MySQL, which is now acquired/owned by Oracle. There’s also MariaDB (a fork of MySQL by its original creators) and Percona, and also others.MySQL 8 is much better than MySQL 5.7.But it’s better if you can use MariaDB over MySQL. Community-friendly and better performance than vanilla MySQL 5.7.Use the latest MariaDB version that you can.Whatever you do, just don’t use MySQL 5.7.What about Percona? What about the other 3rd-party MySQL-compatible forks? For most sites, it makes little difference if any. Don’t forget to backup your database before changing or upgrading MySQL.MySQL vs MariaDB vs Percona10. Convert MySQL tables from MyISAM to InnoDB (BEG, LOW)Make sure your tables are set to InnoDB instead of MyISAM.InnoDB is newer and regarded as being better overall (faster, safer).MyISAM can be faster in some scenarios (when mostly read-only).You can convert manually in phpMyAdmin or use a plugin (Servebolt Optimizer or LiteSpeed Cache). Can delete the plugin afterwards if you don’t need it.11. Tuning MySQL configurations (ADV, LOW)Usually not required (or noticeably-beneficial) for the average site but can help tremendously for large sites with high traffic and varying query lengths.You can run MySQLTuner for general recommendations or ask around the sys-admin community to see what everyone else uses.Buffer size, packet size, cache, connections, cache, stack, etc…are all among the general things to tune.Simple Linode guide.When trying out random configurations online or copying somebody else’s, please make sure their environment is similar to yours. The main distinctions are:server size, resources availablehow many clients/sites on serverhow many end users on serverhow much traffichow big are the siteswhat kind of read/write behaviorIt’s important to know whether their settings are for efficiency (high-tenant webhost) or aggressive performance (low-tenant webserver).12. Server full-page caching (ADV, HIGH)Full-page caching can help speed-up any website. But caching directly from the server is much more powerful and resource-efficient than PHP/application-level caching done through a plugin.Some Apache or NGINX servers use Varnish – ugghhh, outdated. Don’t use Varnish proxy. Just upgrade to pure-LiteSpeed or pure-NGINX stack.LiteSpeed servers can use LiteSpeed cache – powerful, many features, and comes with a handy WordPress cache plugin (called “LiteSpeed Cache”).NGINX servers can use FastCGI – great, super fast! While there’s no official NGINX cache plugin for WordPress, there are various “NGINX helper” plugins to facilitate basic cache functions (like purging).To be safe, you should disable caching on pages with forms, carts, or checkouts. Private pages (for logged-in users) CAN be cached but don’t mess with that unless you have that much private traffic and ready to spend hours configuring private cache.You can only enable server-level caching if you own or have access to the server. Otherwise, your webhost decides what caching options you have.Shared hosting usually allows all caching plugins.Managed hosting usually limits you to only their proprietary one.13. Memory object-caching (ADV, LOW-HIGH)Object-caching caches only the database queries instead of the entire page html. This technically makes it “slower” than full-page caching (since you’re not caching the entire page) but useful for speeding up dynamic pages or private pages (logged-in users, admin backend) that can’t be static-cached.Any site with lots of constantly-refreshed data on frontend, or lots of numbers and reports on backend…would stand to benefit from object caching. Mostly-static sites or low-traffic sites would not benefit from object-caching at all; don’t use it on them…it can make them slower!Redis is the gold standard in object caching now. It’s superior to the older memcache in almost every way.Memcache is only used in rare situations where Redis doesn’t work or is slower.If your data doesn’t change much, you can set longer object caching times (e.g. 60 mins and up). Longer times means fewer database queries.Otherwise, stick with the default 5-10 mins to be safe…unless you don’t mind users seeing stale data.Object caching can be managed by WordPress plugins. Most ideal if you have one cache plugin to manage both full-page caching and object caching.You can get ~25% faster object caching by using a Unix SocketUNIX sockets are run from a lower-level layer on the OSI networking model and therefore faster than standard TCP sockets.Redis and Memcache UNIX socket configuration guides for CentOS.Redis and Memcache UNIX socket configuration guides for Ubuntu.Note: with UNIX socket enabled, only one server user account (and presumably all sites by that user) can use object caching. So you can’t use this if you plan to have multiple server users deploying object cache.Some background on memory-caching…Memory-caching is the gold standard in caching, because cache runs faster from memory than than from disk. The issue is we have limited amounts of memory (most of it already used for applications) so we can’t store the entire site cache in there. It matters less nowadays anyway since server disks are so much faster now (thanks to SSD technology).Sure memory is more abundant now too but then again, applications are bigger. You may have heard of others loading their entire site into memory…some using the cache route, others by mounting their WordPress directory into memory. It works great if your site is small enough but for most people: your memory is only big enough to store database queries, anything else you want to cache will be stored on your disk.14. Use the latest HTTP protocol (BEG, HIGH)HTTP/2 loads browser requests so much faster than HTTP/1 (thanks to parallelization). It feels like 3 times faster to me.You should be using HTTP/2 or even HTTP/3 (recently released).Avoid older web servers still on the archaic HTTP/1.Check your site for HTTP/2 and HTTP/3.Using HTTP/2 requires HTTPS/SSL. If your site isn’t in HTTPS, do it now!15. Content encoding (INT, HIGH)GZIP is so 2016. Every web-server should have BROTLI compression nowadays. It’s superior to GZIP (produces smaller files AND in less time). But shockingly, BROTLI still isn’t available on all web-servers.If using BROTLI – set static compression to 4.If using GZIP – set dynamic compression to 1, static compression to 6.You can push static compression levels higher if your CPU is strong (or low-usage server) and/or your static content is cached for a long time (long expiry times). If you’re using a CDN or Cloudflare, make sure you enable BROTLI compression there as well.16. Control-panel (INT, HIGH)This issue matters only for VPS users. Control panels used to be critiqued for the initial weight they put on the server. That’s because control panels were originally designed for large dedicated servers, but have since been optimized for smaller VPS. While it’s true that having no control panel is lighter than having one, it makes day-to-day tasks harder. Their footprint is now negligible considering how useful panels can be.The best performing control panel is one that fits your needs.Allows you to pick the web server of your choice – NGINX or LiteSpeed.Easily configure redirects at server level – instead of slower PHP-level redirection plugin.Easily configure granular caching rules – choosing what and what not to cache.Easy to manage – for you or your sys-admin.Can cage users – preventing resource-hogs on high-tenant servers.Secure against hacks – as hacking attempts eat many resources.Easy to use – for you or your clients.17. Use external DNS service (INT, LOW)Lower DNS latency (small benefit)Easy to update DNS (convenience)Will using an external DNS like Cloudflare or DNS Made Easy make a world of difference in terms of webhosting speed? I think it improves lookup time but not so noticeable unless your previous DNS server was a piece of junk by cheap webhost.The main benefit for me is how quickly I can redirect things. Suppose you get hacked and need to redirect through a security proxy. Or maybe you’re switching certain aspects of your site to another server. In moments like this, having a DNS service is so convenient. You can switch things over with very little downtime, and even switch them back quickly if there’s an issue.DNS services may seem like an extra hassle to setup, but once in place they allow you to integrate new services and mitigate performance issues so much faster.18. Run WP-cron from your server (BEG, MED)Many WordPress tasks need a trigger to function. Such as sending out system emails, run backups, release scheduled posts. By default, WordPress uses a function called WP-Cron (conveniently located at yourdomain.com/wp-cron.php). It works by checking (and executing) for any pending tasks any time someone visits the website. It’s great for small sites, but terrible if you have tons of traffic (triggering many unnecessary cron-checks). Also an obvious DDOS vulnerability.The sensible thing is to disable WP-cron and use a real cron job whether from your server or an external cron service. Some cron jobs visit the website directly. Others go through the Linux directory. Use whichever one works. I think a 5-minute interval is good.19. Caging users & resource limits (ADV, MED-HIGH)Do you have many sites or clients on the same machine? Are you unable to police them all effectively? If you’re losing control of your tenants, it’s probably time to limit their resources. I’ll start you off with a few tactics below. You look up the rest.Cloudlinux & CageFS – limit CPU and memory usageServer-wide bans on cache-prebuilding, broken-link checkers, and other resource hogs.Decrease php execution time.Global configs blocking the usual offenders, bots, etc.Worst-case scenario, just split off some clients onto another server. Split them up by size, space usage, traffic amount, whatever you want.19. Caging users & resource limits (ADV, MED-HIGH)Do you have many sites or clients on the same machine? Are you unable to police them all effectively? If you’re losing control of your tenants, it’s probably time to limit their resources. I’ll start you off with a few tactics below. You look up the rest.Cloudlinux & CageFS – limit CPU and memory usageServer-wide bans on cache-prebuilding, broken-link checkers, and other resource hogs.Decrease php execution time.Global configs blocking the usual offenders, bots, etc.Worst-case scenario, just split off some clients onto another server. Split them up by size, space usage, traffic amount, whatever you want.20. Tracking down resource hogs (ADV, MED-HIGH)We often run into slow server issues with no obvious clue of where to look. Today, it’s this client. Tomorrow, it’s that client. It seems any site can be the culprit on any given day. When you have so many clients, and none of them can afford switching plugins on and off, it is really really difficult to track down the problem.Here are some ideas:Check server logs – are you being hacked? Are there excessive requests?Check server monitors – which users are hogging the CPU, memory, and bandwidth?Once you know which site it is…check WordPress error log. Run Query Monitor.Of course, it might not even happen all the time. You have to track down what users or processes were doing when the slowdown happened.Sometimes you’ll need more of a developer mentality. What plugin was updated last? Any new themes or plugins that were custom-coded? (Check for memory-exhaustive commands.) Yes, you can use applications monitors like New Relic but for me, it’s overkill. The trickiest problems are when it seems like every site is the problem. Or also when the server load is low but the sites are still slow. Good luck!In the next part of this blog series we’ll cover caching optimization for your websites, so stay tuned. For a full version of the article go to The Ultimate WordPress Speed Optimization Guide.Need an optimized WordPress hosting that meets the needs of your project? Get in touch with Jelastic for choosing the best option and receiving technical assistance while migration.Related ArticlesEnterprise WordPress Hosting: Automatic Scaling and High AvailabilityWordPress Hosting in Elastic Standalone ContainerHow to Migrate a WordPress Site to Jelastic PaaSSetup WordPress Multisite Network with Domain Mapping and CDNWebinar Summary: WordPress Cluster for Enterprise High Availability and On-Demand ScalingSubscribe to get the latest updates\nGET STARTED FOR FREE\nE-mail\nSearch\nCategoriesDevelopmentHosting BusinessMulti-CloudWordPressDatabasesJavaContainersKubernetesUse CasesNews and ReleasesSolution innodb_page_cleaners ', float_val=256.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.010750461369752884, 0.43965446949005127, 0.22688890993595123, 0.1764991134405136, 0.1462070643901825]
Choice: 0
Trying assigning memory_limit to 128M
Adding assignment ('memory_limit', '128M') with weight 1
Assignment ('memory_limit', '128M') extracted from "Having a fast business website is essential for both Google ranking and overall conversion rate. Due to Kissmetrics, 40% of site visitors will abandon a page that takes three or more seconds to load. Earlier, the BBC calculated that they lost an additional 10% of users for every extra second their site took to load. In order to help our readers and customers in gaining higher speed results, we decided to publish a set of articles dedicated to the improvement of website performance using great hints from The Ultimate WordPress Speed Optimization Guide written by Johnny Nguyen. “Faster websites make more money, rank better, and improve overall user experience!” says Johnny.Today we will start with the web hosting optimization part. Each point will be marked with the level of required skills to implement and the impact it will bring.SKILL:BEGINNER – can Google and follow instructions.INTERMEDIATE – working as WordPress contractor.ADVANCED – programmer or server-admin.IMPACT:LOW – maybe 100-200ms difference. Possibly unnoticeable.MEDIUM – around 500ms difference.HIGH – 1 second difference or more.Your webhosting speed determines how fast it can process code, and how many visitors it can handle. Compare your website to a car. To make a car go faster, you either A) get a stronger engine and/or B) lighten the weight. For websites, the web-server is the “engine” and the code is the”weight”.The goal is to improve our web-server “engine” while decreasing code “weight”, ok?Changing your webhosting is one of the easiest ways to improve speed. Those of you on cheap $5/month shared webhosting will benefit the most from moving to a managed hosting service or even your own VPS. The difference will be night and day without any site changes. Moving from managed hosting to an optimized VPS or dedicated “bare metal” server will be another night-and-day jump. The difference isn’t only speed but also a matter of cost (savings). A fast server can handle more visitors than a slow one. If your server can handle double the traffic, theoretically the bill can be twice as cheap. Not a big deal for a small site but what about a huge ecommerce site with a $1k/month server bill? 50% cost reduction sounds mighty attractive!1. Choose nearby datacenter location (BEG, LOW-MED)Obviously, you should pick a server location that’s closest to your visitors. Ideally, you don’t want your DNS ping time more than 100ms from the server to your visitor’s computer. There are many implications depending on your needs.Local businesses should get a server as close to their visitors as possible. Keep it within 100ms or less, within 50ms is better. Check ping times with WonderNetwork.The USA is about 80ms from coast to coast. Canada and Mexico are close enough as well.All of Western Europe is only 40-50ms, very close.Asia is within 80ms between most countries.India/Pakistan, Australia/NZ, Africa are somewhat isolated. Local businesses there need a local datacenter. Even Singapore to Australia is borderline “far” by DNS standards (~150ms).South America can be unreliable infrastructure. For that reason, many companies in Central/South America still use US-based datacenters like in California, Texas, or Florida (Miami).If you have worldwide traffic (including Asia/Pacific) and no particular core region, I like USA west coast as perfect location for fast traffic to Europe and Asia.If you have only USA & Europe traffic and no particular core region, I like USA east coast for fast traffic to Europe.It’s also good to have a webhosting company on the same timezone as your core audience. That way they can (quickly) support or troubleshoot issues when most of your visitors are awake.Those of you thinking a CDN can make up for far server location (that’s not necessarily true!)Those of you hunting for dedicated nodes…the best is TIER-4 datacenter with four 9’s (99.9999% uptime guarantee). But good luck getting those guaranteed!Uptime calculator (99.9% uptime means 43min downtime per month)Nearest.host – cool site showing nearby server companies.2. Choose the right website hosting service (BEG, HIGH)Shared hosting ($5-30/month) – fine for small sites and low traffic up to 100k hits/month. No access to server configurations.VPS/cloud hosting ($30-300/month) – great for medium sites and traffic up to 30 million hits/month.Dedicated (bare metal) server ($200/month & up) – great for large sites with TONS of traffic.Buy the best that you can comfortably afford. A small website doesn’t need much power but it’s still noticeable when you get a better server and appreciated more than you think. Think of a new phone that opens apps just a fraction of a second quicker. You really can feel the difference and it improves user experience tremendously.Shared webhosting is usually slow because they stuff hundreds of customers/websites onto the same server (maximize profits). This increases slowdowns, unexpected crashes or server restarts, security attacks, and your email IP getting marked as spam.Shared hosting environments are also slow because they load many scripts/modules to maximize compatibility for as many users as possible. And without dedicated resources, your visitors end up waiting in line while the server is busy handling other websites first.VPS/Dedicated servers are faster because there’s more resources available per account and your resources are serving only your websites. You have more control over your environment, can configure it for your needs. VPS/dedicated can be costly or difficult to manage for regular users. There are cloud-panel services to help manage it and also fully-managed services where they take care of everything for you.Those unable to handle technical responsibilities of VPS can go for “premium shared hosting”. They don’t crowd the server as much but the performance (while better than regular shared hosting) will still be far behind a VPS.3. Choose a high performance web server (INT-ADV, HIGH)Use any web server software but Apache. The best is NGINX or LiteSpeed, or highly-optimized Apache (rare to find). The higher your traffic, the more noticeable the difference.NGINX shines at simple sites. Just set it and go. Not much settings to optimize. But once you have a complicated site, NGINX is a mixed bag. Some NGINX features aren’t easy to configure. If you have a server-admin to fine-tune, it’s great but many people don’t.LiteSpeed has more easy-accessible features than NGINX. Like when you need some things cached but not others, or dealing with server-level redirects via htaccess. LiteSpeed also has a WordPress cache plugin which NGINX doesn’t. That’s a HUGE advantage. (I personally prefer LiteSpeed.)OpenLiteSpeed is the free community version of LiteSpeed. It’s a great alternative for those wanting the free price of NGINX but the powerful LiteSpeed cache plugin.Some webhosts have the Apache+NGINX hybrid stack. I feel those are outdated now and makes for unnecessarily slower/heavier stack.If using Apache, MPM events are best (compared to worker or prefork).Keep your webserver updated. Later versions can speed up certain protocols and processes noticeably.4. Web server configuration (ADV, MED-HIGH)Most web servers come with safe/functional configurations right off the bat. Adequate for the average small site with little traffic. It’s when you get more traffic and more security attacks, or have more demanding apps that fine-tuning the configurations makes a big difference.Timeout – 30 to 60 seconds is a safe start. You can increase up to 600 or beyond if needed for long processes (import, export, backups). Keep in mind that allows poorly-coded processes or hack exploits to run out your server resources.# of child processes allowed – depends on the server environment. Default should be fine.Concurrent connections allowed – anywhere from 1-20k. Higher is not necessarily better!Keep alive – on, off, or LiteSpeed’s “smart keep-alive”. I think “on” is safer. If you have LiteSpeed, the smart keep-alive is awesome!Keep alive timeout – 3-5 seconds is a safe start. Increase if needed.How many threads, body/buffer size, workers, clients, etc….all that you can look up online. It depends on your server size and use scenario. Jump on forums and ask around or have a sys-admin configure for you. Keep in mind different admins have their own ways of configuring.The most important distinction for me is to decide whether this server should be set aggressive or conservative:AGGRESSIVE configuration – gives every site as much resources as possible. Good for low-tenant or dedicated servers.CONSERVATIVE configuration – gives every site as little resources as possible. Good for high-tenant or shared servers.5. Disable unused services (INT, HIGH)Many servers are automatically set up with all features running to make things easy for you. But they’re just like brand new computers with pre-installed software. Get rid of the ones you don’t use. Even if they don’t use much memory, they can still be bombarded by hackers and that eats resources.DNS – disable if you’re using external DNS service. (Cloudflare, DNSME, etc.)Email – disable if you’re using 3rd-party email. (G-Suite, MXroute, etc.)FTP/SFTP – disable if not using.Memcache/Redis – disable if you don’t use it.Other services – Varnish, Elastipress, etc.If you want to be OCD, scan your system for all listening ports and services.6. Remove unused server modules (ADV, LOW)Want to be even more OCD? Disable every single module not used by the server. Some of them are junk unused server stuff; others are unused Linux distro stuff. Old school Apache-compatible stacks or unoptimized control panels tend to have many unused modules enabled by default (while also not enabling ones you might need).Read documentation and check online before blindly removing or replacing them. The danger is you disable things you need (or worse, one that improves performance). You should make a list of disabled services/modules to reference later or give to a contractor when troubleshooting.7. Use the latest PHP version (INT-ADV, HIGH)The PHP version alone makes a HUGE difference.Use the latest PHP version possible! (Easily-configured from your webhosting control panel)For example, PHP 7.0 is 3 times faster than PHP 5.6.Even PHP 7.3 is 10% faster than PHP 7.2.At the time of this writing, PHP 7.4 is available.Be wary of any webhosts still using old PHP!Keeping your website PHP version updated is not only for speed but also security. The only issue is some themes or plugins may not be compatible with the latest PHP version. You’ll know because your site doesn’t work right, or looks weird. So test carefully and keep themes/plugins updated, which helps them stay compatible with the latest PHP.8. Recommended php.ini configurations (INT, MED)Most of you (on shared hosting) won’t even have access to these settings or know how to set them. But nonetheless, here are my recommendations.max_execution_time – lower (30-60 sec) is better to prevent resources hogs from lagging out the server. But you may need higher execution times for long processes like imports, exports, backups.max_input_time – lower (60 sec) is better. Increase only if you’re trying to import something that takes forever.max_input_vars – set to “1000”, unless some plugins need higher.memory_limit – try “256M” to be safe. Raise if you have heavy plugins. I like to set lower so I’m notified immediately when there are memory hogs. The “error_log” will tell you if you need more.zlib.output_compression – may or may not help. I leave it off.9. Use an updated MySQL fork version (INT-ADV, LOW)Most people only know of MySQL, which is now acquired/owned by Oracle. There’s also MariaDB (a fork of MySQL by its original creators) and Percona, and also others.MySQL 8 is much better than MySQL 5.7.But it’s better if you can use MariaDB over MySQL. Community-friendly and better performance than vanilla MySQL 5.7.Use the latest MariaDB version that you can.Whatever you do, just don’t use MySQL 5.7.What about Percona? What about the other 3rd-party MySQL-compatible forks? For most sites, it makes little difference if any. Don’t forget to backup your database before changing or upgrading MySQL.MySQL vs MariaDB vs Percona10. Convert MySQL tables from MyISAM to InnoDB (BEG, LOW)Make sure your tables are set to InnoDB instead of MyISAM.InnoDB is newer and regarded as being better overall (faster, safer).MyISAM can be faster in some scenarios (when mostly read-only).You can convert manually in phpMyAdmin or use a plugin (Servebolt Optimizer or LiteSpeed Cache). Can delete the plugin afterwards if you don’t need it.11. Tuning MySQL configurations (ADV, LOW)Usually not required (or noticeably-beneficial) for the average site but can help tremendously for large sites with high traffic and varying query lengths.You can run MySQLTuner for general recommendations or ask around the sys-admin community to see what everyone else uses.Buffer size, packet size, cache, connections, cache, stack, etc…are all among the general things to tune.Simple Linode guide.When trying out random configurations online or copying somebody else’s, please make sure their environment is similar to yours. The main distinctions are:server size, resources availablehow many clients/sites on serverhow many end users on serverhow much traffichow big are the siteswhat kind of read/write behaviorIt’s important to know whether their settings are for efficiency (high-tenant webhost) or aggressive performance (low-tenant webserver).12. Server full-page caching (ADV, HIGH)Full-page caching can help speed-up any website. But caching directly from the server is much more powerful and resource-efficient than PHP/application-level caching done through a plugin.Some Apache or NGINX servers use Varnish – ugghhh, outdated. Don’t use Varnish proxy. Just upgrade to pure-LiteSpeed or pure-NGINX stack.LiteSpeed servers can use LiteSpeed cache – powerful, many features, and comes with a handy WordPress cache plugin (called “LiteSpeed Cache”).NGINX servers can use FastCGI – great, super fast! While there’s no official NGINX cache plugin for WordPress, there are various “NGINX helper” plugins to facilitate basic cache functions (like purging).To be safe, you should disable caching on pages with forms, carts, or checkouts. Private pages (for logged-in users) CAN be cached but don’t mess with that unless you have that much private traffic and ready to spend hours configuring private cache.You can only enable server-level caching if you own or have access to the server. Otherwise, your webhost decides what caching options you have.Shared hosting usually allows all caching plugins.Managed hosting usually limits you to only their proprietary one.13. Memory object-caching (ADV, LOW-HIGH)Object-caching caches only the database queries instead of the entire page html. This technically makes it “slower” than full-page caching (since you’re not caching the entire page) but useful for speeding up dynamic pages or private pages (logged-in users, admin backend) that can’t be static-cached.Any site with lots of constantly-refreshed data on frontend, or lots of numbers and reports on backend…would stand to benefit from object caching. Mostly-static sites or low-traffic sites would not benefit from object-caching at all; don’t use it on them…it can make them slower!Redis is the gold standard in object caching now. It’s superior to the older memcache in almost every way.Memcache is only used in rare situations where Redis doesn’t work or is slower.If your data doesn’t change much, you can set longer object caching times (e.g. 60 mins and up). Longer times means fewer database queries.Otherwise, stick with the default 5-10 mins to be safe…unless you don’t mind users seeing stale data.Object caching can be managed by WordPress plugins. Most ideal if you have one cache plugin to manage both full-page caching and object caching.You can get ~25% faster object caching by using a Unix SocketUNIX sockets are run from a lower-level layer on the OSI networking model and therefore faster than standard TCP sockets.Redis and Memcache UNIX socket configuration guides for CentOS.Redis and Memcache UNIX socket configuration guides for Ubuntu.Note: with UNIX socket enabled, only one server user account (and presumably all sites by that user) can use object caching. So you can’t use this if you plan to have multiple server users deploying object cache.Some background on memory-caching…Memory-caching is the gold standard in caching, because cache runs faster from memory than than from disk. The issue is we have limited amounts of memory (most of it already used for applications) so we can’t store the entire site cache in there. It matters less nowadays anyway since server disks are so much faster now (thanks to SSD technology).Sure memory is more abundant now too but then again, applications are bigger. You may have heard of others loading their entire site into memory…some using the cache route, others by mounting their WordPress directory into memory. It works great if your site is small enough but for most people: your memory is only big enough to store database queries, anything else you want to cache will be stored on your disk.14. Use the latest HTTP protocol (BEG, HIGH)HTTP/2 loads browser requests so much faster than HTTP/1 (thanks to parallelization). It feels like 3 times faster to me.You should be using HTTP/2 or even HTTP/3 (recently released).Avoid older web servers still on the archaic HTTP/1.Check your site for HTTP/2 and HTTP/3.Using HTTP/2 requires HTTPS/SSL. If your site isn’t in HTTPS, do it now!15. Content encoding (INT, HIGH)GZIP is so 2016. Every web-server should have BROTLI compression nowadays. It’s superior to GZIP (produces smaller files AND in less time). But shockingly, BROTLI still isn’t available on all web-servers.If using BROTLI – set static compression to 4.If using GZIP – set dynamic compression to 1, static compression to 6.You can push static compression levels higher if your CPU is strong (or low-usage server) and/or your static content is cached for a long time (long expiry times). If you’re using a CDN or Cloudflare, make sure you enable BROTLI compression there as well.16. Control-panel (INT, HIGH)This issue matters only for VPS users. Control panels used to be critiqued for the initial weight they put on the server. That’s because control panels were originally designed for large dedicated servers, but have since been optimized for smaller VPS. While it’s true that having no control panel is lighter than having one, it makes day-to-day tasks harder. Their footprint is now negligible considering how useful panels can be.The best performing control panel is one that fits your needs.Allows you to pick the web server of your choice – NGINX or LiteSpeed.Easily configure redirects at server level – instead of slower PHP-level redirection plugin.Easily configure granular caching rules – choosing what and what not to cache.Easy to manage – for you or your sys-admin.Can cage users – preventing resource-hogs on high-tenant servers.Secure against hacks – as hacking attempts eat many resources.Easy to use – for you or your clients.17. Use external DNS service (INT, LOW)Lower DNS latency (small benefit)Easy to update DNS (convenience)Will using an external DNS like Cloudflare or DNS Made Easy make a world of difference in terms of webhosting speed? I think it improves lookup time but not so noticeable unless your previous DNS server was a piece of junk by cheap webhost.The main benefit for me is how quickly I can redirect things. Suppose you get hacked and need to redirect through a security proxy. Or maybe you’re switching certain aspects of your site to another server. In moments like this, having a DNS service is so convenient. You can switch things over with very little downtime, and even switch them back quickly if there’s an issue.DNS services may seem like an extra hassle to setup, but once in place they allow you to integrate new services and mitigate performance issues so much faster.18. Run WP-cron from your server (BEG, MED)Many WordPress tasks need a trigger to function. Such as sending out system emails, run backups, release scheduled posts. By default, WordPress uses a function called WP-Cron (conveniently located at yourdomain.com/wp-cron.php). It works by checking (and executing) for any pending tasks any time someone visits the website. It’s great for small sites, but terrible if you have tons of traffic (triggering many unnecessary cron-checks). Also an obvious DDOS vulnerability.The sensible thing is to disable WP-cron and use a real cron job whether from your server or an external cron service. Some cron jobs visit the website directly. Others go through the Linux directory. Use whichever one works. I think a 5-minute interval is good.19. Caging users & resource limits (ADV, MED-HIGH)Do you have many sites or clients on the same machine? Are you unable to police them all effectively? If you’re losing control of your tenants, it’s probably time to limit their resources. I’ll start you off with a few tactics below. You look up the rest.Cloudlinux & CageFS – limit CPU and memory usageServer-wide bans on cache-prebuilding, broken-link checkers, and other resource hogs.Decrease php execution time.Global configs blocking the usual offenders, bots, etc.Worst-case scenario, just split off some clients onto another server. Split them up by size, space usage, traffic amount, whatever you want.19. Caging users & resource limits (ADV, MED-HIGH)Do you have many sites or clients on the same machine? Are you unable to police them all effectively? If you’re losing control of your tenants, it’s probably time to limit their resources. I’ll start you off with a few tactics below. You look up the rest.Cloudlinux & CageFS – limit CPU and memory usageServer-wide bans on cache-prebuilding, broken-link checkers, and other resource hogs.Decrease php execution time.Global configs blocking the usual offenders, bots, etc.Worst-case scenario, just split off some clients onto another server. Split them up by size, space usage, traffic amount, whatever you want.20. Tracking down resource hogs (ADV, MED-HIGH)We often run into slow server issues with no obvious clue of where to look. Today, it’s this client. Tomorrow, it’s that client. It seems any site can be the culprit on any given day. When you have so many clients, and none of them can afford switching plugins on and off, it is really really difficult to track down the problem.Here are some ideas:Check server logs – are you being hacked? Are there excessive requests?Check server monitors – which users are hogging the CPU, memory, and bandwidth?Once you know which site it is…check WordPress error log. Run Query Monitor.Of course, it might not even happen all the time. You have to track down what users or processes were doing when the slowdown happened.Sometimes you’ll need more of a developer mentality. What plugin was updated last? Any new themes or plugins that were custom-coded? (Check for memory-exhaustive commands.) Yes, you can use applications monitors like New Relic but for me, it’s overkill. The trickiest problems are when it seems like every site is the problem. Or also when the server load is low but the sites are still slow. Good luck!In the next part of this blog series we’ll cover caching optimization for your websites, so stay tuned. For a full version of the article go to The Ultimate WordPress Speed Optimization Guide.Need an optimized WordPress hosting that meets the needs of your project? Get in touch with Jelastic for choosing the best option and receiving technical assistance while migration.Related ArticlesEnterprise WordPress Hosting: Automatic Scaling and High AvailabilityWordPress Hosting in Elastic Standalone ContainerHow to Migrate a WordPress Site to Jelastic PaaSSetup WordPress Multisite Network with Domain Mapping and CDNWebinar Summary: WordPress Cluster for Enterprise High Availability and On-Demand ScalingSubscribe to get the latest updates
GET STARTED FOR FREE
E-mail
Search
CategoriesDevelopmentHosting BusinessMulti-CloudWordPressDatabasesJavaContainersKubernetesUse CasesNews and ReleasesSolution innodb_page_cleaners "
Hint counter: 77
Episode hint counter before: 1
Episode hint counter: 2
Hints per episode: 5
Done flag: False
No warmup - hint counter: 77
{'sequence': '256M”', 'labels': ['Use recommendation', 'Increase recommendation strongly', 'Decrease recommendation strongly', 'Increase recommendation', 'Decrease recommendation'], 'scores': [0.28265732526779175, 0.21869903802871704, 0.180158793926239, 0.16246585547924042, 0.15601901710033417]}
Decision: Deciding adaption of TuningHint(doc_id=77, param=<re.Match object; span=(371, 383), match='memory_limit'>, value=<re.Match object; span=(0, 4), match='256M'>, recommendation='256M”', passage='max_execution_time – lower (30-60 sec) is better to prevent resources hogs from lagging out the server. But you may need higher execution times for long processes like imports, exports, backups.max_input_time – lower (60 sec) is better. Increase only if you’re trying to import something that takes forever.max_input_vars – set to “1000”, unless some plugins need higher.memory_limit – try “256M” to be safe. Raise if you have heavy plugins. I like to set lower so I’m notified immediately when there are memory hogs. The “error_log” will tell you if you need more.zlib.output_compression – may or may not help. I leave it off.\n9. Use an updated MySQL fork version (INT-ADV, LOW)\nMost people only know of MySQL, which is now acquired/owned by Oracle. There’s also MariaDB (a fork of MySQL by its original creators) and Percona, and also others. max_binlog_stmt_cache_size ', float_val=256.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.180158793926239, 0.15601901710033417, 0.28265732526779175, 0.16246585547924042, 0.21869903802871704]
Choice: 3
type: 3, value: 256.0, unit: M
Done flag: False
No warmup - hint counter: 77
{'sequence': '256M”', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.43965446949005127, 0.22688890993595123, 0.1764991134405136, 0.1462070643901825, 0.010750461369752884]}
Decision: Deciding weight of TuningHint(doc_id=77, param=<re.Match object; span=(371, 383), match='memory_limit'>, value=<re.Match object; span=(0, 4), match='256M'>, recommendation='256M”', passage='max_execution_time – lower (30-60 sec) is better to prevent resources hogs from lagging out the server. But you may need higher execution times for long processes like imports, exports, backups.max_input_time – lower (60 sec) is better. Increase only if you’re trying to import something that takes forever.max_input_vars – set to “1000”, unless some plugins need higher.memory_limit – try “256M” to be safe. Raise if you have heavy plugins. I like to set lower so I’m notified immediately when there are memory hogs. The “error_log” will tell you if you need more.zlib.output_compression – may or may not help. I leave it off.\n9. Use an updated MySQL fork version (INT-ADV, LOW)\nMost people only know of MySQL, which is now acquired/owned by Oracle. There’s also MariaDB (a fork of MySQL by its original creators) and Percona, and also others. max_binlog_stmt_cache_size ', float_val=256.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.010750461369752884, 0.43965446949005127, 0.22688890993595123, 0.1764991134405136, 0.1462070643901825]
Choice: 4
Trying assigning memory_limit to 512M
Adding assignment ('memory_limit', '512M') with weight 16
Assignment ('memory_limit', '512M') extracted from "max_execution_time – lower (30-60 sec) is better to prevent resources hogs from lagging out the server. But you may need higher execution times for long processes like imports, exports, backups.max_input_time – lower (60 sec) is better. Increase only if you’re trying to import something that takes forever.max_input_vars – set to “1000”, unless some plugins need higher.memory_limit – try “256M” to be safe. Raise if you have heavy plugins. I like to set lower so I’m notified immediately when there are memory hogs. The “error_log” will tell you if you need more.zlib.output_compression – may or may not help. I leave it off.
9. Use an updated MySQL fork version (INT-ADV, LOW)
Most people only know of MySQL, which is now acquired/owned by Oracle. There’s also MariaDB (a fork of MySQL by its original creators) and Percona, and also others. max_binlog_stmt_cache_size "
Hint counter: 78
Episode hint counter before: 2
Episode hint counter: 3
Hints per episode: 5
Done flag: False
No warmup - hint counter: 78
{'sequence': '512M\n', 'labels': ['Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Decrease recommendation strongly', 'Increase recommendation strongly'], 'scores': [0.2606128454208374, 0.19396375119686127, 0.1858467161655426, 0.18233981728553772, 0.17723682522773743]}
Decision: Deciding adaption of TuningHint(doc_id=51, param=<re.Match object; span=(94, 112), match='max_allowed_packet'>, value=<re.Match object; span=(0, 4), match='512M'>, recommendation='512M\n', passage='innodb_lock_wait_timeout = 120\nbinlog_format=ROW\ninnodb_autoinc_lock_mode=2\n[mysqldump]\nquick\nmax_allowed_packet = 512M\n[mysql]\nno-auto-rehash innodb_flush_log_at_timeout ', float_val=512.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.18233981728553772, 0.2606128454208374, 0.19396375119686127, 0.1858467161655426, 0.17723682522773743]
Choice: 4
type: 3, value: 512.0, unit: M
Done flag: False
No warmup - hint counter: 78
{'sequence': '512M\n', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.46050670742988586, 0.19210757315158844, 0.17780335247516632, 0.14548297226428986, 0.024099400267004967]}
Decision: Deciding weight of TuningHint(doc_id=51, param=<re.Match object; span=(94, 112), match='max_allowed_packet'>, value=<re.Match object; span=(0, 4), match='512M'>, recommendation='512M\n', passage='innodb_lock_wait_timeout = 120\nbinlog_format=ROW\ninnodb_autoinc_lock_mode=2\n[mysqldump]\nquick\nmax_allowed_packet = 512M\n[mysql]\nno-auto-rehash innodb_flush_log_at_timeout ', float_val=512.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.024099400267004967, 0.46050670742988586, 0.19210757315158844, 0.17780335247516632, 0.14548297226428986]
--- Tuning Updates ---
Minimal time (ms): 0.009358575514691214
Achieved with configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Decision: Deciding adaption of TuningHint(doc_id=51, param=<re.Match object; span=(94, 112), match='max_allowed_packet'>, value=<re.Match object; span=(0, 4), match='512M'>, recommendation='512M\n', passage='innodb_lock_wait_timeout = 120\nbinlog_format=ROW\ninnodb_autoinc_lock_mode=2\n[mysqldump]\nquick\nmax_allowed_packet = 512M\n[mysql]\nno-auto-rehash innodb_flush_log_at_timeout ', float_val=512.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.18233981728553772, 0.2606128454208374, 0.19396375119686127, 0.1858467161655426, 0.17723682522773743]
Choice: 1
type: 3, value: 512.0, unit: M
Done flag: False
Decision: Deciding weight of TuningHint(doc_id=51, param=<re.Match object; span=(94, 112), match='max_allowed_packet'>, value=<re.Match object; span=(0, 4), match='512M'>, recommendation='512M\n', passage='innodb_lock_wait_timeout = 120\nbinlog_format=ROW\ninnodb_autoinc_lock_mode=2\n[mysqldump]\nquick\nmax_allowed_packet = 512M\n[mysql]\nno-auto-rehash innodb_flush_log_at_timeout ', float_val=512.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.024099400267004967, 0.46050670742988586, 0.19210757315158844, 0.17780335247516632, 0.14548297226428986]
Choice: 1
Trying assigning max_allowed_packet to 256M
Assignment ('max_allowed_packet', '256M') was rejected
Hint counter: 79
Episode hint counter before: 3
Episode hint counter: 4
Hints per episode: 5
Done flag: False
No warmup - hint counter: 79
{'sequence': '8M\ntable_cache = 128', 'labels': ['Use recommendation', 'Increase recommendation strongly', 'Increase recommendation', 'Decrease recommendation', 'Decrease recommendation strongly'], 'scores': [0.27001482248306274, 0.22636854648590088, 0.1995847374200821, 0.15736858546733856, 0.14666326344013214]}
Decision: Deciding adaption of TuningHint(doc_id=56, param=<re.Match object; span=(207, 225), match='max_allowed_packet'>, value=<re.Match object; span=(0, 2), match='8M'>, recommendation='8M\ntable_cache = 128', passage="Add the following to the [mysqld] section of /etc/my.cnf to see improvements in database speed for MythTV as well as MythWeb. Check your default values using 'mysql> show global variables;'\nkey_buffer = 48M\nmax_allowed_packet = 8M\ntable_cache = 128 # this setting is deprecated in mysql 5.6.23 and will prevent mysql from starting\nsort_buffer_size = 48M mysql_native_password_proxy_users ", float_val=8.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.14666326344013214, 0.15736858546733856, 0.27001482248306274, 0.1995847374200821, 0.22636854648590088]
Choice: 1
type: 3, value: 8.0, unit: M
Done flag: False
No warmup - hint counter: 79
{'sequence': '8M\ntable_cache = 128', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.5435924530029297, 0.18382956087589264, 0.13793328404426575, 0.11182741075754166, 0.02281731553375721]}
Decision: Deciding weight of TuningHint(doc_id=56, param=<re.Match object; span=(207, 225), match='max_allowed_packet'>, value=<re.Match object; span=(0, 2), match='8M'>, recommendation='8M\ntable_cache = 128', passage="Add the following to the [mysqld] section of /etc/my.cnf to see improvements in database speed for MythTV as well as MythWeb. Check your default values using 'mysql> show global variables;'\nkey_buffer = 48M\nmax_allowed_packet = 8M\ntable_cache = 128 # this setting is deprecated in mysql 5.6.23 and will prevent mysql from starting\nsort_buffer_size = 48M mysql_native_password_proxy_users ", float_val=8.0, val_unit='M', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.02281731553375721, 0.5435924530029297, 0.18382956087589264, 0.13793328404426575, 0.11182741075754166]
Choice: 3
Trying assigning max_allowed_packet to 4M
Adding assignment ('max_allowed_packet', '4M') with weight 8
Assignment ('max_allowed_packet', '4M') extracted from "Add the following to the [mysqld] section of /etc/my.cnf to see improvements in database speed for MythTV as well as MythWeb. Check your default values using 'mysql> show global variables;'
key_buffer = 48M
max_allowed_packet = 8M
table_cache = 128 # this setting is deprecated in mysql 5.6.23 and will prevent mysql from starting
sort_buffer_size = 48M mysql_native_password_proxy_users "
Hint counter: 80
Episode hint counter before: 4
Episode hint counter: 5
Hints per episode: 5
Episode finished!
Done flag: True
Finalizing episode!
Weighted hints: defaultdict(<function NlpTuningEnv._finalize_episode.<locals>.<lambda> at 0x7f86e0cd7290>, {('max_input_time', '30'): 2, ('memory_limit', '128M'): 1, ('memory_limit', '512M'): 16, ('max_allowed_packet', '4M'): 8})
Selected configurations: [{'max_input_time': '30', 'memory_limit': '512M', 'max_allowed_packet': '4M'}, {'max_input_time': '30', 'memory_limit': '128M', 'max_allowed_packet': '4M'}]
Trying configuration: {'max_input_time': '30', 'memory_limit': '512M', 'max_allowed_packet': '4M'}
--- Tuning Updates ---
Minimal time (ms): 0.009358575514691214
Achieved with configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
Maximal time (ms): 0.9580671779934349
Achieved with configuration: {'innodb_log_file_size': '8G', 'max_heap_table_size': '64M'}
Reward -0.21797674143651802 with {'max_input_time': '30', 'memory_limit': '512M', 'max_allowed_packet': '4M'}
Trying configuration: {'max_input_time': '30', 'memory_limit': '128M', 'max_allowed_packet': '4M'}
--- Tuning Updates ---
Minimal time (ms): 0.009358575514691214
Achieved with configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
Maximal time (ms): 0.9589616184964967
Achieved with configuration: {'max_input_time': '30', 'memory_limit': '128M', 'max_allowed_packet': '4M'}
Reward 0.11567772252209085 with {'max_input_time': '30', 'memory_limit': '128M', 'max_allowed_packet': '4M'}
Obtained 0.11567772252209085 by configuration {'max_input_time': '30', 'memory_limit': '128M', 'max_allowed_packet': '4M'}
Achieved unscaled reward of 0.11567772252209085 using {'max_input_time': '30', 'memory_limit': '128M', 'max_allowed_packet': '4M'}.
No warmup - hint counter: 80
{'sequence': '8M\ntable_cache = 128', 'labels': ['Use recommendation', 'Increase recommendation strongly', 'Increase recommendation', 'Decrease recommendation', 'Decrease recommendation strongly'], 'scores': [0.27001482248306274, 0.22636854648590088, 0.1995847374200821, 0.15736858546733856, 0.14666326344013214]}
Decision: Deciding adaption of TuningHint(doc_id=56, param=<re.Match object; span=(207, 225), match='max_allowed_packet'>, value=<re.Match object; span=(17, 20), match='128'>, recommendation='8M\ntable_cache = 128', passage="Add the following to the [mysqld] section of /etc/my.cnf to see improvements in database speed for MythTV as well as MythWeb. Check your default values using 'mysql> show global variables;'\nkey_buffer = 48M\nmax_allowed_packet = 8M\ntable_cache = 128 # this setting is deprecated in mysql 5.6.23 and will prevent mysql from starting\nsort_buffer_size = 48M mysql_native_password_proxy_users ", float_val=128.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.14666326344013214, 0.15736858546733856, 0.27001482248306274, 0.1995847374200821, 0.22636854648590088]
--- Tuning Updates ---
Minimal time (ms): 0.009358575514691214
Achieved with configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
Maximal time (ms): 0.9589616184964967
Achieved with configuration: {'max_input_time': '30', 'memory_limit': '128M', 'max_allowed_packet': '4M'}
Decision: Deciding adaption of TuningHint(doc_id=56, param=<re.Match object; span=(207, 225), match='max_allowed_packet'>, value=<re.Match object; span=(17, 20), match='128'>, recommendation='8M\ntable_cache = 128', passage="Add the following to the [mysqld] section of /etc/my.cnf to see improvements in database speed for MythTV as well as MythWeb. Check your default values using 'mysql> show global variables;'\nkey_buffer = 48M\nmax_allowed_packet = 8M\ntable_cache = 128 # this setting is deprecated in mysql 5.6.23 and will prevent mysql from starting\nsort_buffer_size = 48M mysql_native_password_proxy_users ", float_val=128.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.14666326344013214, 0.15736858546733856, 0.27001482248306274, 0.1995847374200821, 0.22636854648590088]
Choice: 1
type: 3, value: 128.0, unit: 
Done flag: False
No warmup - hint counter: 80
{'sequence': '8M\ntable_cache = 128', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.5435924530029297, 0.18382956087589264, 0.13793328404426575, 0.11182741075754166, 0.02281731553375721]}
Decision: Deciding weight of TuningHint(doc_id=56, param=<re.Match object; span=(207, 225), match='max_allowed_packet'>, value=<re.Match object; span=(17, 20), match='128'>, recommendation='8M\ntable_cache = 128', passage="Add the following to the [mysqld] section of /etc/my.cnf to see improvements in database speed for MythTV as well as MythWeb. Check your default values using 'mysql> show global variables;'\nkey_buffer = 48M\nmax_allowed_packet = 8M\ntable_cache = 128 # this setting is deprecated in mysql 5.6.23 and will prevent mysql from starting\nsort_buffer_size = 48M mysql_native_password_proxy_users ", float_val=128.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.02281731553375721, 0.5435924530029297, 0.18382956087589264, 0.13793328404426575, 0.11182741075754166]
--- Tuning Updates ---
Minimal time (ms): 0.009358575514691214
Achieved with configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
Maximal time (ms): 0.9589616184964967
Achieved with configuration: {'max_input_time': '30', 'memory_limit': '128M', 'max_allowed_packet': '4M'}
Decision: Deciding adaption of TuningHint(doc_id=56, param=<re.Match object; span=(207, 225), match='max_allowed_packet'>, value=<re.Match object; span=(17, 20), match='128'>, recommendation='8M\ntable_cache = 128', passage="Add the following to the [mysqld] section of /etc/my.cnf to see improvements in database speed for MythTV as well as MythWeb. Check your default values using 'mysql> show global variables;'\nkey_buffer = 48M\nmax_allowed_packet = 8M\ntable_cache = 128 # this setting is deprecated in mysql 5.6.23 and will prevent mysql from starting\nsort_buffer_size = 48M mysql_native_password_proxy_users ", float_val=128.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.14666326344013214, 0.15736858546733856, 0.27001482248306274, 0.1995847374200821, 0.22636854648590088]
Choice: 0
type: 3, value: 128.0, unit: 
Done flag: False
Decision: Deciding weight of TuningHint(doc_id=56, param=<re.Match object; span=(207, 225), match='max_allowed_packet'>, value=<re.Match object; span=(17, 20), match='128'>, recommendation='8M\ntable_cache = 128', passage="Add the following to the [mysqld] section of /etc/my.cnf to see improvements in database speed for MythTV as well as MythWeb. Check your default values using 'mysql> show global variables;'\nkey_buffer = 48M\nmax_allowed_packet = 8M\ntable_cache = 128 # this setting is deprecated in mysql 5.6.23 and will prevent mysql from starting\nsort_buffer_size = 48M mysql_native_password_proxy_users ", float_val=128.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.02281731553375721, 0.5435924530029297, 0.18382956087589264, 0.13793328404426575, 0.11182741075754166]
Choice: 3
Trying assigning max_allowed_packet to 32
Assignment ('max_allowed_packet', '32') was rejected
Hint counter: 81
Episode hint counter before: 0
Episode hint counter: 1
Hints per episode: 5
Done flag: False
No warmup - hint counter: 81
{'sequence': 'city LIMIT 5000', 'labels': ['Decrease recommendation', 'Decrease recommendation strongly', 'Use recommendation', 'Increase recommendation strongly', 'Increase recommendation'], 'scores': [0.3822180926799774, 0.2650657594203949, 0.20569857954978943, 0.09928315132856369, 0.04773445054888725]}
Decision: Deciding adaption of TuningHint(doc_id=2, param=<re.Match object; span=(22, 29), match='world_x'>, value=<re.Match object; span=(11, 15), match='5000'>, recommendation='city LIMIT 5000', passage='EXPLAIN SELECT * FROM world_x.city LIMIT 5000;\nMySQL EXPLAIN query output\nMySQL Query Log\nIn MySQL, slow queries are logged in an built-in query log. Once you find the slow queries in the query log, use the EXPLAIN statement to determine why the queries are slow and optimize them. slow_query_log ', float_val=5000.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.2650657594203949, 0.3822180926799774, 0.20569857954978943, 0.04773445054888725, 0.09928315132856369]
Choice: 4
type: 3, value: 5000.0, unit: 
Done flag: False
No warmup - hint counter: 81
{'sequence': 'city LIMIT 5000', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.44411659240722656, 0.21207170188426971, 0.17979423701763153, 0.14338400959968567, 0.020633472129702568]}
Decision: Deciding weight of TuningHint(doc_id=2, param=<re.Match object; span=(22, 29), match='world_x'>, value=<re.Match object; span=(11, 15), match='5000'>, recommendation='city LIMIT 5000', passage='EXPLAIN SELECT * FROM world_x.city LIMIT 5000;\nMySQL EXPLAIN query output\nMySQL Query Log\nIn MySQL, slow queries are logged in an built-in query log. Once you find the slow queries in the query log, use the EXPLAIN statement to determine why the queries are slow and optimize them. slow_query_log ', float_val=5000.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.020633472129702568, 0.44411659240722656, 0.21207170188426971, 0.17979423701763153, 0.14338400959968567]
Choice: 4
Trying assigning world_x to 20000
Assignment ('world_x', '20000') was rejected
Hint counter: 82
Episode hint counter before: 1
Episode hint counter: 2
Hints per episode: 5
Done flag: False
No warmup - hint counter: 82
{'sequence': '8', 'labels': ['Use recommendation', 'Increase recommendation strongly', 'Decrease recommendation strongly', 'Increase recommendation', 'Decrease recommendation'], 'scores': [0.26618632674217224, 0.21739822626113892, 0.18449042737483978, 0.1797831505537033, 0.15214183926582336]}
Decision: Deciding adaption of TuningHint(doc_id=4, param=<re.Match object; span=(252, 269), match='check_proxy_users'>, value=<re.Match object; span=(0, 1), match='8'>, recommendation='8', passage='You mileage will vary, test before production usage.\nMost query workloads are not 100% PIO, so actual benefits likely much lower.\nCheers,\nJim\nJune 30, 2020 at 2:08 pm\nJie Zhou\nReply\nWhy innodb_buffer_pool_instances has a best practice to set it to “8” check_proxy_users ', float_val=8.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.18449042737483978, 0.15214183926582336, 0.26618632674217224, 0.1797831505537033, 0.21739822626113892]
Choice: 2
type: 3, value: 8.0, unit: 
Done flag: False
No warmup - hint counter: 82
{'sequence': '8', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.4621095061302185, 0.20298480987548828, 0.16258886456489563, 0.14552511274814606, 0.02679176814854145]}
Decision: Deciding weight of TuningHint(doc_id=4, param=<re.Match object; span=(252, 269), match='check_proxy_users'>, value=<re.Match object; span=(0, 1), match='8'>, recommendation='8', passage='You mileage will vary, test before production usage.\nMost query workloads are not 100% PIO, so actual benefits likely much lower.\nCheers,\nJim\nJune 30, 2020 at 2:08 pm\nJie Zhou\nReply\nWhy innodb_buffer_pool_instances has a best practice to set it to “8” check_proxy_users ', float_val=8.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.02679176814854145, 0.4621095061302185, 0.20298480987548828, 0.16258886456489563, 0.14552511274814606]
--- Tuning Updates ---
Minimal time (ms): 0.009358575514691214
Achieved with configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
Maximal time (ms): 0.9589616184964967
Achieved with configuration: {'max_input_time': '30', 'memory_limit': '128M', 'max_allowed_packet': '4M'}
Decision: Deciding adaption of TuningHint(doc_id=4, param=<re.Match object; span=(252, 269), match='check_proxy_users'>, value=<re.Match object; span=(0, 1), match='8'>, recommendation='8', passage='You mileage will vary, test before production usage.\nMost query workloads are not 100% PIO, so actual benefits likely much lower.\nCheers,\nJim\nJune 30, 2020 at 2:08 pm\nJie Zhou\nReply\nWhy innodb_buffer_pool_instances has a best practice to set it to “8” check_proxy_users ', float_val=8.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.18449042737483978, 0.15214183926582336, 0.26618632674217224, 0.1797831505537033, 0.21739822626113892]
Choice: 1
type: 3, value: 8.0, unit: 
Done flag: False
Decision: Deciding weight of TuningHint(doc_id=4, param=<re.Match object; span=(252, 269), match='check_proxy_users'>, value=<re.Match object; span=(0, 1), match='8'>, recommendation='8', passage='You mileage will vary, test before production usage.\nMost query workloads are not 100% PIO, so actual benefits likely much lower.\nCheers,\nJim\nJune 30, 2020 at 2:08 pm\nJie Zhou\nReply\nWhy innodb_buffer_pool_instances has a best practice to set it to “8” check_proxy_users ', float_val=8.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.02679176814854145, 0.4621095061302185, 0.20298480987548828, 0.16258886456489563, 0.14552511274814606]
Choice: 0
Trying assigning check_proxy_users to 4
Adding assignment ('check_proxy_users', '4') with weight 1
Assignment ('check_proxy_users', '4') extracted from "You mileage will vary, test before production usage.
Most query workloads are not 100% PIO, so actual benefits likely much lower.
Cheers,
Jim
June 30, 2020 at 2:08 pm
Jie Zhou
Reply
Why innodb_buffer_pool_instances has a best practice to set it to “8” check_proxy_users "
Hint counter: 83
Episode hint counter before: 2
Episode hint counter: 3
Hints per episode: 5
Done flag: False
No warmup - hint counter: 83
{'sequence': '4 to 16', 'labels': ['Increase recommendation', 'Decrease recommendation', 'Increase recommendation strongly', 'Use recommendation', 'Decrease recommendation strongly'], 'scores': [0.39394477009773254, 0.21913976967334747, 0.14287824928760529, 0.13073761761188507, 0.11329956352710724]}
Decision: Deciding adaption of TuningHint(doc_id=4, param=<re.Match object; span=(161, 183), match='innodb_read_io_threads'>, value=<re.Match object; span=(0, 1), match='4'>, recommendation='4 to 16', passage='Cloud storage, analytic queries, concurrent workload, parallel query enabled (Ali Cloud), 64 cores, o_direct.\ninnodb_buffer_pool_instances (change from 8 to 32)\ninnodb_read_io_threads (change from 4 to 16)\nUnder a 100% physical I/O workload this resulted in a 4x speedup. innodb_write_io_threads ', float_val=4.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.11329956352710724, 0.21913976967334747, 0.13073761761188507, 0.39394477009773254, 0.14287824928760529]
Choice: 2
type: 3, value: 4.0, unit: 
Done flag: False
No warmup - hint counter: 83
{'sequence': '4 to 16', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.5075037479400635, 0.19277720153331757, 0.15175284445285797, 0.12437357753515244, 0.023592589423060417]}
Decision: Deciding weight of TuningHint(doc_id=4, param=<re.Match object; span=(161, 183), match='innodb_read_io_threads'>, value=<re.Match object; span=(0, 1), match='4'>, recommendation='4 to 16', passage='Cloud storage, analytic queries, concurrent workload, parallel query enabled (Ali Cloud), 64 cores, o_direct.\ninnodb_buffer_pool_instances (change from 8 to 32)\ninnodb_read_io_threads (change from 4 to 16)\nUnder a 100% physical I/O workload this resulted in a 4x speedup. innodb_write_io_threads ', float_val=4.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.023592589423060417, 0.5075037479400635, 0.19277720153331757, 0.15175284445285797, 0.12437357753515244]
Choice: 1
Trying assigning innodb_read_io_threads to 4
Assignment ('innodb_read_io_threads', '4') was rejected
Hint counter: 84
Episode hint counter before: 3
Episode hint counter: 4
Hints per episode: 5
Done flag: False
No warmup - hint counter: 84
{'sequence': '4 to 16', 'labels': ['Increase recommendation', 'Decrease recommendation', 'Increase recommendation strongly', 'Use recommendation', 'Decrease recommendation strongly'], 'scores': [0.39394477009773254, 0.21913976967334747, 0.14287824928760529, 0.13073761761188507, 0.11329956352710724]}
Decision: Deciding adaption of TuningHint(doc_id=4, param=<re.Match object; span=(161, 183), match='innodb_read_io_threads'>, value=<re.Match object; span=(5, 7), match='16'>, recommendation='4 to 16', passage='Cloud storage, analytic queries, concurrent workload, parallel query enabled (Ali Cloud), 64 cores, o_direct.\ninnodb_buffer_pool_instances (change from 8 to 32)\ninnodb_read_io_threads (change from 4 to 16)\nUnder a 100% physical I/O workload this resulted in a 4x speedup. innodb_write_io_threads ', float_val=16.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.11329956352710724, 0.21913976967334747, 0.13073761761188507, 0.39394477009773254, 0.14287824928760529]
Choice: 4
type: 3, value: 16.0, unit: 
Done flag: False
No warmup - hint counter: 84
{'sequence': '4 to 16', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.5075037479400635, 0.19277720153331757, 0.15175284445285797, 0.12437357753515244, 0.023592589423060417]}
Decision: Deciding weight of TuningHint(doc_id=4, param=<re.Match object; span=(161, 183), match='innodb_read_io_threads'>, value=<re.Match object; span=(5, 7), match='16'>, recommendation='4 to 16', passage='Cloud storage, analytic queries, concurrent workload, parallel query enabled (Ali Cloud), 64 cores, o_direct.\ninnodb_buffer_pool_instances (change from 8 to 32)\ninnodb_read_io_threads (change from 4 to 16)\nUnder a 100% physical I/O workload this resulted in a 4x speedup. innodb_write_io_threads ', float_val=16.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.023592589423060417, 0.5075037479400635, 0.19277720153331757, 0.15175284445285797, 0.12437357753515244]
--- Tuning Updates ---
Minimal time (ms): 0.009358575514691214
Achieved with configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
Maximal time (ms): 0.9589616184964967
Achieved with configuration: {'max_input_time': '30', 'memory_limit': '128M', 'max_allowed_packet': '4M'}
Decision: Deciding adaption of TuningHint(doc_id=4, param=<re.Match object; span=(161, 183), match='innodb_read_io_threads'>, value=<re.Match object; span=(5, 7), match='16'>, recommendation='4 to 16', passage='Cloud storage, analytic queries, concurrent workload, parallel query enabled (Ali Cloud), 64 cores, o_direct.\ninnodb_buffer_pool_instances (change from 8 to 32)\ninnodb_read_io_threads (change from 4 to 16)\nUnder a 100% physical I/O workload this resulted in a 4x speedup. innodb_write_io_threads ', float_val=16.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.11329956352710724, 0.21913976967334747, 0.13073761761188507, 0.39394477009773254, 0.14287824928760529]
Choice: 2
type: 3, value: 16.0, unit: 
Done flag: False
Decision: Deciding weight of TuningHint(doc_id=4, param=<re.Match object; span=(161, 183), match='innodb_read_io_threads'>, value=<re.Match object; span=(5, 7), match='16'>, recommendation='4 to 16', passage='Cloud storage, analytic queries, concurrent workload, parallel query enabled (Ali Cloud), 64 cores, o_direct.\ninnodb_buffer_pool_instances (change from 8 to 32)\ninnodb_read_io_threads (change from 4 to 16)\nUnder a 100% physical I/O workload this resulted in a 4x speedup. innodb_write_io_threads ', float_val=16.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.023592589423060417, 0.5075037479400635, 0.19277720153331757, 0.15175284445285797, 0.12437357753515244]
Choice: 2
Trying assigning innodb_read_io_threads to 16
Assignment ('innodb_read_io_threads', '16') was rejected
Hint counter: 85
Episode hint counter before: 4
Episode hint counter: 5
Hints per episode: 5
Episode finished!
Done flag: True
Finalizing episode!
Weighted hints: defaultdict(<function NlpTuningEnv._finalize_episode.<locals>.<lambda> at 0x7f86e0c76710>, {('check_proxy_users', '4'): 1})
Selected configurations: [{'check_proxy_users': '4'}, {'check_proxy_users': '4'}]
Trying configuration: {'check_proxy_users': '4'}
--- Tuning Updates ---
Minimal time (ms): 0.009358575514691214
Achieved with configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
Maximal time (ms): 0.9589616184964967
Achieved with configuration: {'max_input_time': '30', 'memory_limit': '128M', 'max_allowed_packet': '4M'}
Reward 0.1818347682580479 with {'check_proxy_users': '4'}
Trying configuration: {'check_proxy_users': '4'}
--- Tuning Updates ---
Minimal time (ms): 0.009358575514691214
Achieved with configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
Maximal time (ms): 0.9589616184964967
Achieved with configuration: {'max_input_time': '30', 'memory_limit': '128M', 'max_allowed_packet': '4M'}
Reward -0.1592288728447545 with {'check_proxy_users': '4'}
Obtained 0.1818347682580479 by configuration {'check_proxy_users': '4'}
Achieved unscaled reward of 0.1818347682580479 using {'check_proxy_users': '4'}.
No warmup - hint counter: 85
{'sequence': 'c1=t2.c1', 'labels': ['Use recommendation', 'Increase recommendation', 'Increase recommendation strongly', 'Decrease recommendation', 'Decrease recommendation strongly'], 'scores': [0.26933833956718445, 0.21489861607551575, 0.19000056385993958, 0.177046537399292, 0.14871592819690704]}
Decision: Deciding adaption of TuningHint(doc_id=8, param=<re.Match object; span=(184, 201), match='auto_distinct_key'>, value=<re.Match object; span=(1, 2), match='1'>, recommendation='c1=t2.c1', passage='*************************** 1. row ***************************\nEXPLAIN: -> Nested loop antijoin\n-> Table scan on t2\n(cost=0.85 rows=6)\n-> Single-row index lookup on <subquery2> using <auto_distinct_key> (c1=t2.c1) lower_case_table_names ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.14871592819690704, 0.177046537399292, 0.26933833956718445, 0.21489861607551575, 0.19000056385993958]
--- Tuning Updates ---
Minimal time (ms): 0.009358575514691214
Achieved with configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
Maximal time (ms): 0.9589616184964967
Achieved with configuration: {'max_input_time': '30', 'memory_limit': '128M', 'max_allowed_packet': '4M'}
Decision: Deciding adaption of TuningHint(doc_id=8, param=<re.Match object; span=(184, 201), match='auto_distinct_key'>, value=<re.Match object; span=(1, 2), match='1'>, recommendation='c1=t2.c1', passage='*************************** 1. row ***************************\nEXPLAIN: -> Nested loop antijoin\n-> Table scan on t2\n(cost=0.85 rows=6)\n-> Single-row index lookup on <subquery2> using <auto_distinct_key> (c1=t2.c1) lower_case_table_names ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.14871592819690704, 0.177046537399292, 0.26933833956718445, 0.21489861607551575, 0.19000056385993958]
Choice: 4
type: 3, value: 1.0, unit: 
Done flag: False
No warmup - hint counter: 85
{'sequence': 'c1=t2.c1', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.48905807733535767, 0.17313383519649506, 0.16344638168811798, 0.12998485565185547, 0.04437684640288353]}
Decision: Deciding weight of TuningHint(doc_id=8, param=<re.Match object; span=(184, 201), match='auto_distinct_key'>, value=<re.Match object; span=(1, 2), match='1'>, recommendation='c1=t2.c1', passage='*************************** 1. row ***************************\nEXPLAIN: -> Nested loop antijoin\n-> Table scan on t2\n(cost=0.85 rows=6)\n-> Single-row index lookup on <subquery2> using <auto_distinct_key> (c1=t2.c1) lower_case_table_names ', float_val=1.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.04437684640288353, 0.48905807733535767, 0.17313383519649506, 0.16344638168811798, 0.12998485565185547]
Choice: 4
Trying assigning auto_distinct_key to 4
Adding assignment ('auto_distinct_key', '4') with weight 16
Assignment ('auto_distinct_key', '4') extracted from "*************************** 1. row ***************************
EXPLAIN: -> Nested loop antijoin
-> Table scan on t2
(cost=0.85 rows=6)
-> Single-row index lookup on <subquery2> using <auto_distinct_key> (c1=t2.c1) lower_case_table_names "
Hint counter: 86
Episode hint counter before: 0
Episode hint counter: 1
Hints per episode: 5
Done flag: False
No warmup - hint counter: 86
{'sequence': 'c1=t2.c1', 'labels': ['Use recommendation', 'Increase recommendation', 'Increase recommendation strongly', 'Decrease recommendation', 'Decrease recommendation strongly'], 'scores': [0.26933833956718445, 0.21489861607551575, 0.19000056385993958, 0.177046537399292, 0.14871592819690704]}
Decision: Deciding adaption of TuningHint(doc_id=8, param=<re.Match object; span=(184, 201), match='auto_distinct_key'>, value=<re.Match object; span=(4, 5), match='2'>, recommendation='c1=t2.c1', passage='*************************** 1. row ***************************\nEXPLAIN: -> Nested loop antijoin\n-> Table scan on t2\n(cost=0.85 rows=6)\n-> Single-row index lookup on <subquery2> using <auto_distinct_key> (c1=t2.c1) lower_case_table_names ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['Decrease recommendation strongly', 'Decrease recommendation', 'Use recommendation', 'Increase recommendation', 'Increase recommendation strongly']
Scores: [0.14871592819690704, 0.177046537399292, 0.26933833956718445, 0.21489861607551575, 0.19000056385993958]
Choice: 1
type: 3, value: 2.0, unit: 
Done flag: False
No warmup - hint counter: 86
{'sequence': 'c1=t2.c1', 'labels': ['This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.', 'This hint is not important.'], 'scores': [0.48905807733535767, 0.17313383519649506, 0.16344638168811798, 0.12998485565185547, 0.04437684640288353]}
Decision: Deciding weight of TuningHint(doc_id=8, param=<re.Match object; span=(184, 201), match='auto_distinct_key'>, value=<re.Match object; span=(4, 5), match='2'>, recommendation='c1=t2.c1', passage='*************************** 1. row ***************************\nEXPLAIN: -> Nested loop antijoin\n-> Table scan on t2\n(cost=0.85 rows=6)\n-> Single-row index lookup on <subquery2> using <auto_distinct_key> (c1=t2.c1) lower_case_table_names ', float_val=2.0, val_unit='', hint_type=<HintType.ABSOLUTE: 3>)
Choices: ['This hint is not important.', 'This hint is somewhat important.', 'This hint is quite important.', 'This hint is very important.', 'This hint is super important.']
Scores: [0.04437684640288353, 0.48905807733535767, 0.17313383519649506, 0.16344638168811798, 0.12998485565185547]
Tuning process of DB-BERT is finished.
Summary of results:
--- Tuning Updates ---
Minimal time (ms): 0.009358575514691214
Achieved with configuration: {'tmp_table_size': '16', 'thread_cache_size': '20'}
Maximal time (ms): 0.9589616184964967
Achieved with configuration: {'max_input_time': '30', 'memory_limit': '128M', 'max_allowed_packet': '4M'}
